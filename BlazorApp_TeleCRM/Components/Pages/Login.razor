@page "/login"
@using BlazorApp_TeleCRM.Components.Layout
@using System.ComponentModel.DataAnnotations
@using BlazorApp_TeleCRM.Models
@using BlazorApp_TeleCRM.Service
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject IJSRuntime JSRuntime
@layout LoginLayout
@inject NavigationManager Navigation
@inject NotificationService NotificationService

@inject allseeddbPDContext allseed_Db
@inject AuthenticationStateProvider AuthenticationStateProvider

<link href="bootstrap/login.css" rel="stylesheet" />

<PageTitle>เข้าสู่ระบบ</PageTitle>


<RadzenTemplateForm @ref="form" TItem="LoginModel" Data="@loginModel" Submit="@OnSubmit" InvalidSubmit="@OnInvalidSubmit">
    <RadzenStack Gap="20px" >
        <!-- Username Field -->
        <RadzenRow AlignItems="AlignItems.Center" RowGap="0.50rem">
            <RadzenColumn Size="12" SizeMD="4" SizeSM="12">
                <RadzenLabel Text="Username" Component="Username" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="8" SizeSM="12">
                <RadzenTextBox style="display: block; width: 100%;" Name="Username" Placeholder="กรอก Username หรือ Email ของคุณ" @bind-Value="@loginModel.Username" />
                <RadzenDataAnnotationValidator Component="Username" Popup="@popup" Style="position: absolute;" />
            </RadzenColumn>
        </RadzenRow>

        <!-- Password Field -->
        <RadzenRow AlignItems="AlignItems.Center" RowGap="0.50rem">
            <RadzenColumn Size="12" SizeMD="4" SizeSM="12">
                <RadzenLabel Text="Password" Component="Password" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="8" SizeSM="12">
                <RadzenPassword style="display: block; width: 100%;" Name="Password" Placeholder="กรอกรหัสผ่าน" @bind-Value="@loginModel.Password" aria-label="enter password" />
                <RadzenDataAnnotationValidator Component="Password" Popup="@popup" Style="position: absolute;" />
            </RadzenColumn>
        </RadzenRow>

        <!-- Submit Button -->
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn Size="12" Offset="0" SizeMD="8" SizeSM="12" OffsetMD="4">
                <RadzenButton Icon="login"
                              Variant="Variant.Flat"
                              ButtonType="ButtonType.Submit"
                              Text="Login"
                              Style="background-color: var(--primary-color); color: white; width: 100%; padding: 12px; border-radius: 8px;" />
            </RadzenColumn>
        </RadzenRow>

    </RadzenStack>
</RadzenTemplateForm>



@code {
    private RadzenTemplateForm<LoginModel> form;
    private LoginModel loginModel = new LoginModel();
    private bool popup = false;

    private string username;
    private IEnumerable<string> roles;


    private async Task OnSubmit()
    {



        var user = await allseed_Db.Users
     .Where(u => (u.username == loginModel.Username || u.email == loginModel.Username)
                 && u.password == loginModel.Password)
     .FirstOrDefaultAsync();

        if (user != null)
        {
            if (user.record_status == true)
            {
                if (AuthenticationStateProvider is CustomAuthenticationStateProvider customAuthProvider)
                {
                    await customAuthProvider.MarkUserAsAuthenticated(user);
                }

                user.loginkey = Guid.NewGuid().ToString();
                user.lastlogin = DateTime.Now;

                allseed_Db.SaveChanges();

                // Save the login state in localStorage
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "isLoggedIn", "true");
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "username", user.username);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "uid", user.loginkey);

                //            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "uid", string.Join(",", user.role));

                NotificationService.Notify(NotificationSeverity.Success, "เข้าสู่ระบบ สำเร็จ", "สวัสดี คุณ" + user.firstname);
                Navigation.NavigateTo("/home", forceLoad: false);
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "เข้าสู่ระบบ ไม่สำเร็จ", "บัญชีของคุณถูกระงับ");
            }
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Error, "เข้าสู่ระบบ ไม่สำเร็จ", "กรุณาตรวจสอบข้อมูล หรือติดต่อผู้ดูแลระบบ");
        }
    }

    private void OnInvalidSubmit()
    {
        NotificationService.Notify(NotificationSeverity.Warning, "แจ้งเตือน", "กรุณาตรวจสอบข้อมูล");
    }


    public class LoginModel
    {
        [Required(ErrorMessage = "กรอก Username หรือ Email ของคุณ")]
        public string Username { get; set; }

        [Required(ErrorMessage = "กรอกรหัสผ่าน")]
        public string Password { get; set; }
    }
}