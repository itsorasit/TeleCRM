@page "/console"
@using BlazorApp_TeleCRM.Components.Pages.AdminProduction
@using BlazorApp_TeleCRM.Data
@using BlazorApp_TeleCRM.Models
@using BlazorApp_TeleCRM.Service
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using MySql.Data.MySqlClient


@using static BlazorApp_TeleCRM.Controller.CustomerAdminController
@inject IConfiguration Configuration
@inject HttpClient Http
@inject DialogService DialogService
@inject SharedStateService SharedState
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject MySqlConnection MySqlConnection
@inject NotificationService NotificationService



<style>

    .card {
        width: 300px;
        border: 1px solid #ccc;
        border-radius: 8px;
        overflow: hidden;
        padding-top: 10px;
        padding-left: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s;
    }

        .card:hover {
            transform: translateY(-5px);
        }

    .card-image {
        /*  width: 100%; */
        height: auto;
    }

    .card-content {
        padding: 16px;
    }

    .card-title {
        font-size: 1.5em;
        margin: 0 0 10px;
    }

    .card-description {
        font-size: 1em;
        color: #666;
        margin-bottom: 15px;
    }

    .card-button {
        display: inline-block;
        padding: 10px 15px;
        background-color: #007bff;
        color: #fff;
        text-decoration: none;
        border-radius: 4px;
        transition: background-color 0.2s;
    }

        .card-button:hover {
            background-color: #0056b3;
        }

</style>

<PageTitle>คอนโซล</PageTitle>




<div class="rz-12">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Icon="settings" Path="/console" Text="คอนโซล" />
    </RadzenBreadCrumb>
    <RadzenText TextStyle="TextStyle.DisplayH5"></RadzenText>
</div>



<div class="rz-display-flex rz-row rz-align-items-normal rz-justify-content-normal" style="margin-top:50px" id="components">
    <div class="rz-col-12">

        <AuthorizeView Roles="Admin">
            <div class=" rz-card rz-variant-outlined rz-background-color-white   rz-display-flex rz-row rz-align-items-normal ">
                <div class="rz-col-12 " style=""><h3 class="rz-text-h4">ร้านค้า</h3></div>
                <div class="rz-col-12  components-list">

                    <div class="rz-display-flex rz-row rz-align-items-normal rz-justify-content-normal" style="--rz-row-gap:1.5rem">
                        <div class="rz-col-12 rz-col-xs-6 rz-col-sm-4 rz-col-lg-3">
                           
                                <RadzenButton Text="เพิ่มร้านค้า" Icon="store" Click="@OpenNewStore" />
                          

                            <RadzenButton Text="รีเฟรช" Icon="refresh" ButtonStyle="ButtonStyle.Info" Click="@OnRefresh" />

                        </div>
                        <RadzenProgressBarCircular @bind-Visible="runProcess_wait" ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium">
                            <Template>โหลด</Template>
                        </RadzenProgressBarCircular>

                        @foreach (var branch in Branches)
                        {
                            <div class="card">
                                <img src="@branch.imageurl" width="100px" alt="Card Image" class="card-image">
                                <div class="card-content">
                                    <h3 class="card-title">@branch.name</h3>
                                    @*            <p class="card-description">@branch.name</p> *@
                                    <RadzenButton Click=@(() => OpenEditStore(branch.code)) Variant="Variant.Outlined" Text="แก้ไข" ButtonStyle="ButtonStyle.Primary" />
                                </div>
                            </div>


                        }
                    </div>
                </div>
            </div>
        </AuthorizeView>

        <AuthorizeView Roles="Manager">
            <div class=" rz-card rz-variant-outlined rz-background-color-white   rz-display-flex rz-row rz-align-items-normal ">
                <div class="rz-col-12 " style=""><h3 class="rz-text-h4">ร้านค้า</h3></div>
                <div class="rz-col-12  components-list">

                    <div class="rz-display-flex rz-row rz-align-items-normal rz-justify-content-normal" style="--rz-row-gap:1.5rem">
                        <div class="rz-col-12 rz-col-xs-6 rz-col-sm-4 rz-col-lg-3">                          
                            <RadzenButton Text="รีเฟรช" Icon="refresh" ButtonStyle="ButtonStyle.Info" Click="@OnRefresh" />
                        </div>
                        <RadzenProgressBarCircular @bind-Visible="runProcess_wait" ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium">
                            <Template>โหลด</Template>
                        </RadzenProgressBarCircular>

                        @foreach (var branch in Branches)
                        {
                            <div class="card">
                                <img src="@branch.imageurl" width="100px" alt="Card Image" class="card-image">
                                <div class="card-content">
                                    <h3 class="card-title">@branch.name</h3>
                                    @*            <p class="card-description">@branch.name</p> *@
                                    <RadzenButton Click=@(() => OpenEditStore(branch.code)) Variant="Variant.Outlined" Text="แก้ไข" ButtonStyle="ButtonStyle.Primary" />
                                </div>
                            </div>


                        }
                    </div>
                </div>
            </div>
        </AuthorizeView>



        <AuthorizeView Roles="Admin,Manager">
            <div class=" rz-card rz-variant-outlined rz-background-color-white rz-display-flex rz-row rz-align-items-normal rz-justify-content-normal" style="margin-top:30px">
                <div class="rz-col-12 rz-col-md-3 rz-col-lg-2 rz-col-xl-3">
                    <h3 class="rz-text-h4">ผู้ใช้งาน</h3>

                </div>
                <div class="rz-col-12  components-list">
                    <div class="rz-col-12 rz-col-xs-6 rz-col-sm-4 rz-col-lg-3" style="margin-bottom:20px">
                        <RadzenButton Text="เพิ่มผู้ใช้งาน" Icon="person_add" Click="@(args => OpenSideDialog(null))" />
                        <RadzenButton Text="รีเฟรช" Icon="refresh" ButtonStyle="ButtonStyle.Info" Click="@OnRefresh" />
                    </div>

                    <RadzenProgressBarCircular @bind-Visible="runProcess_wait" ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium">
                        <Template>โหลด</Template>
                    </RadzenProgressBarCircular>


                    <RadzenDataGrid @ref="grid" TItem="User" Data="@cus_datas" PagerPosition="PagerPosition.Bottom"
                                    PageSize="10"
                                    FilterMode="FilterMode.SimpleWithMenu" AllowFiltering="true" AllowPaging="true"
                                    @bind-Value=@selectedCustomer
                                    AllowSorting="true" ColumnWidth="300px"
                                    ShowPagingSummary="true"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    PageSizeOptions="@pageSizeOptions">
                        <Columns>

                            <RadzenDataGridColumn Width="60px" Filterable="false" Property="@nameof(MasProductions.production_code)" Title="">
                                <Template Context="data">
                                    <RadzenButton ButtonStyle="ButtonStyle.Light" Click="@(args => OpenSideDialog(data.id))" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="manage_search" class="rz-m-1" />
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn Width="100px" Filterable="false" TItem="User" Property="@nameof(User.imageurl)" Title="">
                                <Template Context="data">
                                    @if (string.IsNullOrEmpty(data.imageurl))
                                    {
                                        <RadzenImage Path="user/profile.png" class="rz-gravatar" AlternateText="" />
                                    }
                                    else
                                    {
                                        <RadzenImage Path="@data.imageurl" class="rz-gravatar" AlternateText="" />
                                    }
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="User" Property="@nameof(User.username)" Width="150px" Title="บัญชีผู้ใช้งาน" />
                            <RadzenDataGridColumn TItem="User" Property="@nameof(User.firstname)" Width="220px" Title="ชื่อผู้ใช้งาน" />

                            <RadzenDataGridColumn TItem="User" Property="@nameof(User.role)" Width="120px" Title="สิทธิ์ผู้ใช้งาน" />


                            <RadzenDataGridColumn TItem="User" Property="@nameof(User.lastname)" Width="250px" Title="ร้านค้า" />
                            <RadzenDataGridColumn TItem="User" Property="@nameof(User.lastlogin)" Width="200px" Title="lastlogin" />
                            <RadzenDataGridColumn TItem="User" Property="@nameof(User.record_status)" Width="1จ0px" Title="สถานะใช้งาน" />
                        </Columns>
                    </RadzenDataGrid>

                </div>
            </div>

        </AuthorizeView>
    </div>
</div>

@code {
    bool isDialogOpen = false;
    bool runProcess_wait = false;
    private List<MasBranches> Branches = new();



    private string BranchCode { get; set; }
    private IEnumerable<string> _BranchCode;


    private IEnumerable<User> cus_datas;
    IList<User> selectedCustomer;
    RadzenDataGrid<User> grid;
    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30, 50, 100 };




    public enum WorkStatus
    {
        Admin,
        Supervisor,
        User
    }



    private async Task OnRefresh()
    {
        // เรียกข้อมูลจากฐานข้อมูล
        Branches = await GetBranchesAsync();


        // เรียกใช้เมธอด FetchCustomerDataAsync เพื่อดึงข้อมูล
        cus_datas = await FetchCustomerDataAsync();

        if (cus_datas != null && cus_datas.Any())
        {
            selectedCustomer = new List<User>() { cus_datas.FirstOrDefault() };
        }

        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
     

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            //  username = user.Identity.Name;
            //  roles = user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value);
            _BranchCode = user.Claims.Where(c => c.Type == ClaimTypes.Locality).Select(c => c.Value);
            BranchCode = _BranchCode.FirstOrDefault();

        }
        else
        {
            // username = "Not authenticated";
            // roles = Enumerable.Empty<string>();
            BranchCode = "";
        }

        // เรียกข้อมูลจากฐานข้อมูล
        Branches = await GetBranchesAsync();

        // เรียกใช้เมธอด FetchCustomerDataAsync เพื่อดึงข้อมูล
        cus_datas = await FetchCustomerDataAsync();

        if (cus_datas != null && cus_datas.Any())
        {
            selectedCustomer = new List<User>() { cus_datas.FirstOrDefault() };
        }

    }

    // ดึงข้อมูลร้านค้าจากฐานข้อมูล
    private async Task<List<MasBranches>> GetBranchesAsync()
    {
        var branches = new List<MasBranches>();

        try
        {
            await MySqlConnection.OpenAsync();

            string query = "";
            if (BranchCode == "000000")
            {
                query = @"
            SELECT code, name, `level`, parent_code, created_by, created_date, modified_by, modified_date,imageurl
            FROM mas_branches
            WHERE code = @branch_code1
            UNION ALL
            SELECT code, name, `level`, parent_code, created_by, created_date, modified_by, modified_date,imageurl
            FROM mas_branches
            WHERE parent_code = @branch_code2 AND level IN (1)";
            }
            else
            {
                query = @"
            SELECT code, name, `level`, parent_code, created_by, created_date, modified_by, modified_date,imageurl
            FROM mas_branches
            WHERE code = @branch_code1 AND level IN (1) ";
            }

      

            using var command = new MySqlCommand(query, MySqlConnection);
            command.Parameters.AddWithValue("@branch_code1", BranchCode);
            command.Parameters.AddWithValue("@branch_code2", BranchCode);

            using var reader = await command.ExecuteReaderAsync();

            while (await reader.ReadAsync())
            {
                branches.Add(new MasBranches
                    {
                        code = reader["code"].ToString(),
                        name = reader["name"].ToString(),
                        level = reader.GetInt32(reader.GetOrdinal("level")),
                        parent_code = reader["parent_code"].ToString(),
                        imageurl = reader["imageurl"].ToString()
                    });
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Error branch: {ex.Message}");
        }
        finally
        {
            await MySqlConnection.CloseAsync();
        }

        return branches;
    }


    public async Task<IEnumerable<User>> FetchCustomerDataAsync()
    {
        try
        {

            // เปิด DialogService เพื่อแจ้งว่ากำลังโหลด
            runProcess_wait = true;
            StateHasChanged(); // บังคับ UI อัปเดต

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                branch_code = BranchCode
            };

            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/MSUser/GetUsersData", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                // แปลงข้อมูลที่ได้รับเป็น IEnumerable<CustomerDataList>
                var customerDataList = await response.Content.ReadFromJsonAsync<IEnumerable<User>>();
                return customerDataList;
            }
            else
            {
                // Console.WriteLine("Error fetching customer data.");
                return Enumerable.Empty<User>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }



    async Task OpenNewStore()
    {
        await DialogService.OpenAsync<DialogCardPageStore2>($"ร้านค้า",
       new Dictionary<string, object>() { { "StoreId", "" } },
       new DialogOptions()
           {
               Width = "600px",
               Height = "600px",
               CloseDialogOnOverlayClick = false,  // Disable closing on clicking outside
               CloseDialogOnEsc = false,           // Disable closing by pressing ESC
               ShowClose = true                   // Remove the "X" close button
           });
    }

    async Task OpenEditStore(string code)
    {
        await DialogService.OpenAsync<DialogCardPageStore2>($"ร้านค้า",
       new Dictionary<string, object>() { { "StoreId", code } },
       new DialogOptions()
           {
               Width = "600px",
               Height = "600px",
               CloseDialogOnOverlayClick = false,  // Disable closing on clicking outside
               CloseDialogOnEsc = false,           // Disable closing by pressing ESC
               ShowClose = true                   // Remove the "X" close button
           });

    }

    async Task OpenSideDialog(int? ID)
    {

        if (isDialogOpen)
        {
            DialogService.Close();
            // await Task.Delay(200);
        }
        StateHasChanged();
        await DialogService.OpenSideAsync<DialogCardPageUser>(
            "ผู้ใช้งาน",
            new Dictionary<string, object>
                                                    {
            { "Id", ID.ToString() }
                                                    },
            new SideDialogOptions
                {
                    CloseDialogOnOverlayClick = true,
                    Position = DialogPosition.Right,
                    ShowMask = false,
                    Width = "850px"
                });
        isDialogOpen = true;
    }


}