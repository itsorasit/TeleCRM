@page "/explore"
@using Microsoft.AspNetCore.Components.Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWebHostEnvironment WebHostEnvironment

<PageTitle>Explore</PageTitle>

<AuthorizeView Roles="Admin">

    <div class="rz-12">
        <RadzenBreadCrumb>
            <RadzenBreadCrumbItem Icon="folder" Path="/explore" Text="Explore" />
        </RadzenBreadCrumb>
        <RadzenText TextStyle="TextStyle.DisplayH5"></RadzenText>
    </div>

    <RadzenDataList TItem="string" Data="@files" AllowPaging="true" PageSize="5" Style="margin-top:20px">
        <Template Context="file">
            <div class="file-item">
                <span>@Path.GetFileName(file)</span>
                <button class="rz-button rz-danger" @onclick="() => DeleteFile(Path.GetFileName(file))">Delete</button>
            </div>
        </Template>
        <EmptyTemplate>
            <p>No files found.</p>
        </EmptyTemplate>
    </RadzenDataList>

    <p>@statusMessage</p>

</AuthorizeView>

@code {
    private List<string> files = new();
    private string statusMessage;

    protected override void OnInitialized()
    {
        RefreshFileList();
    }

    private void RefreshFileList()
    {
        var wwwRootPath = WebHostEnvironment.WebRootPath;
        var folderPath = Path.Combine(wwwRootPath);

        if (Directory.Exists(folderPath))
        {
            files = Directory.GetFiles(folderPath).ToList();
        }
        else
        {
            files = new List<string>();
        }
    }

    private void DeleteFile(string fileName)
    {
        try
        {
            var wwwRootPath = WebHostEnvironment.WebRootPath;
            var filePath = Path.Combine(wwwRootPath, fileName);

            if (System.IO.File.Exists(filePath))
            {
                System.IO.File.Delete(filePath);
                statusMessage = $"File '{fileName}' deleted successfully.";
            }
            else
            {
                statusMessage = $"File '{fileName}' not found.";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error deleting file '{fileName}': {ex.Message}";
        }

        RefreshFileList();
        StateHasChanged();
    }
}
