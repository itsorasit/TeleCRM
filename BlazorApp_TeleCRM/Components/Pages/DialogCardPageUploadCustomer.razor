@page "/DialogCardPageUploadCustomer/{UploadID}"
@using System.ComponentModel.DataAnnotations
@using BlazorApp_TeleCRM.Models
@using Microsoft.AspNetCore.Components.Authorization
@using MySql.Data.MySqlClient
@using System.Security.Claims
@using static BlazorApp_TeleCRM.Components.Pages.UploadJob
@inject IConfiguration Configuration
@inject Radzen.DialogService dialogService
@inject NotificationService NotificationService
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment Environment
@inject MySqlConnection MySqlConnection
@inject AuthenticationStateProvider AuthenticationStateProvider


<RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">

    <RadzenCard Variant="Variant.Outlined">
        <RadzenRow Gap="1rem">
            <RadzenColumn Size="12" SizeMD="12">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">แหล่งข้อมูล <span class="rz-messages-error">*</span> </RadzenText>
                <RadzenDropDown @bind-Value=@channel Data=@datachannel Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="12">
                <InputFile OnChange="HandleFileSelected" />

            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="12">
                <RadzenAlert AlertStyle="AlertStyle.Danger" @bind-Visible=isError ShowIcon="true" Variant="Variant.Flat" Shade="Shade.Lighter">
                    @TextError
                </RadzenAlert>

                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenCard Variant="Variant.Outlined" @bind-Visible=runProcess style="background-color:#CBE2F5;">
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                            <RadzenProgressBarCircular @bind-Visible="runProcess_wait" ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium">
                                <Template>รอ</Template>
                            </RadzenProgressBarCircular>
                            <RadzenText Style="margin-top:20px" TextStyle="TextStyle.Caption">@TextProcess</RadzenText>
                        </RadzenStack>
                    </RadzenCard>
                </RadzenColumn>


                <RadzenButton Text="อัพโหลด" Disabled="@btnDisable" Style="margin-top:15px" Click="@(() => OnUpload())" ButtonStyle="ButtonStyle.Primary" />
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>


    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1.5rem">
        <RadzenButton Click="@((args) => dialogService.Close(true))" Variant="Variant.Outlined" Text="ปิด" Style="width: 120px;margin-bottom:20px" />
    </RadzenStack>
</RadzenStack>

@code {
    [Parameter] public int UploadID { get; set; }


    private List<MasCustomers>? excelData;
    // private List<MasCustomers> excelData;

    private string message = "No file attached.";

    private DotNetObjectReference<DialogCardPageUploadCustomer> dotNetHelper;

    string channel = "เลือกแหล่งข้อมูล";
    IEnumerable<string> datachannel;


    bool btnDisable = true;

    bool isError = false;
    string TextError = "";

    bool runProcess = false;
    bool runProcess_wait = false;
    string TextProcess = "";

    private string username;
    private IEnumerable<string> roles;
    private string BranchCode { get; set; }
    private IEnumerable<string> _BranchCode;

    private static readonly string[] data_channels = new[]
      {
            "เลือกแหล่งข้อมูล", "MyOrder", "GoSell"
      };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        datachannel = data_channels;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            username = user.Identity.Name;
            roles = user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value);
            // if (!user.IsInRole("Admin"))
            // {
            //     Navigation.NavigateTo("/access-denied", forceLoad: true);
            // }
            _BranchCode = user.Claims.Where(c => c.Type == ClaimTypes.Locality).Select(c => c.Value);
            BranchCode = _BranchCode.FirstOrDefault();

        }
        else
        {
            username = "Not authenticated";
            roles = Enumerable.Empty<string>();
            BranchCode = "";
        }


    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {

        isError = false;

        var file = e.File;
        var filePath = Path.Combine(Environment.WebRootPath, file.Name);

        using (var fileStream = new FileStream(filePath, FileMode.Create))
        {
            await file.OpenReadStream().CopyToAsync(fileStream);
        }

        runProcess = true;
        runProcess_wait = true;
        TextProcess = "กรุณารอ เก็บข้อมูลจากไฟล์ ..";
        // Read the Excel file
        excelData = ReadExcel(filePath);

        runProcess_wait = false;
        TextProcess = "ข้อมูลพร้อมสำหรับการอัพโหลด";
        btnDisable = false;
    }

    private List<MasCustomers> ReadExcel(string filePath)
    {

        TextProcess = "อ่านข้อมูลไฟล์";

        DateTime today = new DateTime();
        today = DateTime.Now;

        var data = new List<MasCustomers>();
        using (var workbook = new ClosedXML.Excel.XLWorkbook(filePath))
        {
            var worksheet = workbook.Worksheet(1); // เลือกชีตแรก
            var rowCount = worksheet.LastRowUsed().RowNumber();

            for (int row = 2; row <= rowCount; row++) // เริ่มจากแถวที่ 2 เพราะแถวแรกเป็นหัวตาราง
            {
                Guid id = Guid.NewGuid();
                var employee = new MasCustomers
                    {
                        guid = id.ToString(),
                        code = worksheet.Cell(row, 7).GetValue<string>(),
                        name = worksheet.Cell(row, 5).GetValue<string>(),
                        phone = worksheet.Cell(row, 7).GetValue<string>(),
                        address1 = worksheet.Cell(row, 8).GetValue<string>(),
                        sub_district = worksheet.Cell(row, 9).GetValue<string>(),
                        district = worksheet.Cell(row, 10).GetValue<string>(),
                        province = worksheet.Cell(row, 11).GetValue<string>(),
                        zipcode = worksheet.Cell(row, 12).GetValue<string>(),
                        datasource_platform = channel,
                        social_media = worksheet.Cell(row, 3).GetValue<string>(),
                        branch_code = BranchCode,
                        created_by = username,
                        created_date = today,
                        modified_by = "",
                        modified_date = today
                    };

                data.Add(employee);
            }
        }

        return data;
    }

    private async Task SaveToDatabase()
    {
        btnDisable = true;
        runProcess_wait = true;
        TextProcess = "กรุณารอ ระบบกำลังทำการบันทึกข้อมูล..";
        try
        {
            await MySqlConnection.OpenAsync();

            foreach (var employee in excelData)
            {
                var query = @"
    INSERT INTO mas_customers (guid, code, name, phone, address1, sub_district, district, province, zipcode, datasource_platform, social_media, branch_code, created_by, created_date, modified_by, modified_date)
    VALUES (@Guid, @Code, @Name, @Phone, @Address1, @SubDistrict, @District, @Province, @Zipcode, @DatasourcePlatform, @SocialMedia, @BranchCode, @CreatedBy, @CreatedDate, @ModifiedBy, @ModifiedDate)
    ON DUPLICATE KEY UPDATE
        name = VALUES(name),
        phone = VALUES(phone),
        address1 = VALUES(address1),
        sub_district = VALUES(sub_district),
        district = VALUES(district),
        province = VALUES(province),
        zipcode = VALUES(zipcode),
        datasource_platform = VALUES(datasource_platform),
        social_media = VALUES(social_media),
        branch_code = VALUES(branch_code),
        modified_by = VALUES(modified_by),
        modified_date = VALUES(modified_date);";  // แทนที่ค่าต่าง ๆ เมื่อ phone ซ้ำกัน

                using (var cmd = new MySqlCommand(query, MySqlConnection))
                {
                    cmd.Parameters.AddWithValue("@Guid", Guid.NewGuid());  // สร้าง GUID ใหม่
                    cmd.Parameters.AddWithValue("@Code", employee.code + "-" + BranchCode);
                    cmd.Parameters.AddWithValue("@Name", employee.name);
                    cmd.Parameters.AddWithValue("@Phone", employee.phone);
                    cmd.Parameters.AddWithValue("@Address1", employee.address1);
                    cmd.Parameters.AddWithValue("@SubDistrict", employee.sub_district);
                    cmd.Parameters.AddWithValue("@District", employee.district);
                    cmd.Parameters.AddWithValue("@Province", employee.province);
                    cmd.Parameters.AddWithValue("@Zipcode", employee.zipcode);
                    cmd.Parameters.AddWithValue("@DatasourcePlatform", employee.datasource_platform);
                    cmd.Parameters.AddWithValue("@SocialMedia", employee.social_media);
                    cmd.Parameters.AddWithValue("@BranchCode", employee.branch_code);
                    cmd.Parameters.AddWithValue("@CreatedBy", username);  // ระบุค่าเริ่มต้น
                    cmd.Parameters.AddWithValue("@CreatedDate", employee.created_date);  // วันที่สร้าง DateTime.UtcNow
                    cmd.Parameters.AddWithValue("@ModifiedBy", username);  // ระบุค่าเริ่มต้น
                    cmd.Parameters.AddWithValue("@ModifiedDate", employee.modified_date);  // วันที่แก้ไขล่าสุด DateTime.UtcNow

                    await cmd.ExecuteNonQueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            TextProcess = $"Error: {ex.Message}";
        }
        finally
        {

            await MySqlConnection.CloseAsync();


            btnDisable = false;
            runProcess_wait = false;
            TextProcess = "บันทึกข้อมูลระบบเรียบร้อยแล้ว";
            NotificationService.Notify(NotificationSeverity.Success, "สำเร็จ", "บันทึกข้อมูลสำเร็จ");
            StateHasChanged();


        }
    }


    private void OnUpload()
    {
        if (channel == "" || channel == "เลือกแหล่งข้อมูล")
        {
            isError = true;
            TextError = "กรุณาเลือกแหล่งข้อมูล";
            NotificationService.Notify(NotificationSeverity.Warning, "แจ้งเตือน", "กรุณาเลือกแหล่งข้อมูล");
            return;
        }

        if (excelData == null)
        {
            isError = true;
            TextError = "กรุณานำไฟล์มาอัพโหลด";
            NotificationService.Notify(NotificationSeverity.Warning, "แจ้งเตือน", "กรุณานำไฟล์มาอัพโหลด");
            return;
        }

        SaveToDatabase();

        // StateHasChanged();
    }

}
