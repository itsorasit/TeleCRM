@page "/job"
@using BlazorApp_TeleCRM.Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using MySql.Data.MySqlClient
@inject IConfiguration Configuration
@inject HttpClient Http
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject MySqlConnection MySqlConnection
@inject NotificationService NotificationService


<PageTitle>My Job</PageTitle>

<div class="rz-6">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/mydashboard" Text="My Dashboard" />
        <RadzenBreadCrumbItem Path="/job" Text="My Job" />
    </RadzenBreadCrumb>
    <RadzenText TextStyle="TextStyle.DisplayH5">งานของคุณ</RadzenText>
</div>


<RadzenPanel Style="background-color: rgba(255, 255, 255, 0.5); " AllowCollapse="true">
    <HeaderTemplate>
        <RadzenText TextStyle="TextStyle.Caption" class="rz-display-flex rz-align-items-center rz-m-0">
            <b>Filter</b>
            <RadzenIcon Icon="filter_alt" class="rz-me-1" />
        </RadzenText>
    </HeaderTemplate>
    <ChildContent>
        <div class="rz-col-12">
            <RadzenCard Variant="Variant.Outlined" class="rz-info rz-shade-lighte" Style="padding: 1rem;">
                <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Start" Class="rz-mt-2">
                    <RadzenColumn Size="3">
                        <RadzenLabel Text="เลือกคำค้นหา" />
                        <RadzenDropDown @bind-Value=@Filtering_Key_main style="display:block;width:100%"
                                        Data=@dataFiltering_main Change="@(args => OnCallKeyChange2(Filtering_Key_main))" Name="ddlFiltering_main" class="w-100" />
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenLabel Text="วันที่ " Component="RadzenDatePickerBindValue" />
                        <RadzenDatePicker @bind-Value="CreateDateFrom" Name="CreateDateFrom" DateFormat="dd/MM/yyyy" ShowCalendarWeek="true" Style="width: 100%;" />
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenLabel Text="ถึงวันที่ " Component="RadzenDatePickerBindValue" />
                        <RadzenDatePicker @bind-Value="CreateDateTo" Name="CreateDateTo" DateFormat="dd/MM/yyyy" ShowCalendarWeek="true" Style="width: 100%;" />
                    </RadzenColumn>
                    <RadzenColumn Size="3">
                        <br />
                        <RadzenButton Text="ค้นหา" Icon="search" Variant="Variant.Flat" Style="width: 100px; margin-right: 0.5rem;" Click="@OnSearch" />
                        <RadzenButton Text="ล้าง" Icon="autorenew" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Secondary" Style="width: 100px;" Click="@OnClear" />
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        </div>
    </ChildContent>
</RadzenPanel>

<RadzenPanel AllowCollapse="true" Collapsed="true">
    <HeaderTemplate>
        <RadzenText TextStyle="TextStyle.Caption" class="rz-display-flex rz-align-items-center rz-m-0">
            <b>Targeted Filter</b>
            <RadzenIcon Icon="filter_alt" class="rz-me-1" />
        </RadzenText>
    </HeaderTemplate>
    <ChildContent>

        <div class="rz-col-12 ">
            <RadzenCard Variant="Variant.Outlined" class="rz-info rz-shade-lighte" Style="padding: 1rem;">
                <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Start" Class="rz-mt-2">
                    <RadzenColumn Size="3">
                        <RadzenLabel Text="เลือกคำค้นหา" />
                        <RadzenDropDown @bind-Value=@Filtering_Key style="display:block;width:100%"
                                        Data=@dataFiltering Change="@(args => OnCallKeyChange(Filtering_Key))" Name="ddlFiltering" class="w-100" />
                    </RadzenColumn>
                    <RadzenColumn Size="3">
                        <RadzenLabel Text="=" />
                        @if (ISKeyDroupDown == false)
                        {
                            <RadzenTextBox @bind-Value=@Filtering_Value Name="txtFiltering_Value" Placeholder="" class="w-100" />
                        }
                        else
                        {
                            <RadzenDropDown @ref="radzenDropDown"
                                            @bind-SearchText="SearchText"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            FilterOperator="StringFilterOperator.StartsWith"
                                            AllowFiltering="true"
                                            Data="@Assignworks"
                                            TextProperty="FullName"
                                            ValueProperty="Username"
                                            AllowClear="true"
                                            @bind-Value=@Filtering_Value
                                            Name="Filtering_Value2" class="w-100" style="display: block;width: 100%" />

                        }

                    </RadzenColumn>
                    <RadzenColumn Size="3">
                        <br />
                        <RadzenButton Text="ค้นหา" Icon="search" Variant="Variant.Flat" Style="width: 100px; margin-right: 0.5rem;" Click="@OnSearch2" />
                        <RadzenButton Text="ล้าง" Icon="autorenew" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Secondary" Style="width: 100px;" Click="@OnClear2" />

                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        </div>

    </ChildContent>
</RadzenPanel>



<RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" class="rz-p-1" Gap="2rem">
    <RadzenButton ButtonStyle="ButtonStyle.Primary" Click=@(() => OnSearch_Touch_point("Up-Sale"))>
        Up-Sale
        <RadzenBadge Variant="Variant.Outlined" BadgeStyle="BadgeStyle.Light" Text="@count_UpSale.ToString()" class="rz-ms-2" />
    </RadzenButton>

    <RadzenButton ButtonStyle="ButtonStyle.Success" Click=@(() => OnSearch_Touch_point("Cross-Sale"))>
        Cross-Sale
        <RadzenBadge Variant="Variant.Outlined" Text="@count_CrossSale.ToString()" class="rz-ms-2" />
    </RadzenButton>

    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click=@(() => OnSearch_Touch_point("Re-Sale"))>
        Re-Sale
        <RadzenBadge Variant="Variant.Outlined" BadgeStyle="BadgeStyle.Light" Text="@count_ReSale.ToString()" class="rz-ms-2" />
    </RadzenButton>

    <RadzenButton ButtonStyle="ButtonStyle.Base" Click=@(() => OnSearch_Touch_point("ลูกค้าขุด"))>
        ลูกค้าขุด
        <RadzenBadge Variant="Variant.Outlined" Text="@count_x.ToString()" class="rz-ms-2"  />
    </RadzenButton>

    <RadzenButton ButtonStyle="ButtonStyle.Info" Click=@(() => OnSearch_JobCompleted())>
        จัดการแล้ว
        <RadzenBadge Variant="Variant.Outlined" BadgeStyle="BadgeStyle.Light" Text="@count_completed.ToString()" class="rz-ms-2" />
    </RadzenButton>

</RadzenStack>

<RadzenProgressBarCircular @bind-Visible="runProcess_wait" ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium">
    <Template>โหลด</Template>
</RadzenProgressBarCircular>

<RadzenDataGrid @ref="grid" TItem="JobDataList" Data="@act_data" PagerPosition="PagerPosition.Bottom"
                FilterMode="FilterMode.SimpleWithMenu" PageSize="10"
                SelectionMode="DataGridSelectionMode.Single"
                @bind-Value=@selectedAct
                AllowFiltering="true" AllowPaging="true" AllowColumnResize="true"
                AllowSorting="true" ColumnWidth="300px"
                ShowPagingSummary="true"
                PageSizeOptions="@pageSizeOptions">
    <Columns>
        <RadzenDataGridColumn Width="100px" Filterable="false" Property="JobID" Title="">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="manage_search" class="rz-m-1" Click=@(() => OpenSideDialog(data.guid)) />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="160px" Property="act_status" Title="ความคืบหน้า">
            <Template Context="data">

                @if (data.act_status == "สำเร็จ")
                {
                    <RadzenButton Text="สำเร็จ" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Info" Shade="Shade.Lighter" Variant="Variant.Flat" class="rz-ripple" />
                }
                else if (data.act_status == "")
                {
                    <RadzenButton Text="รอดำเนินการ" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Warning" Shade="Shade.Lighter" Variant="Variant.Flat" class="rz-ripple" />
                }
                else if (data.act_status == "ปิดการขาย")
                {
                    <RadzenButton Text="ปิดการขาย" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Success" Shade="Shade.Lighter" Variant="Variant.Flat" class="rz-ripple" />
                }
                else if (data.act_status == "ไม่สำเร็จ")
                {
                    <RadzenButton Text="ไม่สำเร็จ" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Light" Shade="Shade.Lighter" Variant="Variant.Flat" class="rz-ripple" />
                }
                else
                {
                    <RadzenButton Text="@data.act_status" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Dark" Shade="Shade.Lighter" Variant="Variant.Flat" class="rz-ripple" />
                }

            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="JobDataList" Property="@nameof(JobDataList.touch_point)" Width="180px" Title="Touch Point" />

        <RadzenDataGridColumn Width="100px" Filterable="false" Property="product_code" Title="สินค้า">
            <Template Context="data">
                @if (!string.IsNullOrEmpty(data.product_code))
                {
                    <RadzenImage Path="/products/product001.png" Style="width: 60px; height: 60px;" class="rz-border-radius-2" AlternateText="" />
                }
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="JobDataList" Property="@nameof(JobDataList.call_status)" Width="180px" Title="สถานะการโทร" />
        <RadzenDataGridColumn TItem="JobDataList" Property="@nameof(JobDataList.call_action)" Width="180px" Title="สถานะการสนทนา" />
        <RadzenDataGridColumn TItem="JobDataList" Property="@nameof(JobDataList.customer_name)" Width="180px" Title="ชื่อลูกค้า" />
        <RadzenDataGridColumn TItem="JobDataList" Property="@nameof(JobDataList.customer_phone)" Width="150px" Title="เบอร์ลูกค้า" />
        <RadzenDataGridColumn TItem="JobDataList" Property="@nameof(JobDataList.customer_province)" Width="120px" Title="จังหวัด" />
        <RadzenDataGridColumn TItem="JobDataList" Property="@nameof(JobDataList.assign_work)" Width="150px" Title="พนักงานติดต่อ" />
        <RadzenDataGridColumn TItem="JobDataList" Property="@nameof(JobDataList.startdate)" Width="180px" FormatString="{0:dd/MM/yyyy HH:mm:ss}" Title="วันที่ติดต่อลูกค้า" />
        <RadzenDataGridColumn TItem="JobDataList" Property="@nameof(JobDataList.contact_created_by)" Width="150px" Title="พนักงานติดต่อครั้งก่อน" />
        <RadzenDataGridColumn TItem="JobDataList" Property="@nameof(JobDataList.contact_created_at)" Width="180px" FormatString="{0:dd/MM/yyyy HH:mm:ss}" Title="วันที่ติดต่อครั้งก่อน" />
        <RadzenDataGridColumn TItem="JobDataList" Property="@nameof(JobDataList.contact_result2)" Width="150px" Title="ผลตอบรับครั้งก่อน" />


        <RadzenDataGridColumn TItem="JobDataList" Property="@nameof(JobDataList.startdate)" Width="180px" FormatString="{0:dd/MM/yyyy HH:mm:ss}" Title="วันที่มอบหมายงาน" />
        <RadzenDataGridColumn TItem="JobDataList" Property="@nameof(JobDataList.remark)" Title="หมายเหตุ" />
    </Columns>
</RadzenDataGrid>


@code {
    private int count_UpSale = 0;
    private int count_ReSale = 0;
    private int count_CrossSale = 0;
    private int count_x = 0;
    private int count_completed = 0;

    bool runProcess_wait = false;
    bool isDialogOpen = false;
    DateTime? value = DateTime.Now;
    private DateTime? CreateDateFrom { get; set; }
    private DateTime? CreateDateTo { get; set; }

    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30, 50, 100 };


    private string username;
    private IEnumerable<string> roles;

    private string BranchCode { get; set; }
    private IEnumerable<string> _BranchCode;


    private IEnumerable<JobDataList> act_data;
    IList<JobDataList> selectedAct;
    RadzenDataGrid<JobDataList> grid;


    private string Filtering_Key = "ค้นจากเบอร์ลูกค้า";
    private string Filtering_Value = "";
    private bool ISKeyDroupDown = false;
    IEnumerable<string> dataFiltering;
    private static readonly string[] Filterings = new[]
      {
           "ค้นจากเบอร์ลูกค้า", "ค้นจากชื่อลูกค้า"
      };


    private string Filtering_Key_main = "งานวันนี้";
    private string Filtering_Value_main = "";
    private bool ISKeyDroupDown_main = false;
    IEnumerable<string> dataFiltering_main;
    private static readonly string[] Filterings_main = new[]
      {
           "งานวันนี้","งานประจำเดือน","งานตกค้างทั้งหมด","งานทั้งหมด"
      };


    private List<Assignwork> Assignworks = new();
    private string SearchText { get; set; }
    private RadzenDropDown<string> radzenDropDown;

    private void OnCallKeyChange(string value)
    {
        Filtering_Value = "";
        if (value == "ค้นจากพนักงาน")
        {
            ISKeyDroupDown = true;
        }
        else
        {
            ISKeyDroupDown = false;
        }
    }

    private void OnCallKeyChange2(string value)
    {
       
    }



    private async Task OnSearch()
    {
        act_data = await FetchJobDataAsync(this.CreateDateFrom, this.CreateDateTo);

        if (act_data != null && act_data.Any())
        {
            selectedAct = new List<JobDataList>() { act_data.FirstOrDefault() };
        }

        StateHasChanged();
    }

    private async Task OnSearch2()
    {

        if (string.IsNullOrEmpty(Filtering_Value))
        {
            NotificationService.Notify(NotificationSeverity.Warning,
                @"แจ้งเตือน Targeted Filter", "กรุณาใส่ข้อมูล : " + Filtering_Key);
        }
        else
        {
            act_data = await FetchJobDataTargetedFilterAsync(Filtering_Key, Filtering_Value);

            if (act_data != null && act_data.Any())
            {
                selectedAct = new List<JobDataList>() { act_data.FirstOrDefault() };
            }

            StateHasChanged();
        }
    }




    private async Task OnSearch_Touch_point(string value)
    {
        var column = grid.ColumnsCollection.Where(c => c.Property == "act_status").FirstOrDefault();
        if (column != null)
        {
            column.SetFilterOperator(FilterOperator.IsEmpty);
        }

        var column1 = grid.ColumnsCollection.Where(c => c.Property == "touch_point").FirstOrDefault();
        if (column1 != null)
        {
            column1.SetFilterValue(value);
            column1.SetFilterOperator(FilterOperator.StartsWith);
        }

        grid.Reload();
    }

    private async Task OnSearch_JobCompleted()
    {
        var column = grid.ColumnsCollection.Where(c => c.Property == "act_status").FirstOrDefault();
        if (column != null)
        {
            column.SetFilterOperator(FilterOperator.IsNotEmpty);
        }
        var column1 = grid.ColumnsCollection.Where(c => c.Property == "touch_point").FirstOrDefault();
        if (column1 != null)
        {
            column1.SetFilterOperator(FilterOperator.IsNotEmpty);
        }
        grid.Reload();
    }


    private async Task OnClear()
    {

        CreateDateFrom = DateTime.Now.Date;
        CreateDateTo = DateTime.Now.Date;

        act_data = await FetchJobDataAsync(this.CreateDateFrom, this.CreateDateTo);

        if (act_data != null && act_data.Any())
        {
            selectedAct = new List<JobDataList>() { act_data.FirstOrDefault() };
        }

        var column0 = grid.ColumnsCollection.Where(c => c.Property == "act_status").FirstOrDefault();
        if (column0 != null)
        {
            column0.SetFilterOperator(FilterOperator.IsEmpty);
        }

        var column1 = grid.ColumnsCollection.Where(c => c.Property == "touch_point").FirstOrDefault();
        if (column1 != null)
        {
            column1.SetFilterOperator(FilterOperator.IsNotEmpty);
        }

        grid.Reload();
        // บังคับให้ UI อัปเดตใหม่
        StateHasChanged();
    }

    private async Task OnClear2()
    {

        Filtering_Key = "ค้นจากเบอร์ลูกค้า";
        Filtering_Value = "";
        ISKeyDroupDown = false;
        StateHasChanged();
    }



    async Task OpenSideDialog(string orderId)
    {

        if (isDialogOpen)
        {
            DialogService.Close();
            // await Task.Delay(200);
        }
        StateHasChanged();
        await DialogService.OpenSideAsync<DialogCardPage>(
            "งานกิจกรรมการโทร",
            new Dictionary<string, object>() { { "OrderID", orderId } },
            new SideDialogOptions
                {
                    CloseDialogOnOverlayClick = true,
                    Position = DialogPosition.Right,
                    ShowMask = false,
                    Width = "50%"
                });

        isDialogOpen = true;

    }



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        dataFiltering = Filterings;

        dataFiltering_main = Filterings_main;

        CreateDateFrom = DateTime.Now.Date;
        CreateDateTo = DateTime.Now.Date;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            username = user.Identity.Name;
            roles = user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value);
            _BranchCode = user.Claims.Where(c => c.Type == ClaimTypes.Locality).Select(c => c.Value);
            BranchCode = _BranchCode.FirstOrDefault();

        }
        else
        {
            username = "Not authenticated";
            roles = Enumerable.Empty<string>();
            BranchCode = "";
        }

        // เรียกใช้เมธอด FetchCustomerDataAsync เพื่อดึงข้อมูล
        act_data = await FetchJobDataAsync(this.CreateDateFrom, this.CreateDateTo);

        if (act_data != null && act_data.Any())
        {
            selectedAct = new List<JobDataList>() { act_data.FirstOrDefault() };

        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var column = grid.ColumnsCollection.Where(c => c.Property == "act_status").FirstOrDefault();
            if (column != null)
            {
                //  column.SetFilterValue("is empty");
                column.SetFilterOperator(FilterOperator.IsEmpty);
                grid.Reload();
            }
        }

        return base.OnAfterRenderAsync(firstRender);
    }



    public async Task<IEnumerable<JobDataList>> FetchJobDataAsync(DateTime? fdate, DateTime? ldate)
    {
        try
        {

            // เปิด DialogService เพื่อแจ้งว่ากำลังโหลด
            runProcess_wait = true;
            StateHasChanged(); // บังคับ UI อัปเดต

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                fdate = fdate,
                ldate = ldate,
                branch_code = BranchCode,
                assign_work = username
            };

            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/Job/GetJobData", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                count_UpSale = 0;
                count_ReSale = 0;
                count_x = 0;
                count_completed = 0;
                count_CrossSale = 0;

                var jobDataList = await response.Content.ReadFromJsonAsync<IEnumerable<JobDataList>>();
                if (jobDataList.Count() > 0)
                {
                    foreach (var i in jobDataList)
                    {
                        if (i.touch_point == "Up-Sale" && string.IsNullOrEmpty(i.act_status) )
                        {
                            count_UpSale++;
                        }
                        else if (i.touch_point == "Re-Sale" && string.IsNullOrEmpty(i.act_status))
                        {
                            count_ReSale++;
                        }
                        else if (i.touch_point == "ลูกค้าขุด" && string.IsNullOrEmpty(i.act_status))
                        {
                            count_x++;
                        }
                        else if (i.touch_point == "Cross-Sale" && string.IsNullOrEmpty(i.act_status))
                        {
                            count_CrossSale++;
                        }

                        if (!string.IsNullOrEmpty( i.act_status))
                        {
                            count_completed++;
                        }

                    }
                }

                

                return jobDataList;
            }
            else
            {
                Console.WriteLine("Error fetching Job Data.");
                return Enumerable.Empty<JobDataList>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }

    public async Task<IEnumerable<JobDataList>> FetchJobDataTargetedFilterAsync(string key, string value)
    {
        try
        {

            // เปิด DialogService เพื่อแจ้งว่ากำลังโหลด
            runProcess_wait = true;
            StateHasChanged(); // บังคับ UI อัปเดต

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                key1 = key,
                value1 = value,
                branch_code = BranchCode,
                assign_work = username
            };

            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/Job/GetJobDataTargetedByKey", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                count_UpSale = 0;
                count_ReSale = 0;
                count_x = 0;
                count_completed = 0;
                count_CrossSale = 0;

                var jobDataList = await response.Content.ReadFromJsonAsync<IEnumerable<JobDataList>>();
                if (jobDataList.Count() > 0)
                {
                    foreach (var i in jobDataList)
                    {
                        if (i.touch_point == "Up-Sale" && string.IsNullOrEmpty(i.act_status))
                        {
                            count_UpSale++;
                        }
                        else if (i.touch_point == "Re-Sale" && string.IsNullOrEmpty(i.act_status))
                        {
                            count_ReSale++;
                        }
                        else if (i.touch_point == "ลูกค้าขุด" && string.IsNullOrEmpty(i.act_status))
                        {
                            count_x++;
                        }
                        else if (i.touch_point == "Cross-Sale" && string.IsNullOrEmpty(i.act_status))
                        {
                            count_CrossSale++;
                        }

                        if (!string.IsNullOrEmpty(i.act_status))
                        {
                            count_completed++;
                        }

                    }
                }



                return jobDataList;
            }
            else
            {
                Console.WriteLine("Error fetching Job Data.");
                return Enumerable.Empty<JobDataList>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }

}