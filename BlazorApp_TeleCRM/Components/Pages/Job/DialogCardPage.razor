@page "/dialogcard/{OrderID}"
@using System.ComponentModel.DataAnnotations
@using BlazorApp_TeleCRM.Data
@using BlazorApp_TeleCRM.Helper
@using BlazorApp_TeleCRM.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using MySql.Data.MySqlClient
@using static BlazorApp_TeleCRM.Components.Pages.Job.Job
@inject IConfiguration Configuration
@inject MySqlConnection MySqlConnection
@inject Radzen.DialogService dialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService
@inject HttpClient Http
@inject UtilityConvet utility ;



<RadzenStack Gap="1rem" Orientation="Orientation.Horizontal">
    <RadzenCard Variant="Variant.Outlined">
        <RadzenTabs @bind-SelectedIndex=@selectedIndex Change=@OnChange>
            <Tabs>
                <RadzenTabsItem Text="บันทึกการโทร" Icon="star" IconColor="@Colors.Success">
                    <RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;width:100%">
                        <RadzenRow>
                            <RadzenColumn Size="6" SizeMD="6" class="rz-p-4 rz-border-radius-1" Style="border: var(--rz-grid-cell-border)">
                                <RadzenTemplateForm TItem="Model" Data=@model Submit="@OnSubmit" InvalidSubmit="@OnInvalidSubmit">

                                    <RadzenStack class="rz-12">

                                        <RadzenRow AlignItems="AlignItems.Start" class="rz-12">
                                            <RadzenColumn SizeSM="4">
                                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">สถานะการโทร <span class="rz-messages-error">*</span> </RadzenText>
                                            </RadzenColumn>
                                            <RadzenColumn Size="12" SizeMD="8">
                                                <RadzenDropDown @bind-Value=@model.call_status style="display:block;width:100%"
                                                                Data=@StatusTelData Name="call_status" class="w-100"
                                                                Change="@(args => OnCallStatusChange(model.call_status))" />
                                                <RadzenRequiredValidator Component="call_status" Text="เลือก สถานะการโทร" Style="position: absolute" />
                                            </RadzenColumn>
                                        </RadzenRow>

                                        <RadzenRow AlignItems="AlignItems.Start" class="rz-12">
                                            <RadzenColumn SizeMD="4">
                                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">สถานะการสนทนา <span class="rz-messages-error">*</span> </RadzenText>
                                            </RadzenColumn>
                                            <RadzenColumn Size="12" SizeMD="8">
                                                <RadzenDropDown @bind-Value=@model.call_action style="display:block;width:100%"
                                                                Data=@StatusConversationData Name="call_action" class="w-100"
                                                                Change="@(args => OnCallActionChange(model.call_action))" />
                                                <RadzenRequiredValidator Component="call_action" Text="เลือก สถานะการสนทนา" Style="position: absolute" />
                                            </RadzenColumn>
                                        </RadzenRow>


                                        <RadzenRow AlignItems="AlignItems.Start" class="rz-12">
                                            <RadzenColumn Size="12" SizeMD="4">
                                                <RadzenLabel Text="คำสั่งซื้อใหม่" TextStyle="TextStyle.Subtitle2" Component="sale_order_no" />
                                            </RadzenColumn>
                                            <RadzenColumn Size="12" SizeMD="8">
                                                <RadzenTextBox Placeholder="กรอกเลขที่เปิดคำสั่งซื้อใหม่" Disabled="btnDisable_sale_order_no" Name="sale_order_no" @bind-Value="@model.sale_order_no" class="w-100" />
                                            </RadzenColumn>
                                        </RadzenRow>

                                        <RadzenRow AlignItems="AlignItems.Start" class="rz-12">
                                            <RadzenColumn Size="12" SizeMD="4">
                                                <RadzenLabel Text="หมายเหตุ" TextStyle="TextStyle.Subtitle2" Component="remark" />
                                            </RadzenColumn>
                                            <RadzenColumn Size="12" SizeMD="8">
                                                <RadzenTextArea Placeholder="" Name="remark" @bind-Value="@model.remark" class="w-100" />
                                            </RadzenColumn>
                                        </RadzenRow>

                                        <RadzenRow AlignItems="AlignItems.Start" class="rz-12">
                                            <RadzenColumn Size="12" SizeMD="4">
                                                <RadzenLabel Text="คะแนนส่วนร่วม" Component="Participation" />
                                            </RadzenColumn>
                                            <RadzenColumn Size="12" SizeMD="8">
                                                <RadzenRating @bind-Value=@model.statusparticipation /> <span>( @model.statusparticipation )</span>
                                            </RadzenColumn>
                                        </RadzenRow>

                                        <RadzenRow AlignItems="AlignItems.Start" class="rz-12">
                                            <RadzenColumn Size="12" SizeMD="4">
                                              @*   <RadzenLabel Text="นัดโทรครั้งถัดไป" TextStyle="TextStyle.Subtitle2" Style="color:mediumseagreen" Component="appointment_date" /> *@
                                                <RadzenText TextStyle="TextStyle.Subtitle2" Component="appointment_date" Style="color:mediumseagreen" TagName="TagName.H3">นัดโทรครั้งถัดไป <span class="rz-messages-error">*</span> </RadzenText>
                                            </RadzenColumn>
                                            <RadzenColumn Size="12" SizeMD="8">
                                                <RadzenDatePicker  @bind-Value=@model.appointment_date ShowTime="true" ShowSeconds="true"
                                                                  HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="dd/MM/yyyy HH:mm"
                                                                  Name="appointment_date" class="w-100" style="display:block;width:100%" />
                                                    <RadzenRequiredValidator Component="appointment_date" Text="เลือกวันที่นัดโทรครั้งถัดไป" Style="position: absolute" />
                                            </RadzenColumn>
                                        </RadzenRow>



                                        <!-- Submit Button -->
                                        @if (model.status == "")
                                        {
                                            <RadzenRow AlignItems="AlignItems.Start">
                                                <RadzenColumn Size="12">
                                                    <RadzenButton Disabled="@btnDisable" ButtonType="ButtonType.Submit" Text="บันทึก" Style="margin-top: 5px;" />
                                                </RadzenColumn>
                                            </RadzenRow>
                                        }




                                    </RadzenStack>

                                </RadzenTemplateForm>
                            </RadzenColumn>
                            <RadzenColumn Size="6" SizeMD="6" class="rz-p-4 rz-border-radius-1" Style="border: var(--rz-grid-cell-border)">
                                <RadzenRow Gap="0">
                                    <RadzenColumn>
                                        <RadzenText TextStyle="TextStyle.Subtitle1">ข้อมูลลูกค้า</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn>
                                        <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-color-primary">ความคืบหน้า</RadzenText>
                                        @if (model.status == "สำเร็จ")
                                        {
                                            <RadzenButton Text="สำเร็จ" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" class="rz-ripple" />
                                        }
                                        else if (model.status == "")
                                        {
                                            <RadzenButton Text="รอดำเนินการ" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Warning" Variant="Variant.Flat" class="rz-ripple" />
                                        }
                                        else if (model.status == "ปิดการขาย")
                                        {
                                            <RadzenButton Text="ปิดการขาย" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" class="rz-ripple" />
                                        }
                                        else if (model.status == "ไม่สำเร็จ")
                                        {
                                            <RadzenButton Text="ไม่สำเร็จ" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" class="rz-ripple" />
                                        }
                                        else
                                        {
                                            <RadzenButton Text="@model.status" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Dark" Variant="Variant.Flat" class="rz-ripple" />
                                        }
                                    </RadzenColumn>
                                </RadzenRow>
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                    <RadzenStack Gap="0">
                                        <RadzenText TextStyle="TextStyle.Overline" Style="color: var(--rz-text-tertiary-color);">เบอร์ติดต่อลูกค้า</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b><a href="tel:@utility.FormatPhoneNumberWithCountryCode(model.customer_phone)"><RadzenIcon Icon="smartphone" /> @utility.FormatPhoneNumber(model.customer_phone) </a></b></RadzenText>


                                        <RadzenText TextStyle="TextStyle.Overline" Style="color: var(--rz-text-tertiary-color);">ชื่อลูกค้า</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1" class="rz-text-truncate"><b>@model.customer_name</b></RadzenText>
                                        <RadzenText TextStyle="TextStyle.Overline" Style="color: var(--rz-text-tertiary-color);">ที่อยู่</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Caption"><b>@model.customer_address1 @model.customer_sub_district @model.customer_district @model.customer_province @model.customer_zipcode</b></RadzenText>
                                    </RadzenStack>
                                </RadzenStack>

                             @*    <hr>

                                <RadzenColumn Size="6" SizeMD="6" class="rz-p-4 rz-border-radius-1" Style="border: var(--rz-grid-cell-border)">
                                    <RadzenText TextStyle="TextStyle.Subtitle1">ผู้ติดต่อ</RadzenText>
                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                        <RadzenImage Path="/user/staff1.jpg" Style="width: 5rem;" AlternateText="@order.Contact_By" />
                                        <RadzenStack Gap="0" class="rz-text-truncate">
                                            <RadzenText TextStyle="TextStyle.Overline" class="rz-mt-2 rz-my-0" Style="color: var(--rz-text-tertiary-color);">พนักงาน</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Body1" class="rz-text-truncate"><b> @model.contact_by </b></RadzenText>
                                            <RadzenText TextStyle="TextStyle.Overline" class="rz-mt-4 rz-mb-0" Style="color: var(--rz-text-tertiary-color);">วันที่ติดต่อ</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Body1" class="rz-text-truncate">
                                                <b>
                                                    @if (model.contact_date != null)
                                                    {
                                                        @model.contact_date.Value.ToString("dd/MM/yyyy HH:mm:ss")
                                                    }

                                                </b>
                                            </RadzenText>

                                            <RadzenText TextStyle="TextStyle.Overline" class="rz-mt-4 rz-mb-0" Style="color: var(--rz-text-tertiary-color);">เบอร์ที่ใช้โทร</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Body1" class="rz-text-truncate"><b>@model.contact_use_phone </b></RadzenText>
                                        </RadzenStack>
                                    </RadzenStack>
                                </RadzenColumn> *@



                            </RadzenColumn>


                        </RadzenRow>
                    </RadzenStack>

                    <RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;margin-top:10px">
                        <RadzenStack>
                            <RadzenText TextStyle="TextStyle.H5" Style="margin-top:10px">
                                <b>
                                    ข้อมูลกิจกรรม TouchPoint :
                                    @model.activities_touch_point

                                </b>
                            </RadzenText>
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="12" class="rz-p-4 rz-border-radius-1" Style="border: var(--rz-grid-cell-border)">
                                    <RadzenRow Gap="0">
                                        <RadzenColumn>
                                            <RadzenText TextStyle="TextStyle.Caption"><b>รหัสกิจกรรม</b></RadzenText>
                                            <br />
                                            <RadzenText TextStyle="TextStyle.Caption">@model.activities_id </RadzenText>
                                        </RadzenColumn>
                                        <RadzenColumn>
                                            <RadzenText TextStyle="TextStyle.Caption"><b>ชื่อกิจกรรม</b> </RadzenText>
                                            <br />
                                            <RadzenText TextStyle="TextStyle.Caption">@model.activities_name </RadzenText>
                                        </RadzenColumn>
                                        <RadzenColumn>
                                            <RadzenText TextStyle="TextStyle.Caption"><b>วันที่กิจกรรม</b></RadzenText>
                                            <br />
                                            <RadzenText TextStyle="TextStyle.Caption">
                                                @if (model.activities_startdate != null)
                                                {
                                                    @model.activities_startdate.Value.ToString("dd/MM/yyyy HH:mm:ss")
                                                }
                                                -
                                                @if (model.activities_duedate != null)
                                                {
                                                    @model.activities_duedate.Value.ToString("dd/MM/yyyy HH:mm:ss")
                                                }
                                            </RadzenText>
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow Gap="0">
                                        <RadzenColumn>
                                            <RadzenText TextStyle="TextStyle.Caption"><b>ผู้มอบจ่ายงาน</b></RadzenText>
                                            <br />
                                            <RadzenText TextStyle="TextStyle.Caption">@model.activities_created_by</RadzenText>
                                        </RadzenColumn>
                                        <RadzenColumn>
                                            <RadzenText TextStyle="TextStyle.Caption"><b>รายละเอียด</b></RadzenText>
                                            <br />
                                            <RadzenText TextStyle="TextStyle.Caption">@model.activities_description</RadzenText>
                                        </RadzenColumn>
                                    </RadzenRow>

                                    <RadzenRow Gap="0">
                                        <RadzenColumn>
                                            @if (model.re_activity == true)
                                            {
                                                <RadzenText TextStyle="TextStyle.Caption">
                                                    <b>งานเลื่อนนัด</b>
                                                </RadzenText>
                                            }
                                            else
                                            {
                                                <RadzenText TextStyle="TextStyle.Caption">
                                                    <b>งานโอน</b>
                                                </RadzenText>
                                            }

                                            <br />
                                            <RadzenText TextStyle="TextStyle.Caption">@model.old_activity_guid </RadzenText>
                                        </RadzenColumn>
                                        <RadzenColumn>
                                            <RadzenText TextStyle="TextStyle.Caption"><b>ฝากงานให้นายหน้า</b></RadzenText>
                                            <br />
                                            <RadzenText TextStyle="TextStyle.Caption">-</RadzenText>
                                        </RadzenColumn>
                                    </RadzenRow>



                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Style="margin-top:10px">

                                        <RadzenStack Gap="0">
                                            <img width="150px" style="margin-top:20px" src="/products/product001.png" alt="product001.png" />
                                        </RadzenStack>
                                        <RadzenStack Gap="0">
                                            <RadzenText TextStyle="TextStyle.Caption"><b>รหัสสินค้า</b></RadzenText>
                                            <RadzenText TextStyle="TextStyle.Caption">xxxxx</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Caption"><b>ชื่อสินค้า</b></RadzenText>
                                            <RadzenText TextStyle="TextStyle.Caption">xxxxx</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Caption"><b>ราคาสินค้า</b></RadzenText>
                                            <RadzenText TextStyle="TextStyle.Caption">100 บาท</RadzenText>
                                        </RadzenStack>
                                    </RadzenStack>


                                </RadzenColumn>

                            </RadzenRow>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenTabsItem>
                <RadzenTabsItem Text="ประวัติการติดต่อ">
                    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="1rem" class="rz-12" Style="width%90">
                        <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true"
                                        FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@selecteContact
                                        Data="@contacts" SelectionMode="DataGridSelectionMode.Single" Density="Density.Compact"
                                        PagerPosition="PagerPosition.Bottom"
                                        AllowAlternatingRows="false">
                            <Columns>
                                <RadzenDataGridColumn TItem="CrmContactLog" Property="@nameof(CrmContactLog.created_by)" Width="120px" Title="ผู้ติดต่อ" />
                                <RadzenDataGridColumn TItem="CrmContactLog" Property="@nameof(CrmContactLog.created_at)" Width="150px" Title="วันที่ติดต่อลูกค้า" />
                                <RadzenDataGridColumn TItem="CrmContactLog" Property="@nameof(CrmContactLog.contact_result)" Width="120px" Title="ความคืบหน้า" />
                                <RadzenDataGridColumn TItem="CrmContactLog" Property="@nameof(CrmContactLog.contact_result2)" Width="120px" Title="ผลตอบรับครั้งก่อน" />
                                <RadzenDataGridColumn TItem="CrmContactLog" Property="@nameof(CrmContactLog.contact_remark)" Width="150px" Title="หมายเหตุ" />
                                <RadzenDataGridColumn TItem="CrmContactLog" Property="@nameof(CrmContactLog.statusparticipation)" Width="150px" Title="คะแนนการมีส่วนร่วม" />
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenStack>
                </RadzenTabsItem>

                <RadzenTabsItem Text="Note">

                    <RadzenTemplateForm TItem="Model2" Data=@model2 Submit="@OnSubmit2" InvalidSubmit="@OnInvalidSubmit2">
                        <RadzenStack class="rz-12">


                            <RadzenRow AlignItems="AlignItems.Start" class="rz-12">
                                <RadzenColumn Size="6" SizeMD="6">
                                    <RadzenLabel Text="Note" TextStyle="TextStyle.Subtitle2" Component="remark" />
                                    <RadzenTextArea Placeholder="" Name="remark" @bind-Value="@model2.note" class="w-100" />
                                    <RadzenRequiredValidator Component="remark" Text="กรอกข้อความ"  />
                                </RadzenColumn>
                             
                            </RadzenRow>

                            <RadzenRow AlignItems="AlignItems.Start">
                                <RadzenColumn Size="12">
                                    <RadzenButton  ButtonType="ButtonType.Submit" Text="บันทึก" Style="margin-top: 5px;" />
                                </RadzenColumn>
                            </RadzenRow>

                        </RadzenStack>
                    </RadzenTemplateForm>
                    <hr />

                    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="1rem" class="rz-12" Style="width%90">



                        <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true"
                                        FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@selectenote
                                        Data="@notes" SelectionMode="DataGridSelectionMode.Single" Density="Density.Compact"
                                        PagerPosition="PagerPosition.Bottom"
                                        AllowAlternatingRows="false">
                            <Columns>
                                <RadzenDataGridColumn TItem="CrmNote" Property="@nameof(CrmNote.created_by)" Width="120px" Title="ผู้ลงบันทึก" />
                                <RadzenDataGridColumn TItem="CrmNote" Property="@nameof(CrmNote.created_at)" Width="150px" Title="วันที่ลงบันทึก" />
                                <RadzenDataGridColumn TItem="CrmNote" Property="@nameof(CrmNote.note)" Width="400px" Title="Note" />
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenStack>
                </RadzenTabsItem>

                <RadzenTabsItem Text="ประวัติการซื้อ">
                    <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true"
                                    FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    @bind-Value=@selecteCrmOrders
                                    Data="@crmOrders" SelectionMode="DataGridSelectionMode.Single" Density="Density.Compact"
                                    PagerPosition="PagerPosition.Bottom"
                                    AllowAlternatingRows="false">
                        <Columns>
                            <RadzenDataGridColumn TItem="CrmOrder" Property="@nameof(CrmOrder.order_no)" Width="180px" Title="เลขที่คำสั่งซื้อ" />
                            <RadzenDataGridColumn TItem="CrmOrder" Property="@nameof(CrmOrder.order_date)" Width="200px" Title="วันที่คำสั่งซื้อ" FormatString="{0:dd/MM/yyyy HH:mm:ss}" />
                            <RadzenDataGridColumn TItem="CrmOrder" Property="@nameof(CrmOrder.product_codes)" Title="รายการสั่งซื้อ" Width="300px">
                                <Template Context="data">
                                    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" AlignItems="AlignItems.Center">
                                        <RadzenStack Gap="0">
                                            <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-0">@data.product_names</RadzenText>
                                        </RadzenStack>
                                    </RadzenStack>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="CrmOrder" Property="@nameof(CrmOrder.amount)" Width="150px" Title="จำนวนเงิน" />
                            <RadzenDataGridColumn TItem="CrmOrder" Property="@nameof(CrmOrder.payment_type)" Width="150px" Title="การชำระเงิน" />
                        </Columns>
                    </RadzenDataGrid>

                    <RadzenCard Variant="Variant.Outlined">
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="1rem" Wrap="FlexWrap.Wrap">
                            @if (selecteCrmOrders?.Any() == true)
                            {
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>รหัสสินค้า</th>
                                            <th>ชื่อสินค้า</th>
                                            <th>จำนวน</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var product in selecteCrmOrders)
                                        {
                                            var productCodes = product.product_codes?.Split('|') ?? Array.Empty<string>();
                                            var productNames = product.product_names?.Split('|') ?? Array.Empty<string>();
                                            var productQtys = product.product_qtys?.Split('|') ?? Array.Empty<string>();

                                            for (int i = 0; i < productCodes.Length; i++)
                                            {
                                                <tr>
                                                    <td>@(productCodes.Length > i ? productCodes[i] : "-")</td>
                                                    <td>@(productNames.Length > i ? productNames[i] : "-")</td>
                                                    <td>@(productQtys.Length > i ? productQtys[i] : "-")</td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <div>ไม่มีข้อมูล</div>
                            }
                        </RadzenStack>
                    </RadzenCard>


                </RadzenTabsItem>


            </Tabs>
        </RadzenTabs>
    </RadzenCard>
</RadzenStack>
@* <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1.5rem">
    <RadzenButton Click="@((args) => dialogService.Close(true))" Variant="Variant.Outlined" Text="ปิด" Style="width: 120px;margin-bottom:20px" />
</RadzenStack>
 *@

@code {
    [Parameter] public string OrderID { get; set; }
    // Order order;

    DateTime? appointmentDate;


    bool runProcess_wait = false;
    bool btnDisable = false;
    bool btnDisable_appointmentDate = true;
    bool btnDisable_sale_order_no = true;

    bool isError = false;
    string TextError = "";
    bool runProcess = false;
    string TextProcess = "";
    string new_activity_ref_guid = "";


    private string? username;
    private string? BranchCode { get; set; }
    private IEnumerable<string>? _BranchCode;

    int selectedIndex = 0;
    private string? qrCodeImage = "";

    private IEnumerable<JobDataList>? act_data;
    JobDataList selectedAct;

    private IEnumerable<CrmContactLog> contacts;
    IList<CrmContactLog> selecteContact;

    private IEnumerable<CrmNote> notes;
    IList<CrmNote> selectenote;

    private IEnumerable<CrmOrder> crmOrders;
    IList<CrmOrder> selecteCrmOrders;


    //from data
    class Model
    {
        public string? activities_id { get; set; }
        public string? activities_name { get; set; }
        public string? activities_touch_point { get; set; }
        public string? activities_description { get; set; }
        public string? activities_created_by { get; set; }

        public DateTime? activities_startdate { get; set; }
        public DateTime? activities_duedate { get; set; }
        public DateTime? activities_reminder_duedate { get; set; }
        public string? activities_assign_work { get; set; }
        public bool? allowagent { get; set; } = false;

        public string? status { get; set; }
        public string? call_status { get; set; }
        public string? call_action { get; set; }
        public string? sale_order_no { get; set; }
        public string? code { get; set; }
        public int statusparticipation { get; set; }
        public string? remark { get; set; }


        public string? customer_name { get; set; }
        public string? customer_phone { get; set; }
        public string? customer_province { get; set; }
        public string? customer_address1 { get; set; }
        public string? customer_sub_district { get; set; }
        public string? customer_district { get; set; }
        public string? customer_zipcode { get; set; }


        public string? contact_by { get; set; }
        public DateTime? contact_date { get; set; }
        public string? contact_use_phone { get; set; }
        public string? new_activity_ref_guid { get; set; }
        public DateTime? appointment_date { get; set; }
        public string? old_activity_guid { get; set; }
        public bool? re_activity { get; set; }

    }

    class Model2
    {
        public string? note { get; set; }
    }


    Model model = new Model();
    Model2 model2 = new Model2();



    IEnumerable<string>? StatusTelData;
    IEnumerable<string>? StatusConversationData;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();


        //    "เลื่อนการโทร"

        StatusTelData = new List<string>
{
    "รับสาย",
    "ไม่รับสาย"
};

        StatusConversationData = new List<string>
{
    "คุยจบ",
    "ไม่สะดวก",
    "ติดตาม",
    "ขายได้",
    "ไม่รับสาย",
    "โทรไม่ติด"
};

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            username = user.Identity.Name;
            _BranchCode = user.Claims.Where(c => c.Type == ClaimTypes.Locality).Select(c => c.Value);
            BranchCode = _BranchCode.FirstOrDefault();
        }
        else
        {
            username = "";
            BranchCode = "";
        }


    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        act_data = await FetchCustomerDataAsync(this.OrderID);
        if (act_data != null && act_data.Any())
        {
            selectedAct = act_data.FirstOrDefault();

            if (selectedAct != null)
            {
                model.activities_id = selectedAct.guid;
                model.activities_touch_point = selectedAct.touch_point;
                model.activities_name = selectedAct.act_name;
                model.activities_created_by = selectedAct.created_by;
                model.activities_description = selectedAct.description;
                model.activities_startdate = selectedAct.startdate;
                model.activities_duedate = selectedAct.duedate;
                model.activities_reminder_duedate = selectedAct.reminder_duedate;
                model.activities_assign_work = selectedAct.assign_work;
                model.allowagent = selectedAct.allowagent;
                model.status = selectedAct.act_status;
                model.call_action = selectedAct.call_action;
                model.call_status = selectedAct.call_status;
                model.sale_order_no = selectedAct.sale_order_no;
                model.remark = selectedAct.remark;
                model.statusparticipation = selectedAct.statusparticipation.Value;

                model.customer_name = selectedAct.customer_name;
                model.customer_phone = selectedAct.customer_phone;
                model.customer_province = selectedAct.customer_province;
                model.customer_address1 = selectedAct.customer_address1;
                model.customer_sub_district = selectedAct.customer_sub_district;
                model.customer_district = selectedAct.customer_district;
                model.customer_zipcode = selectedAct.customer_zipcode;

                model.contact_by = selectedAct.contact_by;
                model.contact_date = selectedAct.contact_date;
                model.contact_use_phone = selectedAct.contact_use_phone;
                model.new_activity_ref_guid = selectedAct.new_activity_ref_guid;
                model.appointment_date = selectedAct.appointment_date;
                model.old_activity_guid = selectedAct.old_activity_guid;
                model.re_activity = selectedAct.re_activity;

                string phoneNumber = "tel:" + @utility.FormatPhoneNumberWithCountryCode(selectedAct.customer_phone);

                // สร้าง QR Code
                using (var qrGenerator = new QRCoder.QRCodeGenerator())
                {
                    var qrCodeData = qrGenerator.CreateQrCode(phoneNumber, QRCoder.QRCodeGenerator.ECCLevel.Q);
                    var qrCode = new QRCoder.PngByteQRCode(qrCodeData);
                    var qrCodeBytes = qrCode.GetGraphic(20);

                    // แปลงเป็น base64 เพื่อแสดงเป็นรูปภาพใน img tag
                    qrCodeImage = Convert.ToBase64String(qrCodeBytes);
                }

            }
            contacts = await FetchCrmContactLogDataAsync(selectedAct.customer_code);
            selecteContact = new List<CrmContactLog>() { contacts.FirstOrDefault() };

            notes = await FetchCrmNotesDataAsync(selectedAct.customer_code);
            selectenote = new List<CrmNote>() { notes.FirstOrDefault() };

            crmOrders = await FetchOrderDataAsync(selectedAct.customer_phone);
            selecteCrmOrders = new List<CrmOrder>() { crmOrders.FirstOrDefault() };
        }

    }

    private void OnCallStatusChange(string value)
    {

        StatusConversationData = new List<string>
            {
                 "คุยจบ",
                 "ไม่สะดวก",
                 "ติดตาม",
                 "ขายได้",
                 "ไม่รับสาย",
                 "โทรไม่ติด"
             };

        if (value == "รับสาย")
        {
            StatusConversationData = new List<string>
            {
                 "คุยจบ",
                 "ไม่สะดวก",
                 "ติดตาม",
                 "ขายได้"
             };

          //  model.appointment_date = null;
           // btnDisable_appointmentDate = true;
        }
        if (value == "ไม่รับสาย")
        {

            StatusConversationData = new List<string>
            {
                 "ไม่รับสาย",
                 "โทรไม่ติด"
             };


          //  StatusConversationData = StatusConversationData.Where(item => item == "โทรไม่ติด");
          //  model.call_action = "โทรไม่ติด";
          //  model.appointment_date = null;
          //  btnDisable_appointmentDate = true;

        }
        else if (value == "เลื่อนการโทร")
        {
            StatusConversationData = new List<string>
            {
                 "ไม่สะดวก",
                 "ติดตาม",
                 "โทรไม่ติด"
             };

            model.call_action = "ติดตาม";
            btnDisable_appointmentDate = false;
        }


    }

    private void OnCallActionChange(string value)
    {
        if (model.call_status == "รับสาย" && value == "ขายได้")
        {
            btnDisable_sale_order_no = false;
            btnDisable_appointmentDate = true;
            model.appointment_date = null;
        }
        else
        {
            btnDisable_sale_order_no = true;
            model.sale_order_no = "";
        }
    }



    public async Task<IEnumerable<JobDataList>> FetchCustomerDataAsync(string Guid)
    {
        try
        {

            // เปิด DialogService เพื่อแจ้งว่ากำลังโหลด
            runProcess_wait = true;
            StateHasChanged(); // บังคับ UI อัปเดต

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                guid = Guid
            };

            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/Job/GetJobDataByID", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                var activitysDataList = await response.Content.ReadFromJsonAsync<IEnumerable<JobDataList>>();
                return activitysDataList;
            }
            else
            {
                Console.WriteLine("Error fetching Job Data.");
                return Enumerable.Empty<JobDataList>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }

    public async Task<IEnumerable<CrmContactLog>> FetchCrmContactLogDataAsync(string Guid)
    {
        try
        {

            // เปิด DialogService เพื่อแจ้งว่ากำลังโหลด
            runProcess_wait = true;
            StateHasChanged(); // บังคับ UI อัปเดต

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                guid = Guid
            };

            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/Job/GetCrmContactLogDataByID", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                var contacts = await response.Content.ReadFromJsonAsync<IEnumerable<CrmContactLog>>();
                return contacts;
            }
            else
            {
                Console.WriteLine("Error fetching ContactLogData Data.");
                return Enumerable.Empty<CrmContactLog>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }

    public async Task<IEnumerable<CrmNote>> FetchCrmNotesDataAsync(string Guid)
    {
        try
        {

            // เปิด DialogService เพื่อแจ้งว่ากำลังโหลด
            runProcess_wait = true;
            StateHasChanged(); // บังคับ UI อัปเดต

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                guid = Guid
            };

            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/Job/GetCrmNoteDataByID", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                var notes = await response.Content.ReadFromJsonAsync<IEnumerable<CrmNote>>();
                return notes;
            }
            else
            {
                Console.WriteLine("Error fetching NoteLogData Data.");
                return Enumerable.Empty<CrmNote>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }




    private void OnInvalidSubmit()
    {

    }

    private void OnInvalidSubmit2()
    {

    }


    void OnChange(int index)
    {

    }


    private async Task OnSubmit()
    {
        btnDisable = true;
        await ConfirmSubmit();
    }

    private async Task OnSubmit2()
    {
        await UpdateNote();
        notes = await FetchCrmNotesDataAsync(selectedAct.customer_code);
        selectenote = new List<CrmNote>() { notes.FirstOrDefault() };
    }



    private async Task ConfirmSubmit()
    {
        var confirmed = await dialogService.Confirm("คุณต้องการบันทึกข้อมูลนี้หรือไม่?", "ยืนยัน",
            new ConfirmOptions() { Left = "10%", OkButtonText = "Yes", CancelButtonText = "No", Draggable = true });

        if (confirmed.HasValue && confirmed.Value)
        {
            await UpdateBatchToDatabaseWithTransaction();
        }
        else
        {

            btnDisable = false;
        }

    }


    private async Task UpdateBatchToDatabaseWithTransaction()
    {
        btnDisable = true;
        runProcess = true;
        runProcess_wait = true;
        TextProcess = "กรุณารอ ระบบกำลังทำการอัปเดตข้อมูล..";

        DateTime today = DateTime.Now;

        await MySqlConnection.OpenAsync();
        using var transaction = await MySqlConnection.BeginTransactionAsync();

        try
        {
            var query = @"UPDATE crm_activitys
                          SET
                          modified_by = @modified_by,
                          modified_date = @modified_date,
                          status = @status,
                          call_status = @call_status,
                          sale_order_no = @sale_order_no,
                          remark= @remark,
                          statusparticipation = @statusparticipation,
                          code = @code,
                          call_action = @call_action,
                          contact_by = @contact_by,
                          contact_date = @contact_date,
                          contact_use_phone = @contact_use_phone ";

          //  if (model.call_status == "เลื่อนการโทร")
          //  {
                query += @" ,appointment_date = @appointment_date
                            ,new_activity_ref_guid = @new_activity_ref_guid
                            ,re_activity = @re_activity ";
          //  }


            query += @" WHERE guid = @guid and branch_code = @branch_code ";

            using var command = new MySqlCommand(query, MySqlConnection, transaction);

            command.Parameters.AddWithValue("@guid", model.activities_id); // ใช้ GUID ที่มีอยู่
            command.Parameters.AddWithValue("@branch_code", BranchCode ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@touch_point", model.activities_touch_point ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@name", model.activities_name ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@description", model.activities_description ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@startdate", model.activities_startdate ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@duedate", model.activities_duedate ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@reminder_duedate", model.activities_reminder_duedate ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@assign_work", model.activities_assign_work ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@assign_work_type", "Activities" ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@allowagent", model.allowagent ?? false);
            command.Parameters.AddWithValue("@record_status", true);
            command.Parameters.AddWithValue("@modified_by", username);
            command.Parameters.AddWithValue("@statusparticipation", model.statusparticipation);
            command.Parameters.AddWithValue("@modified_date", today);

            command.Parameters.AddWithValue("@contact_by", username);
            command.Parameters.AddWithValue("@contact_date", today);
            command.Parameters.AddWithValue("@contact_use_phone", "");


         //   if (model.call_status == "เลื่อนการโทร")
         //   {

                if (string.IsNullOrEmpty(model.new_activity_ref_guid))
                {
                    new_activity_ref_guid = Guid.NewGuid().ToString();
                    command.Parameters.AddWithValue("@new_activity_ref_guid", new_activity_ref_guid);
                    command.Parameters.AddWithValue("@re_activity", true);
                    command.Parameters.AddWithValue("@appointment_date", model.appointment_date ?? (object)DBNull.Value);
                }
                else
                {
                    command.Parameters.AddWithValue("@new_activity_ref_guid", model.new_activity_ref_guid);
                    command.Parameters.AddWithValue("@appointment_date", model.appointment_date ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@re_activity", true);
                }
          //  }

            if (!string.IsNullOrEmpty(model.sale_order_no))
            {
                model.status = "ปิดการขาย";
            }
            else
            {
                model.status = "สำเร็จ";
            }

            command.Parameters.AddWithValue("@status", model.status ?? (object)DBNull.Value);

            command.Parameters.AddWithValue("@call_status", model.call_status ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@sale_order_no", model.sale_order_no ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@remark", model.remark ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@code", model.code ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@call_action", model.call_action ?? (object)DBNull.Value);

            await command.ExecuteNonQueryAsync();

            // Commit transaction
            await transaction.CommitAsync();
        }
        catch (Exception ex)
        {
            // Rollback transaction in case of an error
            await transaction.RollbackAsync();
            TextProcess = $"Error: {ex.Message}";
            btnDisable = false;
            runProcess_wait = false;
        }
        finally
        {
            await MySqlConnection.CloseAsync();
          //  if (model.call_status == "เลื่อนการโทร")
          //  {
                await SaveBatchToDatabaseWithTransaction(new_activity_ref_guid, model.activities_id);
          //  }

            await InsertCrmContactLog();

            btnDisable = true;
            runProcess_wait = false;
            TextProcess = "อัปเดตข้อมูลในระบบเรียบร้อยแล้ว";
            NotificationService.Notify(NotificationSeverity.Success, "สำเร็จ", "อัปเดตข้อมูลสำเร็จ");
            StateHasChanged();

        }
    }

    private async Task UpdateNote()
    {


        DateTime today = DateTime.Now;

        await MySqlConnection.OpenAsync();
        using var transaction = await MySqlConnection.BeginTransactionAsync();

        try
        {
            var query = @"INSERT INTO crm_notes (guid, activity_id, customer_id, branch_code, created_by, created_at , note)
            VALUES (@guid, @activity_id ,@customer_code, @branch_code, @created_by, @created_date ,@note)";
            using var command = new MySqlCommand(query, MySqlConnection, transaction);


            command.Parameters.AddWithValue("@guid", Guid.NewGuid().ToString()); // ใช้ GUID ที่มีอยู่
            command.Parameters.AddWithValue("@activity_id", model.activities_id);
            command.Parameters.AddWithValue("@customer_code", selectedAct.customer_code);
            command.Parameters.AddWithValue("@branch_code", BranchCode ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@created_by", username);
            command.Parameters.AddWithValue("@created_date", today);
            command.Parameters.AddWithValue("@note", model2.note);

            await command.ExecuteNonQueryAsync();

            // Commit transaction
            await transaction.CommitAsync();
        }
        catch
        {
            // Rollback transaction in case of an error
            await transaction.RollbackAsync();
        }
        finally
        {
            await MySqlConnection.CloseAsync();

            NotificationService.Notify(NotificationSeverity.Success, "สำเร็จ", "อัปเดตข้อมูลสำเร็จ");
            StateHasChanged();
            model2.note = "";
        }
    }



    private async Task SaveBatchToDatabaseWithTransaction(string new_activity_ref_guid, string old_activity_guid)
    {

        DateTime today = new DateTime();
        today = DateTime.Now;


        await MySqlConnection.OpenAsync();
        using var transaction = await MySqlConnection.BeginTransactionAsync();

        try
        {
            var query = @"INSERT INTO crm_activitys (guid, customer_code, branch_code, touch_point, name, description, startdate, duedate, reminder_duedate, assign_work, assign_work_type, allowagent, record_status, created_by, created_date ,old_activity_guid ,re_activity)
            VALUES (@guid, @customer_code, @branch_code, @touch_point, @name, @description, @startdate, @duedate, @reminder_duedate, @assign_work, @assign_work_type, @allowagent, @record_status, @created_by, @created_date ,@old_activity_guid ,@re_activity)";
            using var command = new MySqlCommand(query, MySqlConnection, transaction);

            command.Parameters.AddWithValue("@guid", new_activity_ref_guid);
            command.Parameters.AddWithValue("@customer_code", selectedAct.customer_code);
            command.Parameters.AddWithValue("@branch_code", BranchCode ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@touch_point", model.activities_touch_point ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@name", model.activities_name ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@description", model.activities_description ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@startdate", model.appointment_date ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@duedate", model.appointment_date.Value.Date.AddHours(19));
            command.Parameters.AddWithValue("@reminder_duedate", model.appointment_date.Value.Date.AddHours(19));
            command.Parameters.AddWithValue("@assign_work", model.activities_assign_work ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@assign_work_type", "Activities" ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@allowagent", model.allowagent ?? false);
            command.Parameters.AddWithValue("@record_status", true);
            command.Parameters.AddWithValue("@created_by", username);
            command.Parameters.AddWithValue("@created_date", today);
            command.Parameters.AddWithValue("@old_activity_guid", old_activity_guid);
            command.Parameters.AddWithValue("@re_activity", true);
            await command.ExecuteNonQueryAsync();

            // Commit transaction
            await transaction.CommitAsync();
        }
        catch (Exception ex)
        {
            // // Rollback transaction in case of an error
            await transaction.RollbackAsync();
            // TextProcess = $"Error: {ex.Message}";
            // btnDisable = false;
            // runProcess_wait = false;
        }
        finally
        {
            await MySqlConnection.CloseAsync();
            // btnDisable = true;
            // runProcess_wait = false;
            // TextProcess = "บันทึกข้อมูลระบบเรียบร้อยแล้ว";
            // NotificationService.Notify(NotificationSeverity.Success, "สำเร็จ", "บันทึกข้อมูลสำเร็จ");
            StateHasChanged();
        }
    }

    private async Task InsertCrmContactLog()
    {
        await MySqlConnection.OpenAsync();
        using var transaction = await MySqlConnection.BeginTransactionAsync();

        try
        {
            var query = @"INSERT INTO crm_contact_logs
                      ( activity_id, customer_id, contact_date, contact_method, contact_result, contact_remark, branch_code, created_by, created_at ,statusparticipation ,contact_result2)
                      VALUES (@activity_id, @customer_id, @contact_date, @contact_method, @contact_result, @contact_remark, @branch_code, @created_by, @created_at ,@statusparticipation ,@contact_result2)";

            using var command = new MySqlCommand(query, MySqlConnection, transaction);

            command.Parameters.AddWithValue("@activity_id", model.activities_id);
            command.Parameters.AddWithValue("@customer_id", selectedAct.customer_code);
            command.Parameters.AddWithValue("@contact_date", DateTime.Now.Date);
            command.Parameters.AddWithValue("@contact_method", "โทร");
            command.Parameters.AddWithValue("@contact_result", model.status ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@contact_result2", model.call_status + "/" + model.call_action);
            command.Parameters.AddWithValue("@contact_remark", model.remark ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@branch_code", BranchCode);
            command.Parameters.AddWithValue("@created_by", username);
            command.Parameters.AddWithValue("@created_at", DateTime.Now);
            command.Parameters.AddWithValue("@statusparticipation", model.statusparticipation);


            await command.ExecuteNonQueryAsync();
            await transaction.CommitAsync();
        }
        catch (Exception ex)
        {
            await transaction.RollbackAsync();
            // Log error or handle exception
        }
        finally
        {
            await MySqlConnection.CloseAsync();
        }
    }

    public async Task<IEnumerable<CrmOrder>> FetchOrderDataAsync(string phone)
    {
        try
        {

            // เปิด DialogService เพื่อแจ้งว่ากำลังโหลด
            runProcess_wait = true;
            StateHasChanged(); // บังคับ UI อัปเดต

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                guid = phone
            };

            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/CrmOrder/GetOrderDataByCustomer", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                var crmOrders = await response.Content.ReadFromJsonAsync<IEnumerable<CrmOrder>>();
                return crmOrders;
            }
            else
            {
                Console.WriteLine("Error fetching NoteLogData Data.");
                return Enumerable.Empty<CrmOrder>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }


}
