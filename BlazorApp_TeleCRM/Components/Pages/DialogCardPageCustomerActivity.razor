@page "/DialogCardPageCustomerActivity/{ActivitysID}"
@using System.ComponentModel.DataAnnotations
@using BlazorApp_TeleCRM.Data
@using BlazorApp_TeleCRM.Service
@using static BlazorApp_TeleCRM.Controller.WeatherForecastController
@using static BlazorApp_TeleCRM.Components.Pages.UploadJob
@inject IConfiguration Configuration
@inject Radzen.DialogService dialogService
@inject HttpClient Http


<RadzenStack Gap="1rem" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">

    <RadzenCard Variant="Variant.Outlined">
    
        <RadzenTabs  @bind-SelectedIndex=@selectedIndex Change=@OnChange>
            <Tabs>
                <RadzenTabsItem Text="ข้อมูลกิจกรรม">
                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="3" SizeMD="3">
                            <RadzenText TextStyle="TextStyle.Caption">ความคืบหน้า</RadzenText>
                            <RadzenButton Text="สำเร็จ" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" class="rz-ripple" />
                        </RadzenColumn>
                        <RadzenColumn Size="4">
                            <RadzenText TextStyle="TextStyle.Caption">จำนวนผู้เข้ากิจกรรม</RadzenText>
                            <RadzenButton Text="1" ButtonStyle="ButtonStyle.Base" Variant="Variant.Outlined" class="rz-ripple" />
                        </RadzenColumn>


                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Caption">รหัสกิจกรรม</RadzenText>
                            <RadzenTextBox Style="width: 100%" AutoComplete="false" @bind-Value=@ID />
                        </RadzenColumn>
                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Caption">Point</RadzenText>
                            <RadzenDropDown @bind-Value=@channel Style="width: 100%" Data=@datachannel Name="DropDownBindValue" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="12">
                            <RadzenText TextStyle="TextStyle.Caption">ชื่อกิจกรรม</RadzenText>
                            <RadzenTextBox Style="width: 100%" AutoComplete="false" Value="Activity C" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="12">
                            <RadzenText TextStyle="TextStyle.Caption">รายละเอียด</RadzenText>
                            <RadzenTextBox Style="width: 100%" AutoComplete="false" Value="ทดสอบ" />
                        </RadzenColumn>

                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Caption">วันที่เริ่มจ่ายงาน</RadzenText>
                            <RadzenDatePicker @bind-Value=@datevalue Name="RadzenDatePickerBindValue" ShowCalendarWeek />
                        </RadzenColumn>
                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Caption">วันที่ครบกำหนด</RadzenText>
                            <RadzenDatePicker @bind-Value=@datevalue Name="RadzenDatePickerBindValue" ShowCalendarWeek />
                        </RadzenColumn>
                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Caption">แจ้งใกล้ครบกำหนด</RadzenText>
                            <RadzenDatePicker @bind-Value=@datevalue Name="RadzenDatePickerBindValue" ShowCalendarWeek />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="12">
                            <RadzenText TextStyle="TextStyle.Caption">มอบหมายให้กับพนักงาน</RadzenText>
                            <RadzenDropDown @bind-Value=@staff Style="width: 100%" Data=@datastaff Name="DropDownBindValue" Multiple=true AllowClear=true />


                        </RadzenColumn>


                        <RadzenColumn Size="4" SizeMD="4">
                            <RadzenText TextStyle="TextStyle.Caption">จำนวนลูกค้าที่เลือกทั้งหมด</RadzenText>
                            <RadzenTextBox @bind-Value=@countcustomer Style="width: 100%" AutoComplete="false" />
                        </RadzenColumn>
                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" AlignItems="AlignItems.End" Wrap="FlexWrap.NoWrap" JustifyContent="JustifyContent.Right">

                                <RadzenText TextStyle="TextStyle.Caption">ฝากงานให้นายหน้า</RadzenText>
                                <RadzenCheckBox @bind-Value=@allowRowSelectOnRowClick Name="CheckBox1" />
                            </RadzenStack>
                        </RadzenColumn>


                        <RadzenColumn Size="12" SizeMD="12">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.SpaceBetween">
                                <RadzenButton Text="บันทึก" Style="margin-top:15px" ButtonStyle="ButtonStyle.Primary" />
                                <RadzenButton Text="ยกเลิก" Style="margin-top:15px" ButtonStyle="ButtonStyle.Secondary" />
                            </RadzenStack>
                        </RadzenColumn>


                        <RadzenColumn Size="12" SizeMD="12">
                            <div>
                                หมายเหตุ <br />
                                <ul>
                                    <li>กรณที่เลือกสร้างแบบกิจกรรมระบบสร้างไอดี 1:1</li>
                                    <li> สร้างแบบแคมเปญระบบสร้างไอดีแบบกลุ่ม</li>
                                </ul>
                            </div>

                        </RadzenColumn>


                    </RadzenRow>
                </RadzenTabsItem>
                <RadzenTabsItem Text="ผู้ร่วมกิจกรรม">
                
                        <RadzenRow >
                        <RadzenColumn Size="12">
                            <RadzenText TextStyle="TextStyle.Body2">รายชื่อลูกค้า</RadzenText>
                            <RadzenCard Variant="Variant.Flat"  >
                                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start">
                                    <RadzenImage Path="/user/customer-service.png" Style="width: 100px; height: 100px; border-radius: 50%;" />
                                    <RadzenStack Gap="0">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">ชื่อลูกค้า-นามสกุล</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>"สมหวัง สุขใจ"</b></RadzenText>
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">ที่อยู่</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>"99 xxxxxxx xxxxxx xxxxxx xxxxx 00000"</b></RadzenText>
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">เบอร์ติดต่อ</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b><a href="tel:+66850931002"><RadzenIcon Icon="smartphone" />085-0931-002</a></b></RadzenText>
                                        <img width="150px" style="margin-top:20px" src="data:image/png;base64,@qrCodeImage" alt="QR Code" />
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenCard>
                         </RadzenColumn>
                        <RadzenColumn Size="12">
                            <RadzenText TextStyle="TextStyle.Body2">ประวัติการติดตาม</RadzenText>
                            <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true"
                                            FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            @bind-Value=@selecteContact
                                            Data="@contacts" SelectionMode="DataGridSelectionMode.Single" Density="Density.Compact"
                                            PagerPosition="PagerPosition.Bottom"
                                            AllowAlternatingRows="false">
                                <Columns>
                                    <RadzenDataGridColumn TItem="WeatherForecast" Property="Contact_By" Width="150px" Title="ผู้ติดต่อ" />
                                    <RadzenDataGridColumn TItem="WeatherForecast" Property="Contact_Date" Width="150px" Title="วันที่ติดต่อลูกค้า" />
                                    <RadzenDataGridColumn TItem="WeatherForecast" Property="Last_Contact_Action" Width="120px" Title="ผลตอบรับครั้งก่อน" />
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenColumn>
                        </RadzenRow>

                </RadzenTabsItem>
                <RadzenTabsItem Text="ขายสินค้า">
                    <RadzenRow Gap="1rem">


                        <RadzenDataGrid @ref="ordersGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="@editMode"
                                        Data="@orders" TItem="Products" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
                            <HeaderTemplate>
                                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="เพิ่มสินค้า" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)" />
                            </HeaderTemplate>
                            <Columns>

                                <RadzenDataGridColumn Property="Code" Width="100px" Title="รหัสสินค้า">
                                    <EditTemplate Context="order">
                                        <RadzenTextBox @bind-Value="order.Code" Style="width:100px; display: block" Name="ProductCode" aria-label="" />
                                        <RadzenRequiredValidator Text="รหัสสินค้า" Component="ProductCode" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Property="@nameof(Products.Name)" Width="150px" Title="ชื่อสินค้า">
                                    <EditTemplate Context="order">
                                        <RadzenTextBox @bind-Value="order.Name" Style="width:150px; display: block" Name="ProductName" aria-label="" />
                                        <RadzenRequiredValidator Text="ชื่อสินค้า" Component="ProductName" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Property="@nameof(Products.Price)" Width="100px" Title="ราคาสินค้า">
                                    <EditTemplate Context="order">
                                        <RadzenNumeric ShowUpDown="false" @bind-Value="order.Price" Name="ProductPrice" Style="width:100%" Placeholder="ราคาสินค้า" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "ราคา" }})" />
                                        <RadzenRequiredValidator Text="ราคาสินค้า" Component="ProductPrice" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Property="@nameof(Products.SalePrice)" Width="100px" Title="ราคาขาย">
                                    <EditTemplate Context="order">
                                        <RadzenNumeric ShowUpDown="false" @bind-Value="order.SalePrice" Name="ProductSalePrice" Style="width:100%" Placeholder="ราคาขาย" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "ราคา" }})" />
                                        <RadzenRequiredValidator Text="ราคาขาย" Component="ProductSalePrice" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                @*   <RadzenDataGridColumn Property="@nameof(Order.ShipCountry)" Title="ShipCountry">
                                <EditTemplate Context="order">
                                <RadzenTextBox @bind-Value="order.ShipCountry" Style="width:200px; display: block" Name="ShipCountry" aria-label="Enter ship country" />
                                <RadzenRequiredValidator Text="ShipCountry is required" Component="ShipCountry" Popup="true" />
                                </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Property="@nameof(Order.ShipCity)" Title="ShipCity">
                                <EditTemplate Context="order">
                                <RadzenTextBox @bind-Value="order.ShipCity" Style="width:200px; display: block" Name="ShipCity" aria-label="Enter ship city" />
                                <RadzenRequiredValidator Text="ShipCity is required" Component="ShipCity" Popup="true" />
                                </EditTemplate>
                                </RadzenDataGridColumn> *@
                                <RadzenDataGridColumn Context="order" Width="150px" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                                    <Template Context="order">
                                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                                        </RadzenButton>
                                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                                        </RadzenButton>
                                    </Template>
                                    <EditTemplate Context="order">
                                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(order))" aria-label="Save">
                                        </RadzenButton>
                                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(order))" aria-label="Cancel">
                                        </RadzenButton>
                                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(order))" aria-label="Delete">
                                        </RadzenButton>
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>

                    </RadzenRow>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>

     
        
       
   
 </RadzenCard>



</RadzenStack>
@code {
    [Parameter] public string ActivitysID { get; set; }



    bool runProcess_wait = false;

    int selectedIndex = 0;
    string ID = "A0000000001";
    string channel = "Up-Sale";
    string staff = "พนักงาน A";
    string countcustomer = "1";

    bool allowRowSelectOnRowClick = false;

    IEnumerable<string> datachannel;
    IEnumerable<string> datastaff;
    DateTime? datevalue;


    //
    private IEnumerable<WeatherForecast> contacts;
    IList<WeatherForecast> selecteContact;
    private string qrCodeImage;

    private IEnumerable<ActivitysDataList> act_data;
    ActivitysDataList selectedAct;


    //

    private static readonly string[] data_channels = new[]
      {
            "เลือกPoint", "Up-Sale", "Re-Sale","ลูกค้าขุด"
      };

    private static readonly string[] data_staff = new[]
       {
            "เลือกพนักงาน", "พนักงาน A", "พนักงาน B","พนักงาน C", "ทีม A", "ทีม B","ทีม C"
      };


    #region grid product

    RadzenDataGrid<Products> ordersGrid;
    IEnumerable<Products> orders;
    DataGridEditMode editMode = DataGridEditMode.Single;
    List<Products> ordersToInsert = new List<Products>();
    List<Products> ordersToUpdate = new List<Products>();
    void Reset()
    {
        ordersToInsert.Clear();
        ordersToUpdate.Clear();
    }

    void Reset(Products order)
    {
        ordersToInsert.Remove(order);
        ordersToUpdate.Remove(order);
    }


    async Task EditRow(Products order)
    {
        if (editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)
        {
            Reset();
        }

        ordersToUpdate.Add(order);
        await ordersGrid.EditRow(order);
    }

    void OnUpdateRow(Products order)
    {
        Reset(order);

        //  dbContext.Update(order);

        // dbContext.SaveChanges();
    }

    async Task SaveRow(Products order)
    {
        await ordersGrid.UpdateRow(order);
    }

    void CancelEdit(Products order)
    {
        Reset(order);

        ordersGrid.CancelEditRow(order);

        // var orderEntry = dbContext.Entry(order);
        // if (orderEntry.State == EntityState.Modified)
        // {
        //     orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //     orderEntry.State = EntityState.Unchanged;
        // }
    }

    async Task DeleteRow(Products order)
    {
        Reset(order);

        if (orders.Contains(order))
        {
            //    dbContext.Remove<Products>(order);

            //  dbContext.SaveChanges();

            await ordersGrid.Reload();
        }
        else
        {
            ordersGrid.CancelEditRow(order);
            await ordersGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var order = new Products();
        ordersToInsert.Add(order);
        await ordersGrid.InsertRow(order);
    }

    void OnCreateRow(Products order)
    {
        //    dbContext.Add(order);

        //  dbContext.SaveChanges();

        ordersToInsert.Remove(order);
    }


    #endregion




    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        datachannel = data_channels;
        datastaff = data_staff;

        string phoneNumber = "tel:+66850931002";

        // สร้าง QR Code
        using (var qrGenerator = new QRCoder.QRCodeGenerator())
        {
            var qrCodeData = qrGenerator.CreateQrCode(phoneNumber, QRCoder.QRCodeGenerator.ECCLevel.Q);
            var qrCode = new QRCoder.PngByteQRCode(qrCodeData);
            var qrCodeBytes = qrCode.GetGraphic(20);

            // แปลงเป็น base64 เพื่อแสดงเป็นรูปภาพใน img tag
            qrCodeImage = Convert.ToBase64String(qrCodeBytes);
        }
    }


    void OnChange(int index)
    {

    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();


        act_data = await FetchCustomerDataAsync(this.ActivitysID);
        if (act_data != null && act_data.Any())
        {
            selectedAct = act_data.FirstOrDefault();

            if (selectedAct != null)
            {
                ID = selectedAct.guid;
            }

        }



       // ID = "A0000000001";
        channel = "Up-Sale";
        staff = "พนักงาน A";
        countcustomer = "1";
        datevalue = DateTime.Now.Date;

        var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];
        // Use the BaseApiUrl to call the API
        var _contacts = await Http.GetFromJsonAsync<IEnumerable<WeatherForecast>>($"{baseApiUrl}/api/weatherforecast");

        contacts = _contacts.Take(5).ToList();
        selecteContact = new List<WeatherForecast>() { contacts.FirstOrDefault() };

        List<Products> prders = new List<Products>
        {
            new Products { Code = "P001", Name = "Product 1", Price = 100 ,SalePrice=100 },
            new Products { Code = "P002", Name = "Product 2", Price = 200 ,SalePrice=150 },
            new Products { Code = "P003", Name = "Product 3", Price = 150 ,SalePrice=100 },
            new Products { Code = "P004", Name = "Product 4", Price = 99 ,SalePrice=99 },
            new Products { Code = "P005", Name = "Product 5", Price = 250 ,SalePrice=250 }
        };
        orders = prders.ToList();


    }

    public async Task<IEnumerable<ActivitysDataList>> FetchCustomerDataAsync(string Guid)
    {
        try
        {

            // เปิด DialogService เพื่อแจ้งว่ากำลังโหลด
            runProcess_wait = true;
            StateHasChanged(); // บังคับ UI อัปเดต

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                guid = Guid
            };

            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/ActivityAdmin/GetActivitysById", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                var activitysDataList = await response.Content.ReadFromJsonAsync<IEnumerable<ActivitysDataList>>();
                return activitysDataList;
            }
            else
            {
                Console.WriteLine("Error fetching Activity Data.");
                return Enumerable.Empty<ActivitysDataList>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }




    void OnProgress(UploadProgressArgs args, string name)
    {
        // console.Log($"{args.Progress}% '{name}' / {args.Loaded} of {args.Total} bytes.");

        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {
                //  console.Log($"Uploaded: {file.Name} / {file.Size} bytes");
            }
        }
    }

}
