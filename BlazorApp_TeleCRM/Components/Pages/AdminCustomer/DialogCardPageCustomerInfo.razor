@page "/DialogCardPageCustomerInfo/{CustomerId}"
@using System.ComponentModel.DataAnnotations
@using BlazorApp_TeleCRM.Data
@using BlazorApp_TeleCRM.Helper
@using BlazorApp_TeleCRM.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using MySql.Data.MySqlClient
@using static BlazorApp_TeleCRM.Components.Pages.AdminCustomer.AdminCustomer
@inject IConfiguration Configuration
@inject DialogService DialogService
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UtilityConvet utility ;
@inject NotificationService NotificationService
@inject MySqlConnection MySqlConnection

<style>
    .rz-dialog-side {
        z-index: 10 !important;
    }
</style>

<RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
    <RadzenStack>

        <RadzenTabs @bind-SelectedIndex=@selectedIndex2>
            <Tabs>
                <RadzenTabsItem Text="ข้อมูลลูกค้า">
                    <RadzenRow>
                        <RadzenColumn Size="6" SizeMD="6" class="rz-p-4 rz-border-radius-1" Style="border: var(--rz-grid-cell-border)">
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                <RadzenStack Gap="0">
                                    <RadzenText TextStyle="TextStyle.Overline" Style="color: var(--rz-text-tertiary-color);">เบอร์ติดต่อลูกค้า</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1"><b><a href="tel:@utility.FormatPhoneNumberWithCountryCode(model.customer_phone)"><RadzenIcon Icon="smartphone" /> @utility.FormatPhoneNumber(model.customer_phone) </a></b></RadzenText>
                                    <img width="150px" style="margin-top:20px" src="data:image/png;base64,@qrCodeImage" alt="QR Code" />
                                </RadzenStack>
                                <RadzenStack Gap="0">
                                    <RadzenText TextStyle="TextStyle.Overline" Style="color: var(--rz-text-tertiary-color);">ชื่อลูกค้า</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1" class="rz-text-truncate"><b>@model.customer_name</b></RadzenText>
                                    <RadzenText TextStyle="TextStyle.Overline" Style="color: var(--rz-text-tertiary-color);">ที่อยู่</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption"><b>@model.customer_address1 @model.customer_sub_district @model.customer_district @model.customer_province @model.customer_zipcode</b></RadzenText>
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenColumn>
                        <RadzenColumn Size="6" SizeMD="6" class="rz-p-4 rz-border-radius-1" Style="border: var(--rz-grid-cell-border)">
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.SpaceBetween" Gap="20px">
                                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="5px">
                                    <RadzenText TextStyle="TextStyle.Caption" Style="color:mediumseagreen">วันเดือนปีเกิด</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption"><b>@model_Personal.birth_date</b></RadzenText>

                                    <RadzenText TextStyle="TextStyle.Caption" Style="color:mediumseagreen">อายุ</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption"><b>@model_Personal.age</b></RadzenText>

                                    <RadzenText TextStyle="TextStyle.Caption" Style="color:mediumseagreen">น้ำหนัก</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption"><b>@model_Personal.weight</b></RadzenText>

                                    <RadzenText TextStyle="TextStyle.Caption" Style="color:mediumseagreen">โรคประจำตัว</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption"><b>@model_Personal.chronic_disease</b></RadzenText>
                                </RadzenStack>

                                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="0px">
                                    <RadzenText TextStyle="TextStyle.Caption" Style="color:mediumseagreen">ยาที่ทานประจำ</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption"><b>@model_Personal.regular_medication</b></RadzenText>

                                    <RadzenText TextStyle="TextStyle.Caption" Style="color:mediumseagreen">แพ้ยา</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption"><b>@model_Personal.drug_allergy</b></RadzenText>

                                    <RadzenText TextStyle="TextStyle.Caption" Style="color:mediumseagreen">แพ้อาหาร</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption"><b>@model_Personal.food_allergy</b></RadzenText>
                                </RadzenStack>

                                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="0px">
                                    <RadzenText TextStyle="TextStyle.Caption" Style="color:mediumseagreen">โรคความดันโลหิตสูง</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption"><b>
                                            @if (model_Personal.hypertension.HasValue)
                                            {
                                                @(model_Personal.hypertension.Value ? "มี" : "ไม่มี")
                                            }

                                    </b></RadzenText>

                                    <RadzenText TextStyle="TextStyle.Caption" Style="color:mediumseagreen">เบาหวาน</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption"><b>
                                            @if (model_Personal.diabetes.HasValue)
                                            {
                                                @(model_Personal.diabetes.Value ? "มี" : "ไม่มี")
                                            }

                                    </b></RadzenText>

                                    <RadzenText TextStyle="TextStyle.Caption" Style="color:mediumseagreen">ไขมันในเลือดสูง</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption"><b>
                                            @if (model_Personal.hyperlipidemia.HasValue)
                                            {
                                                @(model_Personal.hyperlipidemia.Value ? "มี" : "ไม่มี")
                                            }
                                    </b></RadzenText>

                                    <RadzenText TextStyle="TextStyle.Caption" Style="color:mediumseagreen">โรคหัวใจ</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption"><b>
                                            @if (model_Personal.heart_disease.HasValue)
                                            {
                                                @(model_Personal.heart_disease.Value ? "มี" : "ไม่มี")
                                            }

                                    </b></RadzenText>
                                  
                                    <RadzenText TextStyle="TextStyle.Caption" Style="color:mediumseagreen">โรคหลอดเลือดสมอง</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption"><b>
                                            @if (model_Personal.stroke.HasValue)
                                            {
                                                @(model_Personal.stroke.Value ? "มี" : "ไม่มี")
                                            }
                                    </b></RadzenText>

                                    <RadzenText TextStyle="TextStyle.Caption" Style="color:mediumseagreen">มะเร็ง</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption"><b>@model_Personal.cancer</b></RadzenText>
                                </RadzenStack>
                            </RadzenStack>
                            <RadzenButton Click=@(args => OnEditCusInfo(CustomerId)) Icon="edit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.ExtraSmall" />
                            <RadzenButton Click=@(args => OnRefresh(CustomerId)) Icon="refresh" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.ExtraSmall" />
                        </RadzenColumn>

                    </RadzenRow>
                    <RadzenTabs @bind-SelectedIndex=@selectedIndex Change=@OnChange>
                        <Tabs>
                            <RadzenTabsItem Text="ประวัติการติดต่อ">
                                <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true"
                                                FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                @bind-Value=@selecteContact
                                                Data="@contacts" SelectionMode="DataGridSelectionMode.Single" Density="Density.Compact"
                                                PagerPosition="PagerPosition.Bottom"
                                                AllowAlternatingRows="false">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="CrmContactLog" Property="@nameof(CrmContactLog.created_by)" Width="120px" Title="ผู้ติดต่อ" />
                                        <RadzenDataGridColumn TItem="CrmContactLog" Property="@nameof(CrmContactLog.created_at)" Width="150px" Title="วันที่ติดต่อลูกค้า" />
                                        <RadzenDataGridColumn TItem="CrmContactLog" Property="@nameof(CrmContactLog.contact_result)" Width="120px" Title="ความคืบหน้า" />
                                        <RadzenDataGridColumn TItem="CrmContactLog" Property="@nameof(CrmContactLog.contact_result2)" Width="120px" Title="ผลตอบรับครั้งก่อน" />
                                        <RadzenDataGridColumn TItem="CrmContactLog" Property="@nameof(CrmContactLog.contact_remark)" Width="150px" Title="หมายเหตุ" />
                                        <RadzenDataGridColumn TItem="CrmContactLog" Property="@nameof(CrmContactLog.statusparticipation)" Width="150px" Title="คะแนนการมีส่วนร่วม" />
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenTabsItem>
                            <RadzenTabsItem Text="Note">

                                <RadzenTemplateForm TItem="Model2" Data=@model2 Submit="@OnSubmit2" InvalidSubmit="@OnInvalidSubmit2">
                                    <RadzenStack class="rz-12">


                                        <RadzenRow AlignItems="AlignItems.Start" class="rz-12">
                                            <RadzenColumn Size="6" SizeMD="6">
                                                <RadzenLabel Text="Note" TextStyle="TextStyle.Subtitle2" Component="remark" />
                                                <RadzenTextArea Placeholder="" Name="remark" @bind-Value="@model2.note" class="w-100" />
                                                <RadzenRequiredValidator Component="remark" Text="กรอกข้อความ" />
                                            </RadzenColumn>

                                        </RadzenRow>

                                        <RadzenRow AlignItems="AlignItems.Start">
                                            <RadzenColumn Size="12">
                                                <RadzenButton ButtonType="ButtonType.Submit" Text="บันทึก" Style="margin-top: 5px;" />
                                            </RadzenColumn>
                                        </RadzenRow>

                                    </RadzenStack>
                                </RadzenTemplateForm>
                                <hr />

                                <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="1rem" class="rz-12" Style="width%90">
                                    <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true"
                                                    FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@selectenote
                                                    Data="@notes" SelectionMode="DataGridSelectionMode.Single" Density="Density.Compact"
                                                    PagerPosition="PagerPosition.Bottom"
                                                    AllowAlternatingRows="false">
                                        <Columns>
                                            <RadzenDataGridColumn TItem="CrmNote" Property="@nameof(CrmNote.created_by)" Width="120px" Title="ผู้ลงบันทึก" />
                                            <RadzenDataGridColumn TItem="CrmNote" Property="@nameof(CrmNote.created_at)" Width="150px" Title="วันที่ลงบันทึก" />
                                            <RadzenDataGridColumn TItem="CrmNote" Property="@nameof(CrmNote.note)" Width="400px" Title="Note" />
                                        </Columns>
                                    </RadzenDataGrid>
                                </RadzenStack>
                            </RadzenTabsItem>
                        </Tabs>
                    </RadzenTabs>
                </RadzenTabsItem>
                <RadzenTabsItem Text="ข้อมูลกิจกรรม">
                    <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true"
                                    FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    @bind-Value=@selecteActivitys
                                    Data="@activitys" SelectionMode="DataGridSelectionMode.Single" Density="Density.Compact"
                                    PagerPosition="PagerPosition.Bottom"
                                    AllowAlternatingRows="false">
                        <Columns>
                            <RadzenDataGridColumn Width="160px" Property="status" Title="ความคืบหน้า">
                                <Template Context="data">

                                    @if (data.status == "สำเร็จ")
                                    {
                                        <RadzenButton Text="สำเร็จ" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Info" Shade="Shade.Lighter" Variant="Variant.Flat" class="rz-ripple" />
                                    }
                                    else if (data.status == "")
                                    {
                                        <RadzenButton Text="รอดำเนินการ" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Warning" Shade="Shade.Lighter" Variant="Variant.Flat" class="rz-ripple" />
                                    }
                                    else if (data.status == "ปิดการขาย")
                                    {
                                        <RadzenButton Text="ปิดการขาย" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Success" Shade="Shade.Lighter" Variant="Variant.Flat" class="rz-ripple" />
                                    }
                                    else if (data.status == "ไม่สำเร็จ")
                                    {
                                        <RadzenButton Text="ไม่สำเร็จ" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Light" Shade="Shade.Lighter" Variant="Variant.Flat" class="rz-ripple" />
                                    }
                                    else
                                    {
                                        <RadzenButton Text="@data.status" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Dark" Shade="Shade.Lighter" Variant="Variant.Flat" class="rz-ripple" />
                                    }

                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ActivitysDataList" Property="@nameof(ActivitysDataList.call_status)" Width="200px" Title="สถานะการโทร" />
                            <RadzenDataGridColumn TItem="ActivitysDataList" Property="@nameof(ActivitysDataList.call_action)" Width="200px" Title="สถานะการสนทนา" />
                            <RadzenDataGridColumn TItem="ActivitysDataList" Property="@nameof(ActivitysDataList.guid)" Width="200px" Title="เลขที่กิจกรรม" />
                            <RadzenDataGridColumn TItem="ActivitysDataList" Property="@nameof(ActivitysDataList.name)" Width="200px" Title="ชื่อกิจกรรม" />
                            <RadzenDataGridColumn TItem="ActivitysDataList" Property="@nameof(ActivitysDataList.assign_work_type)" Width="150px" Title="ประเภท" />
                            <RadzenDataGridColumn TItem="ActivitysDataList" Property="@nameof(ActivitysDataList.touch_point)" Width="150px" Title="Touch Point" />
                            <RadzenDataGridColumn TItem="ActivitysDataList" Property="@nameof(ActivitysDataList.assign_work)" Width="180px" Title="มอบหมายให้" />
                            <RadzenDataGridColumn TItem="ActivitysDataList" Property="@nameof(ActivitysDataList.created_by)" FormatString="{0:dd/MM/yyyy HH:mm:ss}" Width="180px" Title="วันที่สร้างกิจกรรม" />
                            <RadzenDataGridColumn TItem="ActivitysDataList" Property="@nameof(ActivitysDataList.startdate)" FormatString="{0:dd/MM/yyyy HH:mm:ss}" Width="180px" Title="วันที่เริ่มกิจกรรม" />
                            <RadzenDataGridColumn TItem="ActivitysDataList" Property="@nameof(ActivitysDataList.duedate)" FormatString="{0:dd/MM/yyyy HH:mm:ss}" Width="180px" Title="วันครบกำหนด" />
                        </Columns>
                    </RadzenDataGrid>
                </RadzenTabsItem>
                <RadzenTabsItem Text="ประวัติการซื้อ">
                    <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true"
                                    FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    @bind-Value=@selecteCrmOrders
                                    Data="@crmOrders" SelectionMode="DataGridSelectionMode.Single" Density="Density.Compact"
                                    PagerPosition="PagerPosition.Bottom"
                                    AllowAlternatingRows="false">
                        <Columns>
                            <RadzenDataGridColumn TItem="CrmOrder" Property="@nameof(CrmOrder.order_no)" Width="180px" Title="เลขที่คำสั่งซื้อ" />
                            <RadzenDataGridColumn TItem="CrmOrder" Property="@nameof(CrmOrder.order_date)" Width="200px" Title="วันที่คำสั่งซื้อ" FormatString="{0:dd/MM/yyyy HH:mm:ss}" />
                            <RadzenDataGridColumn TItem="CrmOrder" Property="@nameof(CrmOrder.product_codes)" Title="รายการสั่งซื้อ" Width="300px">
                                <Template Context="data">
                                    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" AlignItems="AlignItems.Center">
                                        <RadzenStack Gap="0">
                                            <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-0">@data.product_names</RadzenText>
                                        </RadzenStack>
                                    </RadzenStack>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="CrmOrder" Property="@nameof(CrmOrder.amount)" Width="150px" Title="จำนวนเงิน" />
                            <RadzenDataGridColumn TItem="CrmOrder" Property="@nameof(CrmOrder.payment_type)" Width="150px" Title="การชำระเงิน" />
                        </Columns>
                    </RadzenDataGrid>

                    <RadzenCard Variant="Variant.Outlined">
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Gap="1rem" Wrap="FlexWrap.Wrap">
                            @if (selecteCrmOrders?.Any() == true)
                            {
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>รหัสสินค้า</th>
                                            <th>ชื่อสินค้า</th>
                                            <th>จำนวน</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var product in selecteCrmOrders)
                                        {
                                            @if (product != null)
                                            {
                                                var productCodes = product.product_codes?.Split('|') ?? Array.Empty<string>();
                                                var productNames = product.product_names?.Split('|') ?? Array.Empty<string>();
                                                var productQtys = product.product_qtys?.Split('|') ?? Array.Empty<string>();

                                                for (int i = 0; i < productCodes.Length; i++)
                                                {
                                                    <tr>
                                                        <td>@(productCodes.Length > i ? productCodes[i] : "-")</td>
                                                        <td>@(productNames.Length > i ? productNames[i] : "-")</td>
                                                        <td>@(productQtys.Length > i ? productQtys[i] : "-")</td>
                                                    </tr>
                                                }

                                            }
                                        }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <div>ไม่มีข้อมูล</div>
                            }
                        </RadzenStack>
                    </RadzenCard>


                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>

    </RadzenStack>

</RadzenStack>
@code {
    [Parameter] public string CustomerId { get; set; }

    int selectedIndex = 0;
    int selectedIndex2 = 0;

    private string? qrCodeImage = "";
    bool runProcess_wait = false;

    Model model = new Model();
    Model2 model2 = new Model2();
    ModelPersonal_info model_Personal = new ModelPersonal_info();

    private string? username;
    private string? BranchCode { get; set; }
    private IEnumerable<string>? _BranchCode;

    private IEnumerable<CustomerDataList>? cus_data;
    CustomerDataList selectedCus;

    private IEnumerable<CrmContactLog> contacts;
    IList<CrmContactLog> selecteContact;

    private IEnumerable<CrmNote> notes;
    IList<CrmNote> selectenote;

    private IEnumerable<ActivitysDataList> activitys;
    IList<ActivitysDataList> selecteActivitys;

    private IEnumerable<CrmOrder> crmOrders;
    IList<CrmOrder> selecteCrmOrders;



    class Model
    {
        public string? activities_id { get; set; }
        public string? activities_name { get; set; }
        public string? activities_touch_point { get; set; }
        public string? activities_description { get; set; }
        public string? activities_created_by { get; set; }

        public DateTime? activities_startdate { get; set; }
        public DateTime? activities_duedate { get; set; }
        public DateTime? activities_reminder_duedate { get; set; }
        public string? activities_assign_work { get; set; }
        public bool? allowagent { get; set; } = false;

        public string? status { get; set; }
        public string? call_status { get; set; }
        public string? call_action { get; set; }
        public string? sale_order_no { get; set; }
        public string? code { get; set; }
        public int statusparticipation { get; set; }
        public string? remark { get; set; }


        public string? customer_name { get; set; }
        public string? customer_phone { get; set; }
        public string? customer_province { get; set; }
        public string? customer_address1 { get; set; }
        public string? customer_sub_district { get; set; }
        public string? customer_district { get; set; }
        public string? customer_zipcode { get; set; }


        public string? contact_by { get; set; }
        public DateTime? contact_date { get; set; }
        public string? contact_use_phone { get; set; }
        public string? new_activity_ref_guid { get; set; }
        public DateTime? appointment_date { get; set; }
        public string? old_activity_guid { get; set; }
        public bool? re_activity { get; set; }

    }

    class Model2
    {
        public string? note { get; set; }
    }



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            username = user.Identity.Name;
            _BranchCode = user.Claims.Where(c => c.Type == ClaimTypes.Locality).Select(c => c.Value);
            BranchCode = _BranchCode.FirstOrDefault();
        }
        else
        {
            username = "";
            BranchCode = "";
        }

    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        cus_data = await FetchCustomerDataAsync(this.CustomerId);
        if (cus_data != null && cus_data.Any())
        {
            selectedCus = cus_data.FirstOrDefault();

            if (selectedCus != null)
            {
                model.activities_id = selectedCus.guid;
                

                model.customer_name = selectedCus.name;
                model.customer_phone = selectedCus.phone;
                model.customer_province = selectedCus.province;
                model.customer_address1 = selectedCus.address1;
                model.customer_sub_district = selectedCus.sub_district;
                model.customer_district = selectedCus.district;
                model.customer_zipcode = selectedCus.zipcode;

               
                string phoneNumber = "tel:" + @utility.FormatPhoneNumberWithCountryCode(selectedCus.phone);

                // สร้าง QR Code
                using (var qrGenerator = new QRCoder.QRCodeGenerator())
                {
                    var qrCodeData = qrGenerator.CreateQrCode(phoneNumber, QRCoder.QRCodeGenerator.ECCLevel.Q);
                    var qrCode = new QRCoder.PngByteQRCode(qrCodeData);
                    var qrCodeBytes = qrCode.GetGraphic(20);

                    // แปลงเป็น base64 เพื่อแสดงเป็นรูปภาพใน img tag
                    qrCodeImage = Convert.ToBase64String(qrCodeBytes);
                }

            }


            model_Personal = (await LoadPersonal_infoData(selectedCus.guid)) ?? new ModelPersonal_info();

            contacts = await FetchCrmContactLogDataAsync(selectedCus.guid);
            selecteContact = new List<CrmContactLog>() { contacts.FirstOrDefault() };

            notes = await FetchCrmNotesDataAsync(selectedCus.guid);
            selectenote = new List<CrmNote>() { notes.FirstOrDefault() };

            activitys = await FetchActivitysDataAsync(selectedCus.guid);
            selecteActivitys = new List<ActivitysDataList>() { activitys.FirstOrDefault() };

            crmOrders = await FetchOrderDataAsync(selectedCus.phone);
            selecteCrmOrders = new List<CrmOrder>() { crmOrders.FirstOrDefault() };

          

        }

    }

    void OnChange(int index)
    {

    }

    public async Task<IEnumerable<CustomerDataList>> FetchCustomerDataAsync(string Guid)
    {
        runProcess_wait = true;
        try
        {

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                guid = Guid,
                branch_code = BranchCode
            };

            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/CustomerAdmin/GetCustomerDataById", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                var dataLists = await response.Content.ReadFromJsonAsync<IEnumerable<CustomerDataList>>();
                return dataLists;
            }
            else
            {
                Console.WriteLine("Error fetching Customer Data.");
                return Enumerable.Empty<CustomerDataList>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }

    public async Task<IEnumerable<CrmContactLog>> FetchCrmContactLogDataAsync(string Guid)
    {
        try
        {

            // เปิด DialogService เพื่อแจ้งว่ากำลังโหลด
            runProcess_wait = true;
            StateHasChanged(); // บังคับ UI อัปเดต

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                guid = Guid,
                branch_code = BranchCode
            };

            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/Job/GetCrmContactLogDataByID", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                var contacts = await response.Content.ReadFromJsonAsync<IEnumerable<CrmContactLog>>();
                return contacts;
            }
            else
            {
                Console.WriteLine("Error fetching ContactLogData Data.");
                return Enumerable.Empty<CrmContactLog>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }

    public async Task<IEnumerable<CrmNote>> FetchCrmNotesDataAsync(string Guid)
    {
        try
        {

            // เปิด DialogService เพื่อแจ้งว่ากำลังโหลด
            runProcess_wait = true;
            StateHasChanged(); // บังคับ UI อัปเดต

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                guid = Guid,
                branch_code = BranchCode
            };

            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/Job/GetCrmNoteDataByID", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                var notes = await response.Content.ReadFromJsonAsync<IEnumerable<CrmNote>>();
                return notes;
            }
            else
            {
                Console.WriteLine("Error fetching NoteLogData Data.");
                return Enumerable.Empty<CrmNote>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }

    private async Task OnSubmit2()
    {
        await UpdateNote();
        notes = await FetchCrmNotesDataAsync(selectedCus.guid);
        selectenote = new List<CrmNote>() { notes.FirstOrDefault() };
    }

    private async Task UpdateNote()
    {


        DateTime today = DateTime.Now;

        await MySqlConnection.OpenAsync();
        using var transaction = await MySqlConnection.BeginTransactionAsync();

        try
        {
            var query = @"INSERT INTO crm_notes (guid, activity_id, customer_id, branch_code, created_by, created_at , note)
            VALUES (@guid, @activity_id ,@customer_code, @branch_code, @created_by, @created_date ,@note)";
            using var command = new MySqlCommand(query, MySqlConnection, transaction);


            command.Parameters.AddWithValue("@guid", Guid.NewGuid().ToString()); // ใช้ GUID ที่มีอยู่
            command.Parameters.AddWithValue("@activity_id", "");
            command.Parameters.AddWithValue("@customer_code", selectedCus.guid);
            command.Parameters.AddWithValue("@branch_code", BranchCode ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@created_by", username);
            command.Parameters.AddWithValue("@created_date", today);
            command.Parameters.AddWithValue("@note", model2.note);

            await command.ExecuteNonQueryAsync();

            // Commit transaction
            await transaction.CommitAsync();
        }
        catch
        {
            // Rollback transaction in case of an error
            await transaction.RollbackAsync();
        }
        finally
        {
            await MySqlConnection.CloseAsync();

            NotificationService.Notify(NotificationSeverity.Success, "สำเร็จ", "อัปเดตข้อมูลสำเร็จ");
            StateHasChanged();
            model2.note = "";
        }
    }

    private void OnInvalidSubmit2()
    {

    }

    public async Task<IEnumerable<ActivitysDataList>> FetchActivitysDataAsync(string Guid)
    {
        try
        {

            // เปิด DialogService เพื่อแจ้งว่ากำลังโหลด
            runProcess_wait = true;
            StateHasChanged(); // บังคับ UI อัปเดต

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                guid = Guid
            };

            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/ActivityAdmin/GetActivitysByCustomer", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                var activitys = await response.Content.ReadFromJsonAsync<IEnumerable<ActivitysDataList>>();
                return activitys;
            }
            else
            {
                Console.WriteLine("Error fetching NoteLogData Data.");
                return Enumerable.Empty<ActivitysDataList>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }

    public async Task<IEnumerable<CrmOrder>> FetchOrderDataAsync(string phone)
    {
        try
        {

            // เปิด DialogService เพื่อแจ้งว่ากำลังโหลด
            runProcess_wait = true;
            StateHasChanged(); // บังคับ UI อัปเดต

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                guid = phone,
                branch_code = BranchCode
            };


            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/CrmOrder/GetOrderDataByCustomer", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                var crmOrders = await response.Content.ReadFromJsonAsync<IEnumerable<CrmOrder>>();
                return crmOrders;
            }
            else
            {
                Console.WriteLine("Error fetching NoteLogData Data.");
                return Enumerable.Empty<CrmOrder>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }

    async Task OnEditCusInfo(string id)
    {
          StateHasChanged();  // บังคับให้ UI อัปเดตใหม่

        await DialogService.OpenAsync<DialogCardPagePersonal>($"ข้อมูลส่วนตัว",
                 new Dictionary<string, object>() { { "GUID", id } },
               new DialogOptions()
                   {
                       Width = "650px",
                       Height = "800px",
                       CloseDialogOnOverlayClick = false,  // Disable closing on clicking outside
                       CloseDialogOnEsc = true,           // Disable closing by pressing ESC
                       ShowClose = true  ,
                       Draggable = true
                   });

     }

    public async Task<ModelPersonal_info> LoadPersonal_infoData(string guid)
    {
        string query = @"
        SELECT guid, birth_date, branch_code, age, weight, chronic_disease, regular_medication, drug_allergy, food_allergy,
               hypertension, diabetes, hyperlipidemia, heart_disease, stroke, cancer, modified_by, modified_at
        FROM personal_info
        WHERE guid = @guid";
        ModelPersonal_info m = null;
        try
        {
            await MySqlConnection.OpenAsync();

            using (var command = new MySqlCommand(query, MySqlConnection))
            {
                command.Parameters.AddWithValue("@guid", guid);

                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        m = new ModelPersonal_info
                            {
                                guid = reader["guid"].ToString(),
                                birth_date = reader.IsDBNull(reader.GetOrdinal("birth_date")) ? null : reader["birth_date"].ToString(),
                                age = reader.IsDBNull(reader.GetOrdinal("age")) ? null : reader["age"].ToString(),
                                weight = reader.IsDBNull(reader.GetOrdinal("weight")) ? null : reader["weight"].ToString(),
                                chronic_disease = reader.IsDBNull(reader.GetOrdinal("chronic_disease")) ? null : reader["chronic_disease"].ToString(),
                                regular_medication = reader.IsDBNull(reader.GetOrdinal("regular_medication")) ? null : reader["regular_medication"].ToString(),
                                drug_allergy = reader.IsDBNull(reader.GetOrdinal("drug_allergy")) ? null : reader["drug_allergy"].ToString(),
                                food_allergy = reader.IsDBNull(reader.GetOrdinal("food_allergy")) ? null : reader["food_allergy"].ToString(),
                                hypertension = reader.GetBoolean(reader.GetOrdinal("hypertension")),
                                diabetes = reader.GetBoolean(reader.GetOrdinal("diabetes")),
                                hyperlipidemia = reader.GetBoolean(reader.GetOrdinal("hyperlipidemia")),
                                heart_disease = reader.GetBoolean(reader.GetOrdinal("heart_disease")),
                                stroke = reader.GetBoolean(reader.GetOrdinal("stroke")),
                                cancer = reader.IsDBNull(reader.GetOrdinal("cancer")) ? null : reader["cancer"].ToString()
                            };
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await MySqlConnection.CloseAsync();
        }
        finally
        {
            await MySqlConnection.CloseAsync();
        }

        return m;
    }


    private async Task OnRefresh(string guid)
    {
        model_Personal = (await LoadPersonal_infoData(selectedCus.guid)) ?? new ModelPersonal_info();
        StateHasChanged();
    }


    public class ModelPersonal_info
    {
        public string? guid { get; set; }
        public string? birth_date { get; set; }
        public string? age { get; set; }
        public string? weight { get; set; }
        public string? chronic_disease { get; set; }
        public string? regular_medication { get; set; }
        public string? drug_allergy { get; set; }
        public string? food_allergy { get; set; }
        public bool? hypertension { get; set; }
        public bool? diabetes { get; set; }
        public bool? hyperlipidemia { get; set; }
        public bool? heart_disease { get; set; }
        public bool? stroke { get; set; }
        public string? cancer { get; set; }
    }

}
