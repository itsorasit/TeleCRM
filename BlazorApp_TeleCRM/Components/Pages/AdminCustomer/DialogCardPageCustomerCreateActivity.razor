@page "/DialogCardPageCustomerCreateActivity/{UploadID}"
@using System.ComponentModel.DataAnnotations
@using BlazorApp_TeleCRM.Data
@using BlazorApp_TeleCRM.Service
@using static BlazorApp_TeleCRM.Components.Pages.UploadJob
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using MySql.Data.MySqlClient
@using System.Security.Claims
@inject IConfiguration Configuration
@inject Radzen.DialogService dialogService
@inject HttpClient Http
@inject MySqlConnection MySqlConnection
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService
@inject ITimeZoneService TimeZoneService


<RadzenStack Gap="1rem" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">

    <RadzenCard Variant="Variant.Outlined">

        <RadzenTabs @bind-SelectedIndex=@selectedIndex Change=@OnChange>
            <Tabs>
                <RadzenTabsItem Text="กิจกรรม">
                  <RadzenTemplateForm TItem="Model" Data=@model Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="6" SizeMD="6">
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">รหัสกิจกรรม <span class="rz-messages-error">*</span> </RadzenText>
                            <RadzenTextBox Style="width: 100%" Disabled="true" AutoComplete="false" @bind-Value=@ID />
                        </RadzenColumn>
                        <RadzenColumn Size="6" SizeMD="6">
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Touch Point <span class="rz-messages-error">*</span> </RadzenText>
                                <RadzenDropDown @bind-Value=@model.activities_touch_point style="display:block;width:100%"
                                                Data=@datachannel Name="activities_touch_point" class="w-100" />
                                <RadzenRequiredValidator Component="activities_touch_point" Text="เลือก Touch Point" Style="position: absolute" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">ชื่อกิจกรรม <span class="rz-messages-error">*</span> </RadzenText>
                                <RadzenTextBox Name="activities_name" style="display: block;width: 100%"
                                               @bind-Value=@model.activities_name AutoComplete="false" class="w-100" />
                                <RadzenRequiredValidator Component="activities_name" Text="กรอกชื่อกิจกรรม" Style="position: absolute" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="12">
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">รายละเอียด</RadzenText>
                                <RadzenTextBox Name="activities_name" style="display: block;width: 100%"
                                               @bind-Value=@model.activities_description AutoComplete="false" class="w-100" />
                        </RadzenColumn>

                        <RadzenColumn Size="6" SizeMD="6">
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">วันที่เริ่มจ่ายงาน <span class="rz-messages-error">*</span> </RadzenText>
                                <RadzenDatePicker Change="OnDateChanged" @bind-Value=@model.activities_startdate Name="activities_startdate" ShowTime="true" ShowSeconds="true"
                                                  HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="dd/MM/yyyy HH:mm" class="w-100" style="display: block;width: 100%" />
                                <RadzenRequiredValidator Component="activities_startdate" Text="เลือกวันที่เริ่มจ่ายงาน" Style="position: absolute" />
                        </RadzenColumn>
                        <RadzenColumn Size="6" SizeMD="6">
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">วันที่ครบกำหนด <span class="rz-messages-error">*</span> </RadzenText>
                                <RadzenDatePicker @bind-Value=@model.activities_duedate Name="activities_duedate" ShowTime="true" ShowSeconds="true"
                                                  HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="dd/MM/yyyy HH:mm" class="w-100" style="display: block;width: 100%" />
                                <RadzenRequiredValidator Component="activities_duedate" Text="เลือกวันที่ครบกำหนด" Style="position: absolute" />
                        </RadzenColumn>
                       @*  <RadzenColumn Size="6" SizeMD="6">
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">แจ้งใกล้ครบกำหนด <span class="rz-messages-error">*</span> </RadzenText>
                                <RadzenDatePicker @bind-Value=@model.activities_reminder_duedate Name="activities_reminder_duedate" ShowTime="true" ShowSeconds="true"
                                                  HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="dd/MM/yyyy HH:mm" class="w-100" style="display: block;width: 100%" />
                        </RadzenColumn> *@
                            <RadzenColumn Size="6" SizeMD="6">
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">พนักงาน CRM<span class="rz-messages-error">*</span> </RadzenText>
                                <RadzenDropDown @ref="radzenDropDown"
                                                @bind-SearchText="SearchText"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                FilterOperator="StringFilterOperator.StartsWith"
                                                AllowFiltering="true"
                                                Data="@Assignworks"
                                                TextProperty="FullName"
                                                ValueProperty="Username"
                                                AllowClear="true"
                                                @bind-Value=@model.activities_assign_work
                                                Name="activities_assign_work" class="w-100" style="display: block;width: 100%" />
                                <RadzenRequiredValidator Component="activities_assign_work" Text="พนักงาน CRM" Style="position: absolute" />
                        </RadzenColumn>


                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">จำนวนลูกค้าที่เลือกทั้งหมด </RadzenText>
                            <RadzenTextBox @bind-Value=@countcustomer Disabled="true"  Style="width: 100%; max-width:100px" AutoComplete="false" />
                        </RadzenColumn>
                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" >
                                 <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">ฝากงานให้นายหน้า </RadzenText>
                                    <RadzenCheckBox @bind-Value=@model.allowagent Disabled="true" Name="CheckBox1" />
                            </RadzenStack>
                        </RadzenColumn>


                        <RadzenColumn Size="12" SizeMD="12">
                                <RadzenButton Text="บันทึก" Disabled="@btnDisable" ButtonType="ButtonType.Submit" Style="margin-top:15px" ButtonStyle="ButtonStyle.Primary" />
                        </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenCard Variant="Variant.Outlined" @bind-Visible=runProcess style="background-color:#CBE2F5;">
                                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                        <RadzenProgressBarCircular @bind-Visible="runProcess_wait" ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium">
                                            <Template>รอ</Template>
                                        </RadzenProgressBarCircular>
                                        <RadzenText Style="margin-top:20px" TextStyle="TextStyle.Caption">@TextProcess</RadzenText>
                                        <RadzenText Style="margin-top:20px;color:red" TextStyle="TextStyle.Caption">@TextProcess_Duplicate</RadzenText>
                                    </RadzenStack>
                                </RadzenCard>
                            </RadzenColumn>

                        <RadzenColumn Size="12" SizeMD="12">
                            <div>
                                หมายเหตุ <br />
                                <ul>
                                    <li>กรณที่เลือกสร้างแบบกิจกรรมระบบสร้างไอดี 1:1</li>
                                    <li> สร้างแบบแคมเปญระบบสร้างไอดีแบบกลุ่ม</li>
                                </ul>
                            </div>

                        </RadzenColumn>


                    </RadzenRow>
                    </RadzenTemplateForm>
                </RadzenTabsItem>

               @*  <RadzenTabsItem Text="ขายสินค้า">
                    <RadzenRow Gap="1rem">


                        <RadzenDataGrid @ref="ordersGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="@editMode"
                                        Data="@orders" TItem="Products" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
                            <HeaderTemplate>
                                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="เพิ่มสินค้า" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)" />
                            </HeaderTemplate>
                            <Columns>
                             
                                <RadzenDataGridColumn Property="Code" Width="100px" Title="รหัสสินค้า">
                                    <EditTemplate Context="order">
                                        <RadzenTextBox @bind-Value="order.Code" Style="width:100px; display: block" Name="ProductCode" aria-label="" />
                                        <RadzenRequiredValidator Text="รหัสสินค้า" Component="ProductCode" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Property="@nameof(Products.Name)" Width="150px" Title="ชื่อสินค้า">
                                    <EditTemplate Context="order">
                                        <RadzenTextBox @bind-Value="order.Name" Style="width:150px; display: block" Name="ProductName" aria-label="" />
                                        <RadzenRequiredValidator Text="ชื่อสินค้า" Component="ProductName" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Property="@nameof(Products.Price)" Width="100px" Title="ราคาสินค้า">
                                    <EditTemplate Context="order">
                                        <RadzenNumeric ShowUpDown="false" @bind-Value="order.Price" Name="ProductPrice" Style="width:100%" Placeholder="ราคาสินค้า" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "ราคา" }})" />
                                            <RadzenRequiredValidator Text="ราคาสินค้า" Component="ProductPrice" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Property="@nameof(Products.SalePrice)" Width="100px" Title="ราคาขาย">
                                    <EditTemplate Context="order">
                                        <RadzenNumeric ShowUpDown="false" @bind-Value="order.SalePrice" Name="ProductSalePrice" Style="width:100%" Placeholder="ราคาขาย" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "ราคา" }})" />
                                        <RadzenRequiredValidator Text="ราคาขาย" Component="ProductSalePrice" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                               <RadzenDataGridColumn Property="@nameof(Order.ShipCountry)" Title="ShipCountry">
                                    <EditTemplate Context="order">
                                        <RadzenTextBox @bind-Value="order.ShipCountry" Style="width:200px; display: block" Name="ShipCountry" aria-label="Enter ship country" />
                                        <RadzenRequiredValidator Text="ShipCountry is required" Component="ShipCountry" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Property="@nameof(Order.ShipCity)" Title="ShipCity">
                                    <EditTemplate Context="order">
                                        <RadzenTextBox @bind-Value="order.ShipCity" Style="width:200px; display: block" Name="ShipCity" aria-label="Enter ship city" />
                                        <RadzenRequiredValidator Text="ShipCity is required" Component="ShipCity" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn> 
                                <RadzenDataGridColumn Context="order" Width="150px" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                                    <Template Context="order">
                                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                                        </RadzenButton>
                                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                                        </RadzenButton>
                                    </Template>
                                    <EditTemplate Context="order" >
                                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(order))" aria-label="Save">
                                        </RadzenButton>
                                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(order))" aria-label="Cancel">
                                        </RadzenButton>
                                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(order))" aria-label="Delete">
                                        </RadzenButton>
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>

                    </RadzenRow>
                </RadzenTabsItem> *@
           
            </Tabs>
        </RadzenTabs>


    </RadzenCard>


    @*   <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1.5rem">
    <RadzenButton Click="@((args) => dialogService.Close(true))" Variant="Variant.Outlined"
    Text="ปิด" Style="width: 120px;margin-bottom:20px" />
    </RadzenStack> *@
</RadzenStack>
@code {
    [Parameter] public string UploadID { get; set; }
    [Parameter] public List<string> customercode { get; set; }

    [Inject]
    public SharedStateService SharedState { get; set; }


    bool btnDisable = false;
    bool isError = false;
    string TextError = "";
    bool runProcess = false;
    bool runProcess_wait = false;
    string TextProcess = "";
    string TextProcess_Duplicate = "";


    private string username;
    string ID = "Auto";
    string staff = "เลือกพนักงาน";
    string countcustomer = "0";

    bool allowagent = false;
    int selectedIndex = 0;


    string? old_staff = "";



    private List<Assignwork> Assignworks = new();
    private string SearchText { get; set; }
    private string selectedUserId { get; set; }
    private RadzenDropDown<string> radzenDropDown;

    private string BranchCode { get; set; }
    private IEnumerable<string> _BranchCode;


    IEnumerable<string> datachannel;
    DateTime? datevalue;


    //from data
    class Model
    {
        public string? activities_name { get; set; }
        public string? activities_touch_point { get; set; }
        public string? activities_description { get; set; }
        public DateTime? activities_startdate { get; set; }
        public DateTime? activities_duedate { get; set; }
        public DateTime? activities_reminder_duedate { get; set; }
        public string? activities_assign_work { get; set; }
        public bool? allowagent { get; set; } = false;
    }

    Model model = new Model();

    private void OnSubmit(Model model)
    {
        // if (channel == "" || channel == "เลือกแหล่งข้อมูล")
        // {
        //     isError = true;
        //     TextError = "กรุณาเลือกแหล่งข้อมูล";
        //     NotificationService.Notify(NotificationSeverity.Warning, "แจ้งเตือน", "กรุณาเลือกแหล่งข้อมูล");
        //     return;
        // }

        // if (excelData == null)
        // {
        //     isError = true;
        //     TextError = "กรุณานำไฟล์มาอัพโหลด";
        //     NotificationService.Notify(NotificationSeverity.Warning, "แจ้งเตือน", "กรุณานำไฟล์มาอัพโหลด");
        //     return;
        // }

        SaveBatchToDatabaseWithTransaction();

    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        // console.Log($"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}");
    }


    private void OnDateChanged(DateTime? value1)
    {
        model.activities_duedate = value1.Value.Date.AddHours(19);
    }

    private async Task SaveBatchToDatabaseWithTransaction()
    {
        btnDisable = true;
        runProcess = true;
        runProcess_wait = true;
        TextProcess = "กรุณารอ ระบบกำลังทำการบันทึกข้อมูล..";
        TextProcess_Duplicate = "";

        DateTime today = new DateTime();
       // today = DateTime.Now;
        today = TimeZoneService.ToLocalTime(DateTime.UtcNow);

        await MySqlConnection.OpenAsync();
        using var transaction = await MySqlConnection.BeginTransactionAsync();

        try
        {
            var query = @"INSERT INTO crm_activitys (guid, customer_code, branch_code, touch_point, name, description, startdate, duedate, reminder_duedate, assign_work, assign_work_type, allowagent, record_status, created_by, created_date)
            VALUES (@guid, @customer_code, @branch_code, @touch_point, @name, @description, @startdate, @duedate, @reminder_duedate, @assign_work, @assign_work_type, @allowagent, @record_status, @created_by, @created_date)";

            foreach (var i in SharedState.SelectedCustomerIDs)
            {

                // Check duplicate user
                await CheckDuplicateUsersAsync(i);

                if (string.IsNullOrEmpty(old_staff) || old_staff == model.activities_assign_work)
                {
                    using var command = new MySqlCommand(query, MySqlConnection, transaction);
                    command.Parameters.AddWithValue("@guid", Guid.NewGuid().ToString());
                    command.Parameters.AddWithValue("@customer_code", i);
                    command.Parameters.AddWithValue("@branch_code", BranchCode ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@touch_point", model.activities_touch_point ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@name", model.activities_name ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@description", model.activities_description ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@startdate", model.activities_startdate ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@duedate", model.activities_duedate ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@reminder_duedate", model.activities_reminder_duedate ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@assign_work", model.activities_assign_work ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@assign_work_type", "Activities" ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@allowagent", model.allowagent ?? false);
                    command.Parameters.AddWithValue("@record_status", true);
                    command.Parameters.AddWithValue("@created_by", username);
                    command.Parameters.AddWithValue("@created_date", today);
                    await command.ExecuteNonQueryAsync();
                }
                else
                {
                    TextProcess_Duplicate += "รหัสลูกค้า " + i + " มี " + old_staff + " รับผิดชอบแล้ว\n";
                    StateHasChanged();
                }


                
             
               
            }
            // Commit transaction
            await transaction.CommitAsync();
            TextProcess = "บันทึกข้อมูลระบบเรียบร้อยแล้ว";
            NotificationService.Notify(NotificationSeverity.Success, "สำเร็จ", "บันทึกข้อมูลสำเร็จ");
        }
        catch (Exception ex)
        {
            await transaction.RollbackAsync();
            TextProcess = $"Error: {ex.Message}";
            NotificationService.Notify(NotificationSeverity.Error, "ผิดพลาด", "การบันทึกข้อมูลล้มเหลว");
        
        }
        finally
        {
            await MySqlConnection.CloseAsync();
            btnDisable = true;
            runProcess_wait = false;
            StateHasChanged();
        }
  
    
    }


    #region grid product

    //  RadzenDataGrid<Products> ordersGrid;
    //  IEnumerable<Products> orders;
    //  DataGridEditMode editMode = DataGridEditMode.Single;
    //  List<Products> ordersToInsert = new List<Products>();
    //  List<Products> ordersToUpdate = new List<Products>();
    void Reset()
    {
        //   ordersToInsert.Clear();
        //  ordersToUpdate.Clear();
    }

    void Reset(Products order)
    {
        // ordersToInsert.Remove(order);
        //  ordersToUpdate.Remove(order);
    }


    async Task EditRow(Products order)
    {
        // if (editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)
        // {
        //     Reset();
        // }

        // ordersToUpdate.Add(order);
        // await ordersGrid.EditRow(order);
    }

    void OnUpdateRow(Products order)
    {
        Reset(order);

        //  dbContext.Update(order);

        // dbContext.SaveChanges();
    }

    async Task SaveRow(Products order)
    {
        //  await ordersGrid.UpdateRow(order);
    }

    void CancelEdit(Products order)
    {
        Reset(order);

        // ordersGrid.CancelEditRow(order);

        // var orderEntry = dbContext.Entry(order);
        // if (orderEntry.State == EntityState.Modified)
        // {
        //     orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //     orderEntry.State = EntityState.Unchanged;
        // }
    }

    async Task DeleteRow(Products order)
    {
        // Reset(order);

        // if (orders.Contains(order))
        // {
        //        dbContext.Remove<Products>(order);

        //     dbContext.SaveChanges();

        //     await ordersGrid.Reload();
        // }
        // else
        // {
        //     ordersGrid.CancelEditRow(order);
        //     await ordersGrid.Reload();
        // }
    }

    async Task InsertRow()
    {
        // if (editMode == DataGridEditMode.Single)
        // {
        //     Reset();
        // }

        // var order = new Products();
        // ordersToInsert.Add(order);
        // await ordersGrid.InsertRow(order);
    }

    void OnCreateRow(Products order)
    {
        //    dbContext.Add(order);

        //  dbContext.SaveChanges();

        // ordersToInsert.Remove(order);
    }


    #endregion

    private static readonly string[] data_channels = new[]
      {
           "Up-Sale", "Re-Sale","ลูกค้าขุด","Cross-Sale"
      };


    void OnChange(int index)
    {

    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        datachannel = data_channels;

        model.activities_touch_point = "";

        countcustomer = SharedState.SelectedCustomerIDs.Count().ToString();




        // orders = dbContext.Orders.Include("Customer").Include("Employee");
        // List<Products> prders = new List<Products>
        // {
        //     new Products { Code = "P001", Name = "Product 1", Price = 100 ,SalePrice=100 },
        //     new Products { Code = "P002", Name = "Product 2", Price = 200 ,SalePrice=150 },
        //     new Products { Code = "P003", Name = "Product 3", Price = 150 ,SalePrice=100 },
        //     new Products { Code = "P004", Name = "Product 4", Price = 99 ,SalePrice=99 },
        //     new Products { Code = "P005", Name = "Product 5", Price = 250 ,SalePrice=250 }
        // };
        // orders = prders.ToList();


        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            username = user.Identity.Name;
            _BranchCode = user.Claims.Where(c => c.Type == ClaimTypes.Locality).Select(c => c.Value);
            BranchCode = _BranchCode.FirstOrDefault();
        }
        else
        {
            username = "";
            BranchCode = "";
        }


        await LoadUsers();

    }


    protected override async Task OnParametersSetAsync()
    {
        countcustomer = SharedState.SelectedCustomerIDs.Count().ToString();
        await base.OnParametersSetAsync();
    }

    private async Task LoadUsers()
    {
        string connectionString = Configuration.GetConnectionString("DefaultConnection");
        using MySqlConnection connection = new MySqlConnection(connectionString);
        await connection.OpenAsync();

        using MySqlCommand command = new MySqlCommand(
            @"SELECT id, username, firstname, lastname 
            FROM mas_users u WHERE u.organization = @organization AND u.role IN ('User', 'Supervisor')",
            connection);

        command.Parameters.AddWithValue("@organization", BranchCode); // replace with actual organization value

        using (MySqlDataReader reader = (MySqlDataReader)await command.ExecuteReaderAsync())
        {
            while (await reader.ReadAsync())
            {
                Assignworks.Add(new Assignwork
                    {
                        Id = "xx",
                        Username = reader.GetString("username"),
                        FirstName = reader.GetString("firstname"),
                        LastName = reader.GetString("lastname"),
                        FullName = $"{reader.GetString("firstname")} - {reader.GetString("username")}"
                    });
            }
        }
    }

    private async Task CheckDuplicateUsersAsync(string customer_code)
    {
        old_staff = "";
        try
        {
           // await MySqlConnection.OpenAsync();
            string query = @"SELECT ca.assign_work  FROM crm_activitys ca 
     WHERE ca.branch_code = @BranchCode 
     and ca.customer_code = @customer_code 
     order by ca.created_date desc LIMIT 1";
            using (var cmd = new MySqlCommand(query, MySqlConnection))
            {
                cmd.Parameters.AddWithValue("@BranchCode", BranchCode);
                cmd.Parameters.AddWithValue("@customer_code", customer_code);
                using (var reader = await cmd.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync()) // ตรวจสอบว่ามีข้อมูลหรือไม่
                    {
                        old_staff = reader["assign_work"]?.ToString() ?? ""; // เก็บข้อมูลหากพบ
                    }
                    else
                    {
                        old_staff = ""; // กำหนดค่าเมื่อไม่พบข้อมูล
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching assign_work: {ex.Message}");
            old_staff = ""; // กำหนดค่าเมื่อเกิดข้อผิดพลาด
        }
        finally
        {
           // await MySqlConnection.CloseAsync();
        }
    }

}
