@page "/adminproduct"
@using BlazorApp_TeleCRM.Data
@using static BlazorApp_TeleCRM.Controller.ProductAdminController

@inject IConfiguration Configuration
@inject HttpClient Http
@inject DialogService DialogService

<PageTitle>ข้อมูลกิจกรรม</PageTitle>

<div class="rz-6">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Text="CRM - Admin" />
        <RadzenBreadCrumbItem Path="/adminproduct" Text="สินค้า" />
    </RadzenBreadCrumb>
    <RadzenText TextStyle="TextStyle.DisplayH5">ข้อมูลสินค้า</RadzenText>
</div>



@* <div class="rz-col-12">
    <div class="rz-card rz-variant-flat rz-background-color-info-lighter">
        <b>ค้นหา</b>
        <RadzenRow Gap="1rem">
            <RadzenColumn>
                <RadzenLabel Text="วันที่สร้างกิจกรรม " Component="RadzenDatePickerBindValue" />
                <RadzenDatePicker @bind-Value=@value Name="RadzenDatePickerBindValue" ShowCalendarWeek />
            </RadzenColumn>
            <RadzenColumn>
                <RadzenLabel Text="ถึงวันที่ " Component="RadzenDatePickerBindValue" />
                <RadzenDatePicker @bind-Value=@value Name="RadzenDatePickerBindValue" ShowCalendarWeek />
            </RadzenColumn>
            <RadzenColumn>
                <RadzenButton style="width: 100px" Icon="search" Variant="Variant.Flat" Text="ค้นหา" />
                <RadzenButton style="width: 100px" Icon="autorenew" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Light" Text="ล้าง" />
            </RadzenColumn>
            <RadzenColumn > 
      </RadzenColumn>
        </RadzenRow>

    </div>
</div> *@

<RadzenCard Variant="Variant.Outlined" class="rz-my-4">
    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
        </RadzenStack>

        <!-- Upload button aligned to the right -->
        <RadzenButton style="width: 200px" Icon="add_circle" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Success" Text="เพิ่มสินค้า" Click=@OpenUpload />
    </RadzenStack>
</RadzenCard>


<RadzenDataGrid TItem="Products" Data="@activitys" PagerPosition="PagerPosition.Bottom"
                FilterMode="FilterMode.SimpleWithMenu" PageSize="10"
                SelectionMode="DataGridSelectionMode.Single"
                @bind-Value=@selectedActivity
                AllowFiltering="true" AllowPaging="true" AllowColumnResize="true"
                AllowSorting="true" ColumnWidth="300px">
    <Columns>

        <RadzenDataGridColumn Width="60px" Filterable="false" Property="@nameof(Products.Code)" Title="">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Light" Click="@(args => OpenSideDialog(data.Code))" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="manage_search" class="rz-m-1" />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="100px" Filterable="false" Property="Activity_ID" Title="">
            <Template Context="data">
                <RadzenImage Path="/products/product001.png" Style="width: 60px; height: 60px;" class="rz-border-radius-2" AlternateText="" />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Products" Property="@nameof(Products.Code)" Width="100px" Title="รหัสสินค้า" />
        <RadzenDataGridColumn TItem="Products" Property="@nameof(Products.Name)" Width="180px" Title="ชื่อสินค้า" />
        <RadzenDataGridColumn TItem="Products" Property="@nameof(Products.Price)" Width="150px" Title="ราคาสินค้า" />
    </Columns>
</RadzenDataGrid>


@code {
    bool isDialogOpen = false;
    DateTime? value = DateTime.Now;
    private IEnumerable<Products> activitys;
    IList<Products> selectedActivity;

    protected override async Task OnInitializedAsync()
    {
        var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

        // Use the BaseApiUrl to call the API
        activitys = await Http.GetFromJsonAsync<IEnumerable<Products>>($"{baseApiUrl}/api/ProductAdmin");

        selectedActivity = new List<Products>() { activitys.FirstOrDefault() };
    }


    async Task OpenUpload()
    {
        if (isDialogOpen)
        {
            DialogService.Close();
            // await Task.Delay(200);
        }
        StateHasChanged();
        await DialogService.OpenSideAsync<DialogCardPageProduct>(
            "สินค้า",
            new Dictionary<string, object>
                                            {
            { "OrderID", "New" }
                                            },
            new SideDialogOptions
                {
                    CloseDialogOnOverlayClick = true,
                    Position = DialogPosition.Right,
                    ShowMask = false,
                    Width = "850px"
                });

        isDialogOpen = true;
    }



    async Task OpenSideDialog(string ActID)
    {

        if (isDialogOpen)
        {
            DialogService.Close();
            // await Task.Delay(200);
        }
        StateHasChanged();
        await DialogService.OpenSideAsync<DialogCardPageProduct>(
            "สินค้า",
            new Dictionary<string, object>
                                    {
            { "OrderID", ActID }
                                    },
            new SideDialogOptions
                {
                    CloseDialogOnOverlayClick = true,
                    Position = DialogPosition.Right,
                    ShowMask = false,
                    Width = "850px"
                });
        isDialogOpen = true;
    }
}