@page "/DialogCardPageCustomerCreateActivity/{UploadID}"
@using System.ComponentModel.DataAnnotations
@using BlazorApp_TeleCRM.Data
@using BlazorApp_TeleCRM.Service
@using static BlazorApp_TeleCRM.Components.Pages.UploadJob
@using Microsoft.EntityFrameworkCore
@inject IConfiguration Configuration
@inject Radzen.DialogService dialogService
@inject HttpClient Http


<RadzenStack Gap="1rem" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">

    <RadzenCard Variant="Variant.Outlined">

        <RadzenTabs @bind-SelectedIndex=@selectedIndex Change=@OnChange>
            <Tabs>
                <RadzenTabsItem Text="กิจกรรม">
                  <RadzenTemplateForm TItem="Model" Data=@model Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="6" SizeMD="6">
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">รหัสกิจกรรม <span class="rz-messages-error">*</span> </RadzenText>
                            <RadzenTextBox Style="width: 100%" Disabled="true" AutoComplete="false" @bind-Value=@ID />
                        </RadzenColumn>
                        <RadzenColumn Size="6" SizeMD="6">
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Touch Point <span class="rz-messages-error">*</span> </RadzenText>
                                <RadzenDropDown @bind-Value=@model.activities_touch_point style="display:block;width:100%"
                                                Data=@datachannel Name="activities_touch_point" class="w-100" />
                                <RadzenRequiredValidator Component="activities_touch_point" Text="เลือก Touch Point" Style="position: absolute" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">ชื่อกิจกรรม <span class="rz-messages-error">*</span> </RadzenText>
                                <RadzenTextBox Name="activities_name" style="display: block;width: 100%"
                                               @bind-Value=@model.activities_name AutoComplete="false" class="w-100" />
                                <RadzenRequiredValidator Component="activities_name" Text="กรอกชื่อกิจกรรม" Style="position: absolute" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="12">
                            <RadzenText TextStyle="TextStyle.Caption">รายละเอียด</RadzenText>
                            <RadzenTextBox Style="width: 100%" AutoComplete="false" />
                        </RadzenColumn>

                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Caption">วันที่เริ่มจ่ายงาน</RadzenText>
                            <RadzenDatePicker @bind-Value=@datevalue Name="RadzenDatePickerBindValue" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="dd/MM/yyyy HH:mm" />
                        </RadzenColumn>
                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Caption">วันที่ครบกำหนด</RadzenText>
                            <RadzenDatePicker @bind-Value=@datevalue Name="RadzenDatePickerBindValue" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="dd/MM/yyyy HH:mm" />
                        </RadzenColumn>
                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Caption">แจ้งใกล้ครบกำหนด</RadzenText>
                            <RadzenDatePicker @bind-Value=@datevalue Name="RadzenDatePickerBindValue" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="dd/MM/yyyy HH:mm" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="12">
                            <RadzenText TextStyle="TextStyle.Caption">มอบหมายให้กับพนักงาน</RadzenText>
                            <RadzenDropDown @bind-Value=@staff Style="width: 100%" Data=@datastaff Name="DropDownBindValue" Multiple=true AllowClear=true />

                        </RadzenColumn>


                        <RadzenColumn Size="4" SizeMD="4">
                            <RadzenText TextStyle="TextStyle.Caption">จำนวนลูกค้าที่เลือกทั้งหมด</RadzenText>
                            <RadzenTextBox @bind-Value=@countcustomer Style="width: 100%" AutoComplete="false" />
                        </RadzenColumn>
                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" AlignItems="AlignItems.End" Wrap="FlexWrap.NoWrap" JustifyContent="JustifyContent.Right">

                                <RadzenText TextStyle="TextStyle.Caption">ฝากงานให้นายหน้า</RadzenText>
                                <RadzenCheckBox @bind-Value=@allowRowSelectOnRowClick Name="CheckBox1" />
                            </RadzenStack>
                        </RadzenColumn>




                        <RadzenColumn Size="12" SizeMD="12">
                                <RadzenButton Text="บันทึก" Disabled="@btnDisable" ButtonType="ButtonType.Submit" Style="margin-top:15px" ButtonStyle="ButtonStyle.Primary" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="12">
                            <RadzenCard Variant="Variant.Outlined" style="background-color:#CBE2F5; height:150px">
                                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                    <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium">
                                        <Template>Wait</Template>
                                    </RadzenProgressBarCircular>
                                    <RadzenText TextStyle="TextStyle.Caption">ระบบกำลังทำงาน</RadzenText>
                                </RadzenStack>
                            </RadzenCard>
                        </RadzenColumn>

                        <RadzenColumn Size="12" SizeMD="12">
                            <div>
                                หมายเหตุ <br />
                                <ul>
                                    <li>กรณที่เลือกสร้างแบบกิจกรรมระบบสร้างไอดี 1:1</li>
                                    <li> สร้างแบบแคมเปญระบบสร้างไอดีแบบกลุ่ม</li>
                                </ul>
                            </div>

                        </RadzenColumn>


                    </RadzenRow>
                    </RadzenTemplateForm>
                </RadzenTabsItem>
                <RadzenTabsItem Text="ขายสินค้า">
                    <RadzenRow Gap="1rem">


                        <RadzenDataGrid @ref="ordersGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="@editMode"
                                        Data="@orders" TItem="Products" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
                            <HeaderTemplate>
                                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="เพิ่มสินค้า" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)" />
                            </HeaderTemplate>
                            <Columns>
                             
                                <RadzenDataGridColumn Property="Code" Width="100px" Title="รหัสสินค้า">
                                    <EditTemplate Context="order">
                                        <RadzenTextBox @bind-Value="order.Code" Style="width:100px; display: block" Name="ProductCode" aria-label="" />
                                        <RadzenRequiredValidator Text="รหัสสินค้า" Component="ProductCode" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Property="@nameof(Products.Name)" Width="150px" Title="ชื่อสินค้า">
                                    <EditTemplate Context="order">
                                        <RadzenTextBox @bind-Value="order.Name" Style="width:150px; display: block" Name="ProductName" aria-label="" />
                                        <RadzenRequiredValidator Text="ชื่อสินค้า" Component="ProductName" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Property="@nameof(Products.Price)" Width="100px" Title="ราคาสินค้า">
                                    <EditTemplate Context="order">
                                        <RadzenNumeric ShowUpDown="false" @bind-Value="order.Price" Name="ProductPrice" Style="width:100%" Placeholder="ราคาสินค้า" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "ราคา" }})" />
                                            <RadzenRequiredValidator Text="ราคาสินค้า" Component="ProductPrice" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Property="@nameof(Products.SalePrice)" Width="100px" Title="ราคาขาย">
                                    <EditTemplate Context="order">
                                        <RadzenNumeric ShowUpDown="false" @bind-Value="order.SalePrice" Name="ProductSalePrice" Style="width:100%" Placeholder="ราคาขาย" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "ราคา" }})" />
                                        <RadzenRequiredValidator Text="ราคาขาย" Component="ProductSalePrice" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                              @*   <RadzenDataGridColumn Property="@nameof(Order.ShipCountry)" Title="ShipCountry">
                                    <EditTemplate Context="order">
                                        <RadzenTextBox @bind-Value="order.ShipCountry" Style="width:200px; display: block" Name="ShipCountry" aria-label="Enter ship country" />
                                        <RadzenRequiredValidator Text="ShipCountry is required" Component="ShipCountry" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Property="@nameof(Order.ShipCity)" Title="ShipCity">
                                    <EditTemplate Context="order">
                                        <RadzenTextBox @bind-Value="order.ShipCity" Style="width:200px; display: block" Name="ShipCity" aria-label="Enter ship city" />
                                        <RadzenRequiredValidator Text="ShipCity is required" Component="ShipCity" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn> *@
                                <RadzenDataGridColumn Context="order" Width="150px" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                                    <Template Context="order">
                                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                                        </RadzenButton>
                                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                                        </RadzenButton>
                                    </Template>
                                    <EditTemplate Context="order" >
                                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(order))" aria-label="Save">
                                        </RadzenButton>
                                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(order))" aria-label="Cancel">
                                        </RadzenButton>
                                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(order))" aria-label="Delete">
                                        </RadzenButton>
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>

                    </RadzenRow>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>


    </RadzenCard>


    @*   <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1.5rem">
    <RadzenButton Click="@((args) => dialogService.Close(true))" Variant="Variant.Outlined"
    Text="ปิด" Style="width: 120px;margin-bottom:20px" />
    </RadzenStack> *@
</RadzenStack>
@code {
    [Parameter] public string UploadID { get; set; }
    [Parameter] public List<string> customercode { get; set; }

    [Inject]
    public SharedStateService SharedState { get; set; }


    bool btnDisable = false;

    string ID = "Auto";
    string staff = "เลือกพนักงาน";
    string countcustomer = "0";

    bool allowRowSelectOnRowClick = false;

    int selectedIndex = 0;


    IEnumerable<string> datachannel;
    IEnumerable<string> datastaff;
    DateTime? datevalue;



    class Model
    {
        public string activities_name { get; set; }
        public string activities_touch_point { get; set; }
    }

    Model model = new Model();

    private void OnSubmit(Model model)
    {
        // if (channel == "" || channel == "เลือกแหล่งข้อมูล")
        // {
        //     isError = true;
        //     TextError = "กรุณาเลือกแหล่งข้อมูล";
        //     NotificationService.Notify(NotificationSeverity.Warning, "แจ้งเตือน", "กรุณาเลือกแหล่งข้อมูล");
        //     return;
        // }

        // if (excelData == null)
        // {
        //     isError = true;
        //     TextError = "กรุณานำไฟล์มาอัพโหลด";
        //     NotificationService.Notify(NotificationSeverity.Warning, "แจ้งเตือน", "กรุณานำไฟล์มาอัพโหลด");
        //     return;
        // }

        // SaveToDatabase();

    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
       // console.Log($"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}");
    }



    #region grid product

    RadzenDataGrid<Products> ordersGrid;
    IEnumerable<Products> orders;
    DataGridEditMode editMode = DataGridEditMode.Single;
    List<Products> ordersToInsert = new List<Products>();
    List<Products> ordersToUpdate = new List<Products>();
    void Reset()
    {
        ordersToInsert.Clear();
        ordersToUpdate.Clear();
    }

    void Reset(Products order)
    {
        ordersToInsert.Remove(order);
        ordersToUpdate.Remove(order);
    }


    async Task EditRow(Products order)
    {
        if (editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)
        {
            Reset();
        }

        ordersToUpdate.Add(order);
        await ordersGrid.EditRow(order);
    }

    void OnUpdateRow(Products order)
    {
        Reset(order);

        //  dbContext.Update(order);

        // dbContext.SaveChanges();
    }

    async Task SaveRow(Products order)
    {
        await ordersGrid.UpdateRow(order);
    }

    void CancelEdit(Products order)
    {
        Reset(order);

        ordersGrid.CancelEditRow(order);

        // var orderEntry = dbContext.Entry(order);
        // if (orderEntry.State == EntityState.Modified)
        // {
        //     orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //     orderEntry.State = EntityState.Unchanged;
        // }
    }

    async Task DeleteRow(Products order)
    {
        Reset(order);

        if (orders.Contains(order))
        {
            //    dbContext.Remove<Products>(order);

            //  dbContext.SaveChanges();

            await ordersGrid.Reload();
        }
        else
        {
            ordersGrid.CancelEditRow(order);
            await ordersGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var order = new Products();
        ordersToInsert.Add(order);
        await ordersGrid.InsertRow(order);
    }

    void OnCreateRow(Products order)
    {
        //    dbContext.Add(order);

        //  dbContext.SaveChanges();

        ordersToInsert.Remove(order);
    }


    #endregion

    private static readonly string[] data_channels = new[]
      {
           "Up-Sale", "Re-Sale","ลูกค้าขุด"
      };

    private static readonly string[] data_staff = new[]
       {
           "เลือกพนักงาน", "พนักงาน A", "พนักงาน B","พนักงาน C", "ทีม A", "ทีม B","ทีม C"
      };


    void OnChange(int index)
    {

    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        datachannel = data_channels;
        datastaff = data_staff;

        model.activities_touch_point = "";


        //  countcustomer = customercode.Count().ToString();
        countcustomer = SharedState.SelectedCustomerIDs.Count().ToString();


        // orders = dbContext.Orders.Include("Customer").Include("Employee");
        List<Products> prders = new List<Products>
        {
            new Products { Code = "P001", Name = "Product 1", Price = 100 ,SalePrice=100 },
            new Products { Code = "P002", Name = "Product 2", Price = 200 ,SalePrice=150 },
            new Products { Code = "P003", Name = "Product 3", Price = 150 ,SalePrice=100 },
            new Products { Code = "P004", Name = "Product 4", Price = 99 ,SalePrice=99 },
            new Products { Code = "P005", Name = "Product 5", Price = 250 ,SalePrice=250 }
        };
        orders = prders.ToList();
    }

    private async Task OnFetchData()
    {
        // ตัวอย่าง: เรียกค่าพารามิเตอร์ใหม่ หรือดึงข้อมูลใหม่
        Console.WriteLine($"UploadID: {UploadID}");
        Console.WriteLine($"Customer Codes: {string.Join(", ", customercode)}");

        countcustomer = SharedState.SelectedCustomerIDs.Count().ToString();
        StateHasChanged();

        // คุณสามารถดึงข้อมูลใหม่จาก API หรือทำงานเพิ่มเติมที่นี่ได้
        // เช่น await LoadDataAsync(); เป็นต้น
    }


    protected override async Task OnParametersSetAsync()
    {
        // // จะถูกเรียกทุกครั้งที่พารามิเตอร์ถูกส่งเข้ามาหรือเปลี่ยนแปลง
        // Console.WriteLine($"UploadID: {UploadID}");
        // Console.WriteLine($"Customer Codes: {string.Join(", ", customercode)}");

        // // ถ้าต้องการให้ re-render หน้าจอใหม่
        //  countcustomer = customercode.Count().ToString();
        countcustomer = SharedState.SelectedCustomerIDs.Count().ToString();
        await base.OnParametersSetAsync();

    }


    void OnProgress(UploadProgressArgs args, string name)
    {
        // console.Log($"{args.Progress}% '{name}' / {args.Loaded} of {args.Total} bytes.");

        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {
                //  console.Log($"Uploaded: {file.Name} / {file.Size} bytes");
            }
        }
    }

}
