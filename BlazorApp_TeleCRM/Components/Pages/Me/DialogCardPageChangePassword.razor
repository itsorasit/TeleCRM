@page "/DialogCardPageChangePassword/{UId}"
@using System.ComponentModel.DataAnnotations
@using Azure.Storage.Blobs
@using BlazorApp_TeleCRM.Data
@using BlazorApp_TeleCRM.Helper
@using BlazorApp_TeleCRM.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using MySql.Data.MySqlClient
@using static BlazorApp_TeleCRM.Components.Pages.Console.Console
@inject IConfiguration Configuration
@inject Radzen.DialogService dialogService
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UtilityConvet utility;
@inject NotificationService NotificationService
@inject MySqlConnection MySqlConnection

<RadzenTemplateForm TItem="User" Data="@user" Submit="@HandleValidSubmit">
     
    
    <div style="margin-top:20px">
        <RadzenLabel Text="รหัสผ่าน" />
        <RadzenPassword Name="Password" @bind-Value=@user.password Style="display: block; width: 100%" class="w-100" />
        <RadzenRequiredValidator Component="Password" Text="ใส่รหัสผ่าน" Style="position: absolute" />
    </div>

    <div style="margin-top:20px">
        <RadzenLabel Text="ยืนยันรหัสผ่าน" />
        <RadzenPassword Name="RepeatPassword" @bind-Value=@RepeatPassword Style="display: block; width: 100%" />
        <RadzenRequiredValidator Component="RepeatPassword" Text="ยืนยันรหัสผ่าน" Style="position: absolute" />
        <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(RepeatPassword)) Value=@user.password Component="RepeatPassword" Text="รหัสผ่านไม่เหมือนกัน" Style="position: absolute" />
    </div>

    <div style="margin-top:20px">
    <RadzenButton Text="บันทึก" Style="margin-top: 10px;" ButtonType="ButtonType.Submit" />
    </div>
</RadzenTemplateForm>

@code {
    [Parameter] public int? UId { get; set; }


    private string? RepeatPassword { get; set; }

    private string? username;
    bool isEdit = false;
    private string? BranchCode { get; set; }
    private IEnumerable<string>? _BranchCode;


    private User user = new User();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            username = user.Identity.Name;
            _BranchCode = user.Claims.Where(c => c.Type == ClaimTypes.Locality).Select(c => c.Value);
            BranchCode = _BranchCode.FirstOrDefault();
        }
        else
        {
            username = "";
            BranchCode = "";
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (UId!=null)
        {
            isEdit = true;
            var me = await LoadData();
            user.id = me.id;
            user.username = me.username;
        }

    }




    private async Task HandleValidSubmit()
    {
    
        await UpdateUserAsync(user);
      
    }

    private async Task UpdateUserAsync(User u)
    {
        try
        {
          
            if (string.IsNullOrEmpty(u.imageurl))
            {
                u.imageurl = "user/profile.png";
            }


            await MySqlConnection.OpenAsync();

            using var command = new MySqlCommand(
                @"UPDATE mas_users SET password=@password ,loginkey='' , lastlogin=null 
                  WHERE username = @username and organization = @organization",
                MySqlConnection);

            command.Parameters.AddWithValue("@username", username);
            command.Parameters.AddWithValue("@organization", BranchCode);
            command.Parameters.AddWithValue("@password", u.password);
       
            await command.ExecuteNonQueryAsync();

            NotificationService.Notify(NotificationSeverity.Success, "สำเร็จ", "อัปเดตข้อมูลสำเร็จ");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Error saving branch: {ex.Message}");
        }
        finally
        {
            await MySqlConnection.CloseAsync();
        }
    }




    public async Task<User> LoadData()
    {
        // คำสั่ง SQL ที่จะดำเนินการ
        string query = @"SELECT id, username, email, password, firstname, lastname, `role`, 
         organization, loginkey, lastlogin, imageurl 
         FROM mas_users 
         WHERE username = @username and organization = @organization";

        // สร้างออบเจ็กต์ Branch เพื่อเก็บผลลัพธ์
        User me = new User();

        try
        {
            await MySqlConnection.OpenAsync();
            // สร้างการเชื่อมต่อกับฐานข้อมูล
            using (var command = new MySqlCommand(query, MySqlConnection))
            {
                // เพิ่มพารามิเตอร์ @code
                command.Parameters.AddWithValue("@username", username);
                command.Parameters.AddWithValue("@organization", BranchCode);

                // ดำเนินการอ่านข้อมูล
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        me.id = Convert.ToInt32(reader["id"]);
                        me.username = reader["username"]?.ToString();
                        me.email = reader["email"]?.ToString();
                        me.password = reader["password"]?.ToString();
                        me.firstname = reader["firstname"]?.ToString();
                        me.lastname = reader["lastname"]?.ToString();
                        me.role = reader["role"]?.ToString();
                        me.organization = reader["organization"]?.ToString();
                        me.loginkey = reader["loginkey"]?.ToString();
                        me.lastlogin = reader["lastlogin"] != DBNull.Value ? Convert.ToDateTime(reader["lastlogin"]) : (DateTime?)null;

                        if (!string.IsNullOrEmpty(reader["imageurl"]?.ToString()))
                        {
                            me.imageurl = reader["imageurl"]?.ToString();
                        }
                        else
                        {
                            me.imageurl = "user/profile.png";
                        }
                    }
                }

                await MySqlConnection.CloseAsync();
            }
        }
        catch (Exception ex)
        {
            await MySqlConnection.CloseAsync();
        }

        return me;
    }

    public class Branch
    {
        public string? code { get; set; }
        public string? name { get; set; }
        public int? level { get; set; }
        public string? parent_code { get; set; }
        public string? created_by { get; set; }
        public string? imageurl { get; set; }
        public DateTime? created_date { get; set; }
    }
}
