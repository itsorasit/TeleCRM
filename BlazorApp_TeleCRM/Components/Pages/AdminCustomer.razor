@page "/admincustomer"
@using BlazorApp_TeleCRM.Data
@using BlazorApp_TeleCRM.Service
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using static BlazorApp_TeleCRM.Controller.CustomerAdminController
@inject IConfiguration Configuration
@inject HttpClient Http
@inject DialogService DialogService
@inject SharedStateService SharedState
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>ข้อมูลรายชื่อลูกค้า</PageTitle>

<div class="rz-6">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem  Text="CRM - Admin" />
        <RadzenBreadCrumbItem Path="/uploadjob" Text="ข้อมูลลูกค้า" />
    </RadzenBreadCrumb>
    <RadzenText TextStyle="TextStyle.DisplayH5">ข้อมูลรายชื่อลูกค้า</RadzenText>
</div>

<AuthorizeView>

<div class="rz-col-12 ">
        <RadzenCard Variant="Variant.Outlined" class="rz-info rz-shade-lighte" Style="padding: 1rem;">
        <strong>ค้นหา</strong>
        <RadzenRow Gap="1rem"  JustifyContent="JustifyContent.Start" Class="rz-mt-2">
            <RadzenColumn Size="3">
                <RadzenLabel Text="อัพโหลดวันที่" Component="UploadDatePicker" />
                <RadzenDatePicker @bind-Value="UploadDateFrom" Name="UploadDatePicker" DateFormat="dd/MM/yyyy" ShowCalendarWeek="true" Style="width: 100%;" />
            </RadzenColumn>
            <RadzenColumn Size="3">
                <RadzenLabel Text="ถึงวันที่" Component="UploadDateToPicker" />
                    <RadzenDatePicker @bind-Value="UploadDateTo" Name="UploadDateToPicker" DateFormat="dd/MM/yyyy" ShowCalendarWeek="true" Style="width: 100%;" />
            </RadzenColumn>
            <RadzenColumn Size="3">
                <br />
                <RadzenButton Text="ค้นหา" Icon="search" Variant="Variant.Flat" Style="width: 100px; margin-right: 0.5rem;" Click="@OnSearch" />
                <RadzenButton Text="ล้าง" Icon="autorenew" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Secondary" Style="width: 100px;" Click="@OnClear" />
            </RadzenColumn>
        </RadzenRow>
        
       <br />
        
        <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Start" Class="rz-mt-2">
            <RadzenColumn Size="2">
                <RadzenLabel Text="กิจกรรมยังดำเนินการอยู่" Component="ActivityStatusCheckbox" />
                <RadzenCheckBox @bind-Value="IsActivityOngoing" Name="ActivityStatusCheckbox" />
            </RadzenColumn>
            <RadzenColumn Size="2">
                <RadzenLabel Text="รหัสกิจกรรม/แคมเปญ" Component="ActivityCodeTextBox" />
                <RadzenTextBox @bind-Value="ActivityCode" Name="ActivityCodeTextBox" Placeholder="กรุณากรอกรหัส" Style="width: 250px;" />
            </RadzenColumn>
            <RadzenColumn Size="2">
                <RadzenLabel Text="ชื่อกิจกรรม/แคมเปญ" Component="ActivityNameTextBox" />
                <RadzenTextBox @bind-Value="ActivityName" Name="ActivityNameTextBox" Placeholder="กรุณากรอกชื่อ" Style="width: 250px;" />
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
</div>

<RadzenCard Variant="Variant.Outlined" class="rz-my-4">
    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
             <RadzenCheckBox @bind-Value=@allowRowSelectOnRowClick Name="CheckBox1" />
            <RadzenLabel Text="" Component="CheckBox1" />
                <RadzenButton Icon="clear_all" ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Flat" Click="@(args => selectedCustomer = null)" />
                <RadzenButton Text="สร้างกิจกรรม" ButtonStyle="ButtonStyle.Info" Click="@OpenSideDialog" />
                <RadzenButton Text="สร้างแคมเปญ" ButtonStyle="ButtonStyle.Info" Click="@OpenSideDialog2" />
            </RadzenStack>

        <!-- Upload button aligned to the right -->
        <RadzenButton style="width: 200px" Icon="upload" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Success" Text="อัพโหลดรายชื่อลูกค้า" Click=@OpenUpload />
    </RadzenStack>
</RadzenCard>

    <RadzenProgressBarCircular @bind-Visible="runProcess_wait" ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium">
        <Template>โหลด</Template>
    </RadzenProgressBarCircular>


    <RadzenDataGrid @ref="grid" TItem="CustomerDataList" Data="@cus_datas" PagerPosition="PagerPosition.Bottom"
                 AllowRowSelectOnRowClick="@allowRowSelectOnRowClick"
                FilterMode="FilterMode.SimpleWithMenu" PageSize="10"
                SelectionMode="DataGridSelectionMode.Multiple"
                @bind-Value=@selectedCustomer
                AllowFiltering="true" AllowPaging="true" AllowColumnResize="true"
                AllowSorting="true" ColumnWidth="300px">
    <Columns>
        <RadzenDataGridColumn Width="60px" Sortable="false" Filterable="false">
            <HeaderTemplate>
                <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})"
                                Value="@(selectedCustomer == null || selectedCustomer?.Any() != true ? false : !cus_datas.All(i => selectedCustomer.Contains(i)) ? null : cus_datas.Any(i => selectedCustomer.Contains(i)))"
                                Change="@(args => selectedCustomer = args == true ? cus_datas.ToList() : null)" />
            </HeaderTemplate>
            <Template Context="data">
                <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(selectedCustomer != null && selectedCustomer.Contains(data))" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})"
                                TValue="bool" Change=@(args => { if(!allowRowSelectOnRowClick) { grid.SelectRow(data); }}) />
            </Template>
        </RadzenDataGridColumn>


        <RadzenDataGridColumn Width="60px" Filterable="false" Property="@nameof(CustomerDataList.guid)" >
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="manage_search" class="rz-m-1" />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="CustomerDataList"  Property="@nameof(CustomerDataList.code)" Width="180px" Title="รหัสลูกค้า" />
        <RadzenDataGridColumn TItem="CustomerDataList" Property="@nameof(CustomerDataList.datasource_platform)" Width="120px" Title="แหล่งข้อมูล" />
        <RadzenDataGridColumn TItem="CustomerDataList" Property="@nameof(CustomerDataList.name)" Width="200px" Title="ชื่อลูกค้า" />
        <RadzenDataGridColumn TItem="CustomerDataList" Property="@nameof(CustomerDataList.phone)" Width="180px" Title="เบอร์โทรศัพท์" />
        <RadzenDataGridColumn TItem="CustomerDataList" Property="@nameof(CustomerDataList.province)" Width="130px" Title="จังหวัด" />
        <RadzenDataGridColumn TItem="CustomerDataList" Property="@nameof(CustomerDataList.count_activity)" Width="180px" Title="กิจกรรม" />
        <RadzenDataGridColumn TItem="CustomerDataList" Property="@nameof(CustomerDataList.activity_lastdate)" Width="158px" Title="กิจกรรมล่าสุด" />
    @*     <RadzenDataGridColumn TItem="CustomerDataList" Property="Remark1" Title="หมายเหตุ" Width="150px" /> *@
        <RadzenDataGridColumn TItem="CustomerDataList"  Property="@nameof(CustomerDataList.modified_by)" Width="180px" Title="ผู้อัพโหลด" />
        <RadzenDataGridColumn TItem="CustomerDataList"  Property="@nameof(CustomerDataList.modified_date)" Width="180px" Title="อัพโหลดวันที่" />
     
    </Columns>
</RadzenDataGrid>

</AuthorizeView>



@code {

    bool runProcess_wait = false;

    bool isDialogOpen = false;
    bool allowRowSelectOnRowClick = true;
    DateTime? value = DateTime.Now;

    bool value1 = false;

    private IEnumerable<CustomerDataList> cus_datas;
    IList<CustomerDataList> selectedCustomer;
    RadzenDataGrid<CustomerDataList> grid;

    private List<string> SelectedCustomerIDs = new List<string>();

    private DateTime? UploadDateFrom { get; set; }
    private DateTime? UploadDateTo { get; set; }
    private bool IsActivityOngoing { get; set; }
    private string ActivityCode { get; set; }
    private string ActivityName { get; set; }
    private string BranchCode { get; set; }
    private IEnumerable<string> _BranchCode;

    private async Task OnSearch()
    {
        // เรียกใช้เมธอด FetchCustomerDataAsync เพื่อค้นหาข้อมูลตามวันที่ที่เลือก
        cus_datas = await FetchCustomerDataAsync(this.UploadDateFrom, this.UploadDateTo);

        if (cus_datas != null && cus_datas.Any())
        {
            selectedCustomer = new List<CustomerDataList>() { cus_datas.FirstOrDefault() };
        }

        // บังคับให้ UI อัปเดตใหม่
        StateHasChanged();
    }

    private async Task OnClear()
    {
        // Reset all filters
        UploadDateFrom = null;
        UploadDateTo = null;
        IsActivityOngoing = false;
        ActivityCode = string.Empty;
        ActivityName = string.Empty;

        // เรียกใช้เมธอด FetchCustomerDataAsync เพื่อค้นหาข้อมูลตามวันที่ที่เลือก
        cus_datas = await FetchCustomerDataAsync(this.UploadDateFrom, this.UploadDateTo);

        if (cus_datas != null && cus_datas.Any())
        {
            selectedCustomer = new List<CustomerDataList>() { cus_datas.FirstOrDefault() };
        }

        // บังคับให้ UI อัปเดตใหม่
        StateHasChanged();
    }



    async Task Update()
    {
        SelectedCustomerIDs.Clear();
        if (selectedCustomer != null)
        {
            foreach (var customer in selectedCustomer)
            {
                SelectedCustomerIDs.Add(customer.guid.ToString());
            }
        }

        SharedState.SelectedCustomerIDs = SelectedCustomerIDs;

        StateHasChanged();  // บังคับให้ UI อัปเดตใหม่
    }

    async Task OpenUpload()
    {
        await DialogService.OpenAsync<DialogCardPageUploadCustomer>($"อัพโหลดรายชื่อลูกค้า",
              new Dictionary<string, object>() { { "UploadID", 1 } },
            new DialogOptions()
                {
                    Width = "800px",
                    Height = "600px",
                    CloseDialogOnOverlayClick = false,  // Disable closing on clicking outside
                    CloseDialogOnEsc = false,           // Disable closing by pressing ESC
                    ShowClose = false                   // Remove the "X" close button
                });
    }

    async Task OpenSideDialog()
    {
        // ตรวจสอบว่ามี Dialog เปิดอยู่หรือไม่ ถ้าเปิดอยู่ ให้ปิดก่อน
        if (isDialogOpen)
        {
            DialogService.Close();  // ปิด Dialog
            await Task.Delay(200);  // หน่วงเวลาเพื่อให้ Dialog ถูกปิดสมบูรณ์
        }

        // ล้างค่า SelectedCustomerIDs แล้วเพิ่มค่าลูกค้าใหม่
        SelectedCustomerIDs.Clear();
        if (selectedCustomer!=null)
        {
            foreach (var customer in selectedCustomer)
            {
                SelectedCustomerIDs.Add(customer.guid.ToString());
            }
        }

        SharedState.SelectedCustomerIDs = SelectedCustomerIDs;

        StateHasChanged();  // บังคับให้ UI อัปเดตใหม่

        // เปิด Dialog ใหม่
        await DialogService.OpenSideAsync<DialogCardPageCustomerCreateActivity>(
            "สร้างกิจกรรม",
            new Dictionary<string, object>
                {
            { "UploadID", "Activity" },
            { "customercode", SelectedCustomerIDs }
                },
            new SideDialogOptions
                {
                    CloseDialogOnOverlayClick = true,
                    Position = DialogPosition.Right,
                    ShowMask = false,
                    Width = "850px"
                });

        // ตั้งค่าว่ามี Dialog เปิดอยู่
        isDialogOpen = true;


    }

    async Task OpenSideDialog2()
    {
        // ตรวจสอบว่ามี Dialog เปิดอยู่หรือไม่ ถ้าเปิดอยู่ ให้ปิดก่อน
        if (isDialogOpen)
        {
            DialogService.Close();  // ปิด Dialog
            await Task.Delay(200);  // หน่วงเวลาเพื่อให้ Dialog ถูกปิดสมบูรณ์
        }

        // ล้างค่า SelectedCustomerIDs แล้วเพิ่มค่าลูกค้าใหม่
        SelectedCustomerIDs.Clear();
        if (selectedCustomer != null)
        {
            foreach (var customer in selectedCustomer)
            {
                SelectedCustomerIDs.Add(customer.guid.ToString());
            }
        }

        StateHasChanged();  // บังคับให้ UI อัปเดตใหม่

        // เปิด Dialog ใหม่สำหรับสร้างแคมเปญ
        await DialogService.OpenSideAsync<DialogCardPageCustomerCreateActivity>(
            "สร้างแคมเปญ",
            new Dictionary<string, object>
                {
            { "UploadID", "Campaign" },
            { "customercode", SelectedCustomerIDs }
                },
            new SideDialogOptions
                {
                    CloseDialogOnOverlayClick = true,
                    Position = DialogPosition.Right,
                    ShowMask = false,
                    Width = "850px"
                });

        // ตั้งค่าว่ามี Dialog เปิดอยู่
        isDialogOpen = true;


    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();


        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            //  username = user.Identity.Name;
            //  roles = user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value);
            _BranchCode = user.Claims.Where(c => c.Type == ClaimTypes.Locality).Select(c => c.Value);
            BranchCode = _BranchCode.FirstOrDefault();

        }
        else
        {
            // username = "Not authenticated";
            // roles = Enumerable.Empty<string>();
            BranchCode = "";
        }

       

        // เรียกใช้เมธอด FetchCustomerDataAsync เพื่อดึงข้อมูล
        cus_datas = await FetchCustomerDataAsync(this.UploadDateFrom, this.UploadDateTo);

        if (cus_datas != null && cus_datas.Any())
        {
            selectedCustomer = new List<CustomerDataList>() { cus_datas.FirstOrDefault() };
        }
    }


    public async Task<IEnumerable<CustomerDataList>> FetchCustomerDataAsync(DateTime? fdate, DateTime? ldate)
    {
        try
        {

            // เปิด DialogService เพื่อแจ้งว่ากำลังโหลด
            runProcess_wait = true;
            StateHasChanged(); // บังคับ UI อัปเดต

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                fdate = fdate,
                ldate = ldate,
                branch_code = BranchCode
            };

            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/CustomerAdmin", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                // แปลงข้อมูลที่ได้รับเป็น IEnumerable<CustomerDataList>
                var customerDataList = await response.Content.ReadFromJsonAsync<IEnumerable<CustomerDataList>>();
                return customerDataList;
            }
            else
            {
                Console.WriteLine("Error fetching customer data.");
                return Enumerable.Empty<CustomerDataList>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }
    
}