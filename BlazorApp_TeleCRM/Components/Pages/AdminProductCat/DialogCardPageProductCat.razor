@page "/DialogCardPageProductCat/{CatID}"
@using System.ComponentModel.DataAnnotations
@using Azure.Storage.Blobs
@using BlazorApp_TeleCRM.Data
@using BlazorApp_TeleCRM.Models
@using Microsoft.AspNetCore.Components.Authorization
@using MySql.Data.MySqlClient
@using System.Security.Claims
@using static BlazorApp_TeleCRM.Components.Pages.Job.Job
@inject IConfiguration Configuration
@inject Radzen.DialogService dialogService
@inject HttpClient Http
@inject IConfiguration Configuration
@inject Radzen.DialogService dialogService
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService
@inject MySqlConnection MySqlConnection

<RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
    <RadzenTabs @bind-SelectedIndex=@selectedIndex Change=@OnChange>
        <Tabs>
            <RadzenTabsItem Text="ข้อมูลประเภทสินค้า">

                <RadzenTemplateForm TItem="mas_categorys" Data="@product" Submit="@HandleValidSubmit">
                    <div style="margin-top:20px">
                        <RadzenLabel Text="ชื่อประเภทสินค้า" /><span class="rz-messages-error">*</span>
                        <RadzenTextBox style="display: block;width: 100%" @bind-Value="product.category_name" Name="name" class="w-100" />
                        <RadzenRequiredValidator Component="name" Text="ใส่ชื่อประเภทสินค้า" Style="position: absolute" />
                    </div>
                    <div style="margin-top:20px">
                        <RadzenButton Text="บันทึก" Style="margin-top: 10px;" ButtonType="ButtonType.Submit" />
                    </div>
                </RadzenTemplateForm>



            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</RadzenStack>


@code {
    [Parameter] public string CatID { get; set; }


    int selectedIndex = 0;
    private mas_categorys product = new mas_categorys();
    private string UploadedFileUrl;

    private string? username;
    bool isEdit = false;
    private string? BranchCode { get; set; }
    private IEnumerable<string>? _BranchCode;

    private RadzenTemplateForm<mas_categorys> form;

    private List<MasCategorys> categorys = new();
    private string SearchText { get; set; }
    private RadzenDropDown<string> radzenDropDown;
    private string Filtering_Value = "";




    private async Task HandleValidSubmit()
    {

        if (string.IsNullOrEmpty(CatID))
        {
            product.guid = Guid.NewGuid().ToString();
            product.branch_code = BranchCode;

            await SaveProductAsync(product);
            product = new mas_categorys();
        }
        else
        {

            await UpdateProductAsync(product);
        }
    }



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            username = user.Identity.Name;
            _BranchCode = user.Claims.Where(c => c.Type == ClaimTypes.Locality).Select(c => c.Value);
            BranchCode = _BranchCode.FirstOrDefault();
        }
        else
        {
            username = "";
            BranchCode = "";
        }

    }


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            username = user.Identity.Name;
            _BranchCode = user.Claims.Where(c => c.Type == ClaimTypes.Locality).Select(c => c.Value);
            BranchCode = _BranchCode.FirstOrDefault();
        }
        else
        {
            username = "";
            BranchCode = "";
        }

        if (!string.IsNullOrEmpty(CatID))
        {
            isEdit = true;
            var b = await LoadData(CatID);
            product.guid = b.guid;
            product.category_name = b.category_name;
            product.branch_code = b.branch_code;

        }

    }



    void OnChange(int index)
    {

    }

    private void OnInvalidSubmit()
    {

    }

    private async Task SaveProductAsync(mas_categorys p)
    {
        try
        {

            await MySqlConnection.OpenAsync();

            using var command = new MySqlCommand(
                         @"INSERT INTO mas_categorys
                                (guid, branch_code, category_name)
                         VALUES (@guid,@branch_code, @category_name)",
                MySqlConnection);




            p.guid =  Guid.NewGuid().ToString();

            // Map Parameters
            command.Parameters.AddWithValue("@guid", p.guid);
            command.Parameters.AddWithValue("@branch_code", p.branch_code);
            command.Parameters.AddWithValue("@category_name", p.category_name);

            await command.ExecuteNonQueryAsync();

            NotificationService.Notify(NotificationSeverity.Success, "สำเร็จ", "อัปเดตข้อมูลสำเร็จ");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Error saving product: {ex.Message}");
        }
        finally
        {
            await MySqlConnection.CloseAsync();
        }
    }



    private async Task UpdateProductAsync(mas_categorys data)
    {
        try
        {

            await MySqlConnection.OpenAsync();

            using var command = new MySqlCommand(
                     @"UPDATE mas_categorys SET category_name=@category_name WHERE guid=@guid", MySqlConnection);

            command.Parameters.AddWithValue("@category_name", data.category_name);
            command.Parameters.AddWithValue("@guid", data.guid);
          
            await command.ExecuteNonQueryAsync();

            NotificationService.Notify(NotificationSeverity.Success, "สำเร็จ", "อัปเดตข้อมูลสำเร็จ");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Error saving Product: {ex.Message}");
        }
        finally
        {
            await MySqlConnection.CloseAsync();
        }
    }


    public async Task<mas_categorys> LoadData(string guid)
    {

        // คำสั่ง SQL ที่จะดำเนินการ
        string query = @"select guid, branch_code, category_name 
        FROM mas_categorys WHERE guid = @guid;";

        mas_categorys masProductions = null;

        try
        {
            await MySqlConnection.OpenAsync();
            // สร้างการเชื่อมต่อกับฐานข้อมูล
            using (var command = new MySqlCommand(query, MySqlConnection))
            {
                // เพิ่มพารามิเตอร์ @code
                command.Parameters.AddWithValue("@guid", guid);

                // ดำเนินการอ่านข้อมูล
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        masProductions = new mas_categorys
                            {
                                guid = reader["guid"].ToString(),
                                branch_code = reader["branch_code"].ToString(),
                                category_name = reader["category_name"].ToString()
                            };
                    }
                }

                await MySqlConnection.CloseAsync();
            }
        }
        catch (Exception ex)
        {
            await MySqlConnection.CloseAsync();
        }

        return masProductions;
    }

}
