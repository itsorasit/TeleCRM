@page "/DialogCardPageCustomerCampaign/{UploadID}"
@using System.ComponentModel.DataAnnotations
@using BlazorApp_TeleCRM.Components.Pages.AdminCustomer
@using BlazorApp_TeleCRM.Data
@using BlazorApp_TeleCRM.Service
@using static BlazorApp_TeleCRM.Controller.WeatherForecastController
@using static BlazorApp_TeleCRM.Components.Pages.UploadJob
@inject IConfiguration Configuration
@inject Radzen.DialogService dialogService
@inject HttpClient Http


<RadzenStack Gap="1rem" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">

    <RadzenCard Variant="Variant.Outlined">

        <RadzenTabs @bind-SelectedIndex=@selectedIndex Change=@OnChange>
            <Tabs>
                <RadzenTabsItem Text="ข้อมูลแคมเปญ">
                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="12">
                            <RadzenText TextStyle="TextStyle.Caption">ความคืบหน้า</RadzenText>
                            <RadzenButton Text="สำเร็จ (20)" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" class="rz-ripple" />
                            <RadzenButton Text="ติดตาม (20)" ButtonStyle="ButtonStyle.Warning" Variant="Variant.Flat" class="rz-ripple" />
                            <RadzenButton Text="รอดำเนินการ (30)" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" class="rz-ripple" />
                            <RadzenButton Text="เกินกำหนด (20)" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" class="rz-ripple" />
                            @*    <RadzenTextBox Style="width: 100%;font-size:large;background-color:lightblue"  ReadOnly="true"  AutoComplete="false" Value="สำเร็จ" /> *@
                        </RadzenColumn>
                        <RadzenColumn Size="12">
                            <RadzenText TextStyle="TextStyle.Caption">จำนวนผู้เข้าแคมเปญ</RadzenText>
                            <RadzenButton Text="100" ButtonStyle="ButtonStyle.Base" Variant="Variant.Outlined" class="rz-ripple" />
                        </RadzenColumn>


                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Caption">รหัสแคมเปญ</RadzenText>
                            <RadzenTextBox Style="width: 100%" AutoComplete="false" @bind-Value=@ID />
                        </RadzenColumn>
                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Caption">Point</RadzenText>
                            <RadzenDropDown @bind-Value=@channel Style="width: 100%" Data=@datachannel Name="DropDownBindValue" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="12">
                            <RadzenText TextStyle="TextStyle.Caption">ชื่อแคมเปญ</RadzenText>
                            <RadzenTextBox Style="width: 100%" AutoComplete="false" Value="Activity C" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="12">
                            <RadzenText TextStyle="TextStyle.Caption">รายละเอียด</RadzenText>
                            <RadzenTextBox Style="width: 100%" AutoComplete="false" Value="ทดสอบ" />
                        </RadzenColumn>

                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Caption">วันที่เริ่มจ่ายงาน</RadzenText>
                            <RadzenDatePicker @bind-Value=@datevalue Name="RadzenDatePickerBindValue" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="dd/MM/yyyy HH:mm" />
                        </RadzenColumn>
                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Caption">วันที่ครบกำหนด</RadzenText>
                            <RadzenDatePicker @bind-Value=@datevalue Name="RadzenDatePickerBindValue" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="dd/MM/yyyy HH:mm" />
                        </RadzenColumn>
                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Caption">แจ้งใกล้ครบกำหนด</RadzenText>
                            <RadzenDatePicker @bind-Value=@datevalue Name="RadzenDatePickerBindValue" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="dd/MM/yyyy HH:mm" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="12">
                            <RadzenText TextStyle="TextStyle.Caption">มอบหมายให้กับพนักงาน</RadzenText>
                            <RadzenDropDown @bind-Value=@staff Style="width: 100%" Data=@datastaff Name="DropDownBindValue" Multiple=true AllowClear=true />

                        </RadzenColumn>


                        <RadzenColumn Size="4" SizeMD="4">
                            <RadzenText TextStyle="TextStyle.Caption">จำนวนลูกค้าที่เลือกทั้งหมด</RadzenText>
                            <RadzenTextBox @bind-Value=@countcustomer Style="width: 100%" AutoComplete="false" />
                        </RadzenColumn>
                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" AlignItems="AlignItems.End" Wrap="FlexWrap.NoWrap" JustifyContent="JustifyContent.Right">

                                <RadzenText TextStyle="TextStyle.Caption">ฝากงานให้นายหน้า</RadzenText>
                                <RadzenCheckBox @bind-Value=@allowRowSelectOnRowClick Name="CheckBox1" />
                            </RadzenStack>
                        </RadzenColumn>


                        <RadzenColumn Size="12" SizeMD="12">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.SpaceBetween">
                                <RadzenButton Text="บันทึก" Style="margin-top:15px" ButtonStyle="ButtonStyle.Primary" />
                                <RadzenButton Text="ยกเลิก" Style="margin-top:15px" ButtonStyle="ButtonStyle.Secondary" />
                            </RadzenStack>
                        </RadzenColumn>

                        @* <RadzenColumn Size="12" SizeMD="12">
                        <RadzenCard Variant="Variant.Outlined" style="background-color:#CBE2F5; height:150px">
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                        <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium">
                        <Template>Wait</Template>
                        </RadzenProgressBarCircular>
                        <RadzenText TextStyle="TextStyle.Caption">ระบบกำลังทำงาน</RadzenText>
                        </RadzenStack>
                        </RadzenCard>
                        </RadzenColumn> *@

                        <RadzenColumn Size="12" SizeMD="12">
                            <div>
                                หมายเหตุ <br />
                                <ul>
                                    <li>กรณที่เลือกสร้างแบบกิจกรรมระบบสร้างไอดี 1:1</li>
                                    <li> สร้างแบบแคมเปญระบบสร้างไอดีแบบกลุ่ม</li>
                                </ul>
                            </div>

                        </RadzenColumn>


                    </RadzenRow>
                </RadzenTabsItem>
                <RadzenTabsItem Text="ผู้ร่วมกิจกรรม">

                    <RadzenRow>
                        @*
                        <RadzenColumn Size="12">
                        <RadzenText TextStyle="TextStyle.Body2">รายชื่อลูกค้า</RadzenText>
                        <RadzenCard Variant="Variant.Flat"  >
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start">
                        <RadzenImage Path="/user/customer-service.png" Style="width: 100px; height: 100px; border-radius: 50%;" />
                        <RadzenStack Gap="0">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">ชื่อลูกค้า-นามสกุล</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>"สมหวัง สุขใจ"</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">ที่อยู่</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>"99 xxxxxxx xxxxxx xxxxxx xxxxx 00000"</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">เบอร์ติดต่อ</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b><a href="tel:+66850931002"><RadzenIcon Icon="smartphone" />085-0931-002</a></b></RadzenText>
                        <img width="150px" style="margin-top:20px" src="data:image/png;base64,@qrCodeImage" alt="QR Code" />
                        </RadzenStack>
                        </RadzenStack>
                        </RadzenCard>
                        </RadzenColumn>
                        *@

                        <RadzenColumn Size="12">
                            <RadzenText TextStyle="TextStyle.Body2">รายชื่อลูกค้า</RadzenText>

                            <RadzenDataGrid TItem="WeatherForecast" Data="@customers" PagerPosition="PagerPosition.Bottom"
                                            FilterMode="FilterMode.SimpleWithMenu" PageSize="10"
                                            SelectionMode="DataGridSelectionMode.Single"
                                            @bind-Value=@selectedCustomer
                                            AllowFiltering="true" AllowPaging="true" AllowColumnResize="true"
                                            AllowSorting="true" Density="Density.Compact" AllowAlternatingRows="false">
                                <Columns>
                                    <RadzenDataGridColumn Width="50px" >
                                        <Template Context="data">
                                            <RadzenButton ButtonStyle="ButtonStyle.Light" Click="@(args => OpenOrder(data.JobID))" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="manage_search" class="rz-m-1" />
                                        </Template>
                                    </RadzenDataGridColumn> 
                                    <RadzenDataGridColumn TItem="WeatherForecast"  Property="@nameof(WeatherForecast.Customer_Action)" Width="120px" Title="ตอบรับ" />
                                    <RadzenDataGridColumn TItem="WeatherForecast"  Property="@nameof(WeatherForecast.Customer_FullName)" Width="180px" Title="ชื่อลูกค้า" />
                                    <RadzenDataGridColumn TItem="WeatherForecast" Property="@nameof(WeatherForecast.Customer_Phone)" Width="150px" Title="เบอร์ลูกค้า" />
  
                                </Columns>
                            </RadzenDataGrid>



                        </RadzenColumn>

                        <RadzenColumn Size="12">
                            <RadzenText TextStyle="TextStyle.Body2">ประวัติการติดตาม</RadzenText>
                            <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true"
                                            FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            @bind-Value=@selecteContact
                                            Data="@contacts" SelectionMode="DataGridSelectionMode.Single" Density="Density.Compact"
                                            PagerPosition="PagerPosition.Bottom"
                                            AllowAlternatingRows="false">
                                <Columns>
                                    <RadzenDataGridColumn TItem="WeatherForecast" Property="Contact_By" Width="150px" Title="ผู้ติดต่อ" />
                                    <RadzenDataGridColumn TItem="WeatherForecast" Property="Contact_Date" Width="150px" Title="วันที่ติดต่อลูกค้า" />
                                    <RadzenDataGridColumn TItem="WeatherForecast" Property="Last_Contact_Action" Width="120px" Title="ผลตอบรับครั้งก่อน" />
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenColumn>
                    </RadzenRow>

                </RadzenTabsItem>
                <RadzenTabsItem Text="ขายสินค้า">
                    <RadzenRow Gap="1rem">


                        <RadzenDataGrid @ref="ordersGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="@editMode"
                                        Data="@orders" TItem="Products" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
                            <HeaderTemplate>
                                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="เพิ่มสินค้า" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)" />
                            </HeaderTemplate>
                            <Columns>

                                @*  <RadzenDataGridColumn Property="Customer.CompanyName" Title="Customer" Width="280px">
                                <EditTemplate Context="order">
                                <RadzenDropDown @bind-Value="order.CustomerID" Data="@customers" TextProperty="@nameof(Customer.CompanyName)" ValueProperty="@nameof(Customer.CustomerID)" Style="width:100%; display: block;"
                                InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select customer" }})" />
                                </EditTemplate>
                                </RadzenDataGridColumn> *@
                                @*               <RadzenDataGridColumn Property="Employee.LastName" Title="Employee" Width="220px">
                                <Template Context="order">
                                <RadzenImage Path="@order.Employee?.Photo" Style="width: 32px; height: 32px;" class="rz-border-radius-4 rz-me-2" AlternateText="@(order.Employee?.FirstName + " " + order.Employee?.LastName)" />
                                @order.Employee?.FirstName @order.Employee?.LastName
                                </Template>
                                <EditTemplate Context="order">
                                <RadzenDropDown @bind-Value="order.EmployeeID" Data="@employees" ValueProperty="EmployeeID" Style="width:100%; display: block;"
                                InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select employee" }})">
                                <Template>
                                <RadzenImage Path="@context.Photo" Style="width: 20px; height: 20px;" class="rz-border-radius-4 rz-me-2" />
                                @context.FirstName @context.LastName
                                </Template>
                                </RadzenDropDown>
                                </EditTemplate>
                                </RadzenDataGridColumn> *@
                                @*               <RadzenDataGridColumn Property="@nameof(Order.OrderDate)" Title="Order Date" Width="200px">
                                <Template Context="order">
                                @String.Format("{0:d}", order.OrderDate)
                                </Template>
                                <EditTemplate Context="order">
                                <RadzenDatePicker @bind-Value="order.OrderDate" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select order date" }})" />
                                </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Property="@nameof(Order.Freight)" Title="Freight">
                                <Template Context="order">
                                @String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", order.Freight)
                                </Template>
                                <EditTemplate Context="order">
                                <RadzenNumeric @bind-Value="order.Freight" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select freight" }})" />
                                </EditTemplate>
                                </RadzenDataGridColumn> *@
                                <RadzenDataGridColumn Property="Code" Width="100px" Title="รหัสสินค้า">
                                    <EditTemplate Context="order">
                                        <RadzenTextBox @bind-Value="order.Code" Style="width:100px; display: block" Name="ProductCode" aria-label="" />
                                        <RadzenRequiredValidator Text="รหัสสินค้า" Component="ProductCode" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Property="@nameof(Products.Name)" Width="150px" Title="ชื่อสินค้า">
                                    <EditTemplate Context="order">
                                        <RadzenTextBox @bind-Value="order.Name" Style="width:150px; display: block" Name="ProductName" aria-label="" />
                                        <RadzenRequiredValidator Text="ชื่อสินค้า" Component="ProductName" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Property="@nameof(Products.Price)" Width="100px" Title="ราคาสินค้า">
                                    <EditTemplate Context="order">
                                        <RadzenNumeric ShowUpDown="false" @bind-Value="order.Price" Name="ProductPrice" Style="width:100%" Placeholder="ราคาสินค้า" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "ราคา" }})" />
                                        <RadzenRequiredValidator Text="ราคาสินค้า" Component="ProductPrice" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Property="@nameof(Products.SalePrice)" Width="100px" Title="ราคาขาย">
                                    <EditTemplate Context="order">
                                        <RadzenNumeric ShowUpDown="false" @bind-Value="order.SalePrice" Name="ProductSalePrice" Style="width:100%" Placeholder="ราคาขาย" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "ราคา" }})" />
                                        <RadzenRequiredValidator Text="ราคาขาย" Component="ProductSalePrice" Popup="true" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                                @*   <RadzenDataGridColumn Property="@nameof(Order.ShipCountry)" Title="ShipCountry">
                                <EditTemplate Context="order">
                                <RadzenTextBox @bind-Value="order.ShipCountry" Style="width:200px; display: block" Name="ShipCountry" aria-label="Enter ship country" />
                                <RadzenRequiredValidator Text="ShipCountry is required" Component="ShipCountry" Popup="true" />
                                </EditTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Property="@nameof(Order.ShipCity)" Title="ShipCity">
                                <EditTemplate Context="order">
                                <RadzenTextBox @bind-Value="order.ShipCity" Style="width:200px; display: block" Name="ShipCity" aria-label="Enter ship city" />
                                <RadzenRequiredValidator Text="ShipCity is required" Component="ShipCity" Popup="true" />
                                </EditTemplate>
                                </RadzenDataGridColumn> *@
                                <RadzenDataGridColumn Context="order" Width="150px" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                                    <Template Context="order">
                                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                                        </RadzenButton>
                                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                                        </RadzenButton>
                                    </Template>
                                    <EditTemplate Context="order">
                                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(order))" aria-label="Save">
                                        </RadzenButton>
                                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(order))" aria-label="Cancel">
                                        </RadzenButton>
                                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(order))" aria-label="Delete">
                                        </RadzenButton>
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>

                    </RadzenRow>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>





    </RadzenCard>



</RadzenStack>
@code {
    [Parameter] public string UploadID { get; set; }


    int selectedIndex = 0;
    string ID = "C0000000001";
    string channel = "Up-Sale";
    string staff = "พนักงาน A";
    string countcustomer = "100";

    bool allowRowSelectOnRowClick = false;

    IEnumerable<string> datachannel;
    IEnumerable<string> datastaff;
    DateTime? datevalue;


    //
    private IEnumerable<WeatherForecast> contacts;
    IList<WeatherForecast> selecteContact;
    private string qrCodeImage;
    //

    //
    private IEnumerable<WeatherForecast> customers;
    IList<WeatherForecast> selectedCustomer;
    //






    private static readonly string[] data_channels = new[]
      {
            "เลือกPoint", "Up-Sale", "Re-Sale","ลูกค้าขุด"
      };

    private static readonly string[] data_staff = new[]
       {
            "เลือกพนักงาน", "พนักงาน A", "พนักงาน B","พนักงาน C", "ทีม A", "ทีม B","ทีม C"
      };


    #region grid product

    RadzenDataGrid<Products> ordersGrid;
    IEnumerable<Products> orders;
    DataGridEditMode editMode = DataGridEditMode.Single;
    List<Products> ordersToInsert = new List<Products>();
    List<Products> ordersToUpdate = new List<Products>();
    void Reset()
    {
        ordersToInsert.Clear();
        ordersToUpdate.Clear();
    }

    void Reset(Products order)
    {
        ordersToInsert.Remove(order);
        ordersToUpdate.Remove(order);
    }


    async Task EditRow(Products order)
    {
        if (editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)
        {
            Reset();
        }

        ordersToUpdate.Add(order);
        await ordersGrid.EditRow(order);
    }

    void OnUpdateRow(Products order)
    {
        Reset(order);

        //  dbContext.Update(order);

        // dbContext.SaveChanges();
    }

    async Task SaveRow(Products order)
    {
        await ordersGrid.UpdateRow(order);
    }

    void CancelEdit(Products order)
    {
        Reset(order);

        ordersGrid.CancelEditRow(order);

        // var orderEntry = dbContext.Entry(order);
        // if (orderEntry.State == EntityState.Modified)
        // {
        //     orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //     orderEntry.State = EntityState.Unchanged;
        // }
    }

    async Task DeleteRow(Products order)
    {
        Reset(order);

        if (orders.Contains(order))
        {
            //    dbContext.Remove<Products>(order);

            //  dbContext.SaveChanges();

            await ordersGrid.Reload();
        }
        else
        {
            ordersGrid.CancelEditRow(order);
            await ordersGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var order = new Products();
        ordersToInsert.Add(order);
        await ordersGrid.InsertRow(order);
    }

    void OnCreateRow(Products order)
    {
        //    dbContext.Add(order);

        //  dbContext.SaveChanges();

        ordersToInsert.Remove(order);
    }


    #endregion






    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        datachannel = data_channels;
        datastaff = data_staff;

        string phoneNumber = "tel:+66850931002";

        // สร้าง QR Code
        using (var qrGenerator = new QRCoder.QRCodeGenerator())
        {
            var qrCodeData = qrGenerator.CreateQrCode(phoneNumber, QRCoder.QRCodeGenerator.ECCLevel.Q);
            var qrCode = new QRCoder.PngByteQRCode(qrCodeData);
            var qrCodeBytes = qrCode.GetGraphic(20);

            // แปลงเป็น base64 เพื่อแสดงเป็นรูปภาพใน img tag
            qrCodeImage = Convert.ToBase64String(qrCodeBytes);
        }

        List<Products> prders = new List<Products>
        {
            new Products { Code = "P001", Name = "Product 1", Price = 100 ,SalePrice=100 },
            new Products { Code = "P002", Name = "Product 2", Price = 200 ,SalePrice=150 },
            new Products { Code = "P003", Name = "Product 3", Price = 150 ,SalePrice=100 },
            new Products { Code = "P004", Name = "Product 4", Price = 99 ,SalePrice=99 },
            new Products { Code = "P005", Name = "Product 5", Price = 250 ,SalePrice=250 }
        };
        orders = prders.ToList();


    }


    void OnChange(int index)
    {

    }


    public async Task OpenOrder(int i)
    {
        dialogService.Close();

        await dialogService.OpenAsync<DialogCardPageCustomerInfo>($"ข้อมูลลูกค้า",
    new Dictionary<string, object>() { { "OrderID", 1 } },
    new DialogOptions()
        {
            Resizable = true,
            Draggable = true,
            Left = "200px",
            Width = "700px",
            Height = "90%"
        });
    }


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        // // จะถูกเรียกทุกครั้งที่พารามิเตอร์ถูกส่งเข้ามาหรือเปลี่ยนแปลง
        // Console.WriteLine($"UploadID: {UploadID}");
        // Console.WriteLine($"Customer Codes: {string.Join(", ", customercode)}");

        // // ถ้าต้องการให้ re-render หน้าจอใหม่
        //  countcustomer = customercode.Count().ToString();

        ID = "C0000000001";
        channel = "Up-Sale";
        staff = "พนักงาน A";
        countcustomer = "100";
        datevalue = DateTime.Now.Date;

        var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];
        // Use the BaseApiUrl to call the API
        var _contacts = await Http.GetFromJsonAsync<IEnumerable<WeatherForecast>>($"{baseApiUrl}/api/weatherforecast");

        contacts = _contacts.Take(5).ToList();
        selecteContact = new List<WeatherForecast>() { contacts.FirstOrDefault() };


        var _customer = await Http.GetFromJsonAsync<IEnumerable<WeatherForecast>>($"{baseApiUrl}/api/weatherforecast");
        customers = _customer.Take(100).ToList();
        selectedCustomer = new List<WeatherForecast>() { customers.FirstOrDefault() };

    }


    void OnProgress(UploadProgressArgs args, string name)
    {
        // console.Log($"{args.Progress}% '{name}' / {args.Loaded} of {args.Total} bytes.");

        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {
                //  console.Log($"Uploaded: {file.Name} / {file.Size} bytes");
            }
        }
    }

}
