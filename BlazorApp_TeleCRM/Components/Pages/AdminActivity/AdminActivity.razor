@page "/adminactivity"
@using BlazorApp_TeleCRM.Data
@using BlazorApp_TeleCRM.Models
@using BlazorApp_TeleCRM.Service
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Authorization
@using static BlazorApp_TeleCRM.Controller.ActivityAdminController
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject HttpClient Http
@inject DialogService DialogService
@inject allseeddbPDContext allseed_Db
@inject ILocalStorageService LocalStorage


<style>
    .wrap-text {
        white-space: normal;
        word-wrap: break-word;
    }
</style>

<PageTitle>ข้อมูลกิจกรรม</PageTitle>

<AuthorizeView Roles="Admin,Manager,Supervisor">


    <div class="rz-6">
        <RadzenBreadCrumb>
            <RadzenBreadCrumbItem Text="CRM - Admin" />
            <RadzenBreadCrumbItem Path="/adminactivity" Text="กิจกรรม" />
        </RadzenBreadCrumb>
        <RadzenText TextStyle="TextStyle.DisplayH5">ข้อมูลกิจกรรม</RadzenText>
    </div>


    <div class="rz-col-12">

        <RadzenCard Variant="Variant.Outlined" class="rz-info rz-shade-lighte" Style="padding: 1rem;">
        <strong>ค้นหา</strong>
        <RadzenRow Gap="1rem"  JustifyContent="JustifyContent.Start" Class="rz-mt-2">

                <RadzenColumn>
                    <RadzenLabel Text="วันที่สร้างกิจกรรม " Component="RadzenDatePickerBindValue" />
                    <RadzenDatePicker @bind-Value="CreateDateFrom" Name="CreateDateFrom" DateFormat="dd/MM/yyyy" ShowCalendarWeek="true" Style="width: 100%;" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenLabel Text="ถึงวันที่ " Component="RadzenDatePickerBindValue" />
                    <RadzenDatePicker @bind-Value="CreateDateTo" Name="CreateDateTo" DateFormat="dd/MM/yyyy" ShowCalendarWeek="true" Style="width: 100%;" />
                </RadzenColumn>
                <RadzenColumn Size="3">
                    <br />
                    <RadzenButton Text="ค้นหา" Icon="search" Variant="Variant.Flat" Style="width: 100px; margin-right: 0.5rem;" Click="@OnSearch" />
                    <RadzenButton Text="ล้าง" Icon="autorenew" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Secondary" Style="width: 100px;" Click="@OnClear" />
                </RadzenColumn>
        </RadzenRow>
        </RadzenCard>

    </div>

    <RadzenCard Variant="Variant.Outlined" class="rz-my-4">
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
             </RadzenStack>

            <!-- Upload button aligned to the right -->
            <RadzenButton Text="สร้างแคมเปญ"  ButtonStyle="ButtonStyle.Info" Click="@OpenSideDialog2" />
        </RadzenStack>
    </RadzenCard>


    <RadzenProgressBarCircular @bind-Visible="runProcess_wait" ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium">
        <Template>โหลด</Template>
    </RadzenProgressBarCircular>



    <RadzenDataGrid TItem="ActivitysDataList" Data="@act_data" PagerPosition="PagerPosition.Bottom"
                    FilterMode="FilterMode.SimpleWithMenu" PageSize="10"
                    SelectionMode="DataGridSelectionMode.Single"
                    @bind-Value=@selectedAct
                    AllowFiltering="true" AllowPaging="true" AllowColumnResize="true"
                    AllowSorting="true" ColumnWidth="300px"
                    ShowPagingSummary="true" AllowColumnPicking="true"
                    PageSizeOptions="@pageSizeOptions">
        <Columns>

            <RadzenDataGridColumn Width="60px" Filterable="false" Property="@nameof(ActivitysDataList.guid)" Title="">
                <Template Context="data">
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Click="@(args => OpenSideDialog(data.guid,data.assign_work_type))" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="manage_search" class="rz-m-1" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Width="80px" Filterable="false" Property="product_code" Title="สินค้า">
                <Template Context="data">
                    @if (!string.IsNullOrEmpty(data.product_code))
                    {
                        <RadzenImage Path="/products/product001.png" Style="width: 60px; height: 60px;" class="rz-border-radius-2" AlternateText="" />
                    }
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Width="140px" Property="status" Title="ความคืบหน้า">
                <Template Context="data">

                    @if (data.status == "สำเร็จ")
                    {
                        <RadzenButton Text="สำเร็จ" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Info" Shade="Shade.Lighter" Variant="Variant.Flat" class="rz-ripple" />
                    }
                    else if (data.status == "รอดำเนินการ")
                    {
                        <RadzenButton Text="รอดำเนินการ" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Warning" Shade="Shade.Lighter" Variant="Variant.Flat" class="rz-ripple" />
                    }
                    else if (data.status == "ปิดการขาย")
                    {
                        <RadzenButton Text="ปิดการขาย" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Success" Shade="Shade.Lighter" Variant="Variant.Flat" class="rz-ripple" />
                    }
                    else if (data.status == "ไม่สำเร็จ")
                    {
                        <RadzenButton Text="ไม่สำเร็จ" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Light" Shade="Shade.Lighter" Variant="Variant.Flat" class="rz-ripple" />
                    }
                    else
                    {
                        <RadzenButton Text="@data.status" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Dark" Shade="Shade.Lighter" Variant="Variant.Flat" class="rz-ripple" />
                    }

                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ActivitysDataList" Visible="false" Property="@nameof(ActivitysDataList.guid)" Width="200px" Title="เลขที่กิจกรรม">
                <Template Context="data">
                    <div class="wrap-text">
                        @data.guid
                    </div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ActivitysDataList" Property="@nameof(ActivitysDataList.name)" Width="200px" Title="ชื่อกิจกรรม" />
            <RadzenDataGridColumn TItem="ActivitysDataList" Property="@nameof(ActivitysDataList.assign_work_type)" Width="130px" Title="ประเภท" />
            <RadzenDataGridColumn TItem="ActivitysDataList" Property="@nameof(ActivitysDataList.touch_point)" Width="110px" Title="Touch Point" />
            <RadzenDataGridColumn TItem="ActivitysDataList" Property="@nameof(ActivitysDataList.assign_work_fullName)" Width="180px" Title="พนักงาน CRM" />
            <RadzenDataGridColumn TItem="ActivitysDataList" Property="@nameof(ActivitysDataList.created_date)" FormatString="{0:dd/MM/yyyy HH:mm:ss}" Width="170px" Title="วันที่สร้างกิจกรรม" />
            <RadzenDataGridColumn TItem="ActivitysDataList" Property="@nameof(ActivitysDataList.startdate)" FormatString="{0:dd/MM/yyyy HH:mm:ss}" Width="170px" Title="วันที่เริ่มกิจกรรม" />
            <RadzenDataGridColumn TItem="ActivitysDataList" Property="@nameof(ActivitysDataList.duedate)" FormatString="{0:dd/MM/yyyy HH:mm:ss}" Width="170px" Title="วันครบกำหนด" />
        </Columns>
    </RadzenDataGrid>





</AuthorizeView>




@code {


    bool runProcess_wait = false;
    bool isDialogOpen = false;
   // DateTime? value = DateTime.Now;
    private DateTime? CreateDateFrom { get; set; }
    private DateTime? CreateDateTo { get; set; }

    private string username;
    private IEnumerable<string> roles;

    private string BranchCode { get; set; }
    private IEnumerable<string> _BranchCode;

    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30, 50, 100 };


    private IEnumerable<ActivitysDataList> act_data;
    IList<ActivitysDataList> selectedAct;
    RadzenDataGrid<ActivitysDataList> grid;






    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            //  username = user.Identity.Name;
            //  roles = user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value);
            _BranchCode = user.Claims.Where(c => c.Type == ClaimTypes.Locality).Select(c => c.Value);
            BranchCode = _BranchCode.FirstOrDefault();

        }
        else
        {
            // username = "Not authenticated";
            // roles = Enumerable.Empty<string>();
            BranchCode = "";
        }



        // เรียกใช้เมธอด FetchCustomerDataAsync เพื่อดึงข้อมูล
        act_data = await FetchCustomerDataAsync(this.CreateDateFrom, this.CreateDateTo);

        if (act_data != null && act_data.Any())
        {
            selectedAct = new List<ActivitysDataList>() { act_data.FirstOrDefault() };
        }

    }


    private async Task OnSearch()
    {
        // เรียกใช้เมธอด FetchCustomerDataAsync เพื่อค้นหาข้อมูลตามวันที่ที่เลือก
        act_data = await FetchCustomerDataAsync(this.CreateDateFrom, this.CreateDateTo);

        if (act_data != null && act_data.Any())
        {
            selectedAct = new List<ActivitysDataList>() { act_data.FirstOrDefault() };
        }


        // บังคับให้ UI อัปเดตใหม่
        StateHasChanged();
    }

    private async Task OnClear()
    {
        // Reset all filters
        CreateDateFrom = null;
        CreateDateTo = null;
      
        // เรียกใช้เมธอด FetchCustomerDataAsync เพื่อค้นหาข้อมูลตามวันที่ที่เลือก
        act_data = await FetchCustomerDataAsync(this.CreateDateFrom, this.CreateDateTo);

        if (act_data != null && act_data.Any())
        {
            selectedAct = new List<ActivitysDataList>() { act_data.FirstOrDefault() };
        }


        // บังคับให้ UI อัปเดตใหม่
        StateHasChanged();
    }




    async Task OpenSideDialog(string ActID, string type)
    {

        if (type == "กิจกรรม" || type == "Activities")
        {
            if (isDialogOpen)
            {
                DialogService.Close();
                // await Task.Delay(200);
            }
            StateHasChanged();
            await DialogService.OpenSideAsync<DialogCardPageCustomerActivity>(
                "กิจกรรม",
                new Dictionary<string, object>
                                        {
            { "ActivitysID", ActID.ToString() }
                                        },
                new SideDialogOptions
                    {
                        CloseDialogOnOverlayClick = true,
                        Position = DialogPosition.Right,
                        ShowMask = false,
                        Width = "50%"
                    });

            isDialogOpen = true;
        }
        else
        {
            if (isDialogOpen)
            {
                DialogService.Close();
                // await Task.Delay(200);
            }
            StateHasChanged();
            await DialogService.OpenSideAsync<DialogCardPageCustomerCampaign>(
                "แคมเปญ",
                new Dictionary<string, object>
                                            {
            { "ActivitysID", ActID.ToString() }
                                            },
                new SideDialogOptions
                    {
                        CloseDialogOnOverlayClick = true,
                        Position = DialogPosition.Right,
                        ShowMask = false,
                        Width = "75%"
                    });

            isDialogOpen = true;
        }

    }


    async Task OpenSideDialog2()
    {
        // ตรวจสอบว่ามี Dialog เปิดอยู่หรือไม่ ถ้าเปิดอยู่ ให้ปิดก่อน
        if (isDialogOpen)
        {
            DialogService.Close();  // ปิด Dialog
            await Task.Delay(200);  // หน่วงเวลาเพื่อให้ Dialog ถูกปิดสมบูรณ์
        }


        // เปิด Dialog ใหม่สำหรับสร้างแคมเปญ
        await DialogService.OpenSideAsync<DialogCardPageCustomerCampaign>(
            "สร้างแคมเปญ",
            new Dictionary<string, object>{{ "ActivitysID", "" }},
            new SideDialogOptions
                {
                    CloseDialogOnOverlayClick = true,
                    Position = DialogPosition.Right,
                    ShowMask = false,
                    Width = "850px"
                });

        // ตั้งค่าว่ามี Dialog เปิดอยู่
        isDialogOpen = true;

    }




    public async Task<IEnumerable<ActivitysDataList>> FetchCustomerDataAsync(DateTime? fdate, DateTime? ldate)
    {
        try
        {

            // เปิด DialogService เพื่อแจ้งว่ากำลังโหลด
            runProcess_wait = true;
            StateHasChanged(); // บังคับ UI อัปเดต

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                fdate = fdate,
                ldate = ldate,
                branch_code = BranchCode
            };

            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/ActivityAdmin/GetActivitysData", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                // แปลงข้อมูลที่ได้รับเป็น IEnumerable<ActivitysDataList>
                var activitysDataList = await response.Content.ReadFromJsonAsync<IEnumerable<ActivitysDataList>>();
                return activitysDataList;
            }
            else
            {
                Console.WriteLine("Error fetching Activity Data.");
                return Enumerable.Empty<ActivitysDataList>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }




}