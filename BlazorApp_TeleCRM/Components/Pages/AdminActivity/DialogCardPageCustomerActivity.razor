@page "/DialogCardPageCustomerActivity/{ActivitysID}"
@using System.ComponentModel.DataAnnotations
@using BlazorApp_TeleCRM.Data
@using BlazorApp_TeleCRM.Helper
@using BlazorApp_TeleCRM.Models
@using BlazorApp_TeleCRM.Service
@using Microsoft.AspNetCore.Components.Authorization
@using MySql.Data.MySqlClient
@using System.Security.Claims
@using static BlazorApp_TeleCRM.Controller.WeatherForecastController
@using static BlazorApp_TeleCRM.Components.Pages.UploadJob
@inject IConfiguration Configuration
@inject Radzen.DialogService dialogService
@inject HttpClient Http
@inject MySqlConnection MySqlConnection
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService
@inject UtilityConvet utility ;


<style>
    .rz-dialog-side {
        z-index: 10 !important;
    }
</style>



<RadzenStack Gap="1rem" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
    <RadzenTabs @bind-SelectedIndex=@selectedIndex Change=@OnChange>
        <Tabs>
            <RadzenTabsItem Text="ข้อมูลกิจกรรม">
                <RadzenTemplateForm TItem="Model" Data=@model Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">ความคืบหน้า </RadzenText>
                            @if (model.status == "สำเร็จ")
                            {
                                <RadzenButton Text="สำเร็จ" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" class="rz-ripple" />
                            }
                            else if (model.status == "")
                            {
                                <RadzenButton Text="รอดำเนินการ" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Warning" Variant="Variant.Flat" class="rz-ripple" />
                            }
                            else if (model.status == "ปิดการขาย")
                            {
                                <RadzenButton Text="ปิดการขาย" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" class="rz-ripple" />
                            }
                            else if (model.status == "ไม่สำเร็จ")
                            {
                                <RadzenButton Text="ไม่สำเร็จ" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" class="rz-ripple" />
                            }
                            else
                            {
                                <RadzenButton Text="@model.status" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Dark" Variant="Variant.Flat" class="rz-ripple" />
                            }
                        </RadzenColumn>

                        <RadzenColumn Size="6">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">จำนวนผู้เข้ากิจกรรม</RadzenText>
                            <RadzenButton Text="1" ButtonStyle="ButtonStyle.Base" Variant="Variant.Outlined" class="rz-ripple" />
                        </RadzenColumn>


                        <RadzenColumn Size="6">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">สถานะการโทร</RadzenText>
                            <RadzenAlert AllowClose="false" ShowIcon="false" AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter">
                                @model.call_status
                            </RadzenAlert>

                        </RadzenColumn>


                        <RadzenColumn Size="6">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">สถานะการสนทนา</RadzenText>
                            <RadzenAlert AllowClose="false" ShowIcon="false" AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter">
                                @model.call_action
                            </RadzenAlert>
                        </RadzenColumn>


                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">รหัสกิจกรรม <span class="rz-messages-error">*</span> </RadzenText>
                            <RadzenTextBox Style="width: 100%" AutoComplete="false" @bind-Value=@model.activities_id Disabled="true" />
                        </RadzenColumn>

                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Touch Point <span class="rz-messages-error">*</span> </RadzenText>
                            <RadzenDropDown @bind-Value=@model.activities_touch_point style="display:block;width:100%"
                                            Data=@datachannel Name="activities_touch_point" class="w-100" />
                            <RadzenRequiredValidator Component="activities_touch_point" Text="เลือก Touch Point" Style="position: absolute" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="12">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">ชื่อกิจกรรม <span class="rz-messages-error">*</span> </RadzenText>
                            <RadzenTextBox Name="activities_name" style="display: block;width: 100%"
                                           @bind-Value=@model.activities_name AutoComplete="false" class="w-100" />
                            <RadzenRequiredValidator Component="activities_name" Text="กรอกชื่อกิจกรรม" Style="position: absolute" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="12">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">รายละเอียด</RadzenText>
                            <RadzenTextBox Name="activities_name" style="display: block;width: 100%"
                                           @bind-Value=@model.activities_description AutoComplete="false" class="w-100" />
                        </RadzenColumn>

                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">วันที่เริ่มจ่ายงาน <span class="rz-messages-error">*</span> </RadzenText>
                            <RadzenDatePicker @bind-Value=@model.activities_startdate Name="activities_startdate" ShowTime="true" ShowSeconds="true"
                                              HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="dd/MM/yyyy HH:mm" class="w-100" style="display: block;width: 100%" />
                            <RadzenRequiredValidator Component="activities_startdate" Text="เลือกวันที่เริ่มจ่ายงาน" Style="position: absolute" />
                        </RadzenColumn>
                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">วันที่ครบกำหนด <span class="rz-messages-error">*</span> </RadzenText>
                            <RadzenDatePicker @bind-Value=@model.activities_duedate Name="activities_duedate" ShowTime="true" ShowSeconds="true"
                                              HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="dd/MM/yyyy HH:mm" class="w-100" style="display: block;width: 100%" />
                            <RadzenRequiredValidator Component="activities_duedate" Text="เลือกวันที่ครบกำหนด" Style="position: absolute" />
                        </RadzenColumn>
                        @*   <RadzenColumn Size="6" SizeMD="6">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">แจ้งใกล้ครบกำหนด <span class="rz-messages-error">*</span> </RadzenText>
                        <RadzenDatePicker @bind-Value=@model.activities_reminder_duedate Name="activities_reminder_duedate" ShowTime="true" ShowSeconds="true"
                        HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="dd/MM/yyyy HH:mm" class="w-100" style="display: block;width: 100%" />
                        </RadzenColumn> *@
                        <RadzenColumn Size="6" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">พนักงาน CRM<span class="rz-messages-error">*</span> </RadzenText>
                            <RadzenDropDown @ref="radzenDropDown"
                                            @bind-SearchText="SearchText"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            FilterOperator="StringFilterOperator.StartsWith"
                                            AllowFiltering="true"
                                            Data="@Assignworks"
                                            TextProperty="FullName"
                                            ValueProperty="Username"
                                            AllowClear="true"
                                            @bind-Value=@model.activities_assign_work
                                            Name="activities_assign_work" class="w-100" style="display: block;width: 100%" />
                            <RadzenRequiredValidator Component="activities_assign_work" Text="พนักงาน CRM" Style="position: absolute" />
                        </RadzenColumn>


                        <RadzenColumn Size="12" SizeMD="12">
                            <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" AlignItems="AlignItems.End" Wrap="FlexWrap.NoWrap" JustifyContent="JustifyContent.Right">
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">ฝากงานให้นายหน้า </RadzenText>
                                <RadzenCheckBox @bind-Value=@model.allowagent Disabled="true" Name="CheckBox1" />
                            </RadzenStack>
                        </RadzenColumn>


                        <RadzenColumn Size="12" SizeMD="12">

                            @if (model.status == "")
                            {
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.SpaceBetween">
                                    <RadzenButton Text="บันทึก" Disabled="@btnDisable" ButtonType="ButtonType.Submit" Style="margin-top:15px" ButtonStyle="ButtonStyle.Primary" />
                                    <RadzenButton Text="ยกเลิก" Disabled="@btnDisable" Style="margin-top:15px" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Click="@ConfirmCancel" />
                                </RadzenStack>
                            }

                        </RadzenColumn>

                        <RadzenColumn Size="12" SizeMD="12">
                            <RadzenCard Variant="Variant.Outlined" @bind-Visible=runProcess style="background-color:#CBE2F5;">
                                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                    <RadzenProgressBarCircular @bind-Visible="runProcess_wait" ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium">
                                        <Template>รอ</Template>
                                    </RadzenProgressBarCircular>
                                    <RadzenText Style="margin-top:20px" TextStyle="TextStyle.Caption">@TextProcess</RadzenText>
                                </RadzenStack>
                            </RadzenCard>
                        </RadzenColumn>

                        <RadzenColumn Size="12" SizeMD="12">
                            <div>
                                หมายเหตุ <br />
                                <ul>
                                    <li>กรณที่เลือกสร้างแบบกิจกรรมระบบสร้างไอดี 1:1</li>
                                    <li> สร้างแบบแคมเปญระบบสร้างไอดีแบบกลุ่ม</li>
                                </ul>
                            </div>

                        </RadzenColumn>



                    </RadzenRow>
                </RadzenTemplateForm>
            </RadzenTabsItem>
            <RadzenTabsItem Text="ผู้ร่วมกิจกรรม">

                <RadzenRow>
                    <RadzenColumn Size="12">
                        <RadzenText TextStyle="TextStyle.Body2">รายชื่อลูกค้า</RadzenText>
                        <RadzenCard Variant="Variant.Flat">
                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start">
                                <RadzenImage Path="/user/customer-service.png" Style="width: 50px; height: 50px; border-radius: 50%;" />
                                <RadzenStack Gap="0">
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">รหัสลูกค้า</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption"><b>@selectedCus.guid </b></RadzenText>
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">ชื่อลูกค้า-นามสกุล</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1"><b>@selectedCus.name </b></RadzenText>
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">ที่อยู่</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        <b>
                                            @selectedCus.address1 @selectedCus.sub_district @selectedCus.district
                                            @selectedCus.province @selectedCus.zipcode
                                        </b>
                                    </RadzenText>
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">เบอร์ติดต่อ</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1"><b><a href="tel:@utility.FormatPhoneNumberWithCountryCode(@selectedCus.phone)"><RadzenIcon Icon="smartphone" /> @utility.FormatPhoneNumber(@selectedCus.phone) </a></b></RadzenText>
                                    <img width="150px" style="margin-top:20px" src="data:image/png;base64,@qrCodeImage" alt="QR Code" />
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenCard>
                    </RadzenColumn>
                    <RadzenColumn Size="12">


                        <RadzenTabs @bind-SelectedIndex=@selectedIndex2 Change=@OnChange2>
                            <Tabs>
                                <RadzenTabsItem Text="ประวัติการติดต่อ">
                                    <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true"
                                                    FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    @bind-Value=@selecteContact
                                                    Data="@contacts" SelectionMode="DataGridSelectionMode.Single" Density="Density.Compact"
                                                    PagerPosition="PagerPosition.Bottom"
                                                    AllowAlternatingRows="false">
                                        <Columns>
                                            <RadzenDataGridColumn TItem="CrmContactLog" Property="@nameof(CrmContactLog.created_by)" Width="120px" Title="ผู้ติดต่อ" />
                                            <RadzenDataGridColumn TItem="CrmContactLog" Property="@nameof(CrmContactLog.created_at)" Width="150px" Title="วันที่ติดต่อลูกค้า" />
                                            <RadzenDataGridColumn TItem="CrmContactLog" Property="@nameof(CrmContactLog.contact_result)" Width="120px" Title="ความคืบหน้า" />
                                            <RadzenDataGridColumn TItem="CrmContactLog" Property="@nameof(CrmContactLog.contact_result2)" Width="120px" Title="ผลตอบรับครั้งก่อน" />
                                            <RadzenDataGridColumn TItem="CrmContactLog" Property="@nameof(CrmContactLog.contact_remark)" Width="150px" Title="หมายเหตุ" />
                                            <RadzenDataGridColumn TItem="CrmContactLog" Property="@nameof(CrmContactLog.statusparticipation)" Width="150px" Title="คะแนนการมีส่วนร่วม" />
                                        </Columns>
                                    </RadzenDataGrid>
                                </RadzenTabsItem>
                                <RadzenTabsItem Text="Note">

                                    <RadzenTemplateForm TItem="Model2" Data=@model2 Submit="@OnSubmit2" InvalidSubmit="@OnInvalidSubmit2">
                                        <RadzenStack class="rz-12">


                                            <RadzenRow AlignItems="AlignItems.Start" class="rz-12">
                                                <RadzenColumn Size="6" SizeMD="6">
                                                    <RadzenLabel Text="Note" TextStyle="TextStyle.Subtitle2" Component="remark" />
                                                    <RadzenTextArea Placeholder="" Name="remark" @bind-Value="@model2.note" class="w-100" />
                                                    <RadzenRequiredValidator Component="remark" Text="กรอกข้อความ" />
                                                </RadzenColumn>

                                            </RadzenRow>

                                            <RadzenRow AlignItems="AlignItems.Start">
                                                <RadzenColumn Size="12">
                                                    <RadzenButton ButtonType="ButtonType.Submit" Text="บันทึก" Style="margin-top: 5px;" />
                                                </RadzenColumn>
                                            </RadzenRow>

                                        </RadzenStack>
                                    </RadzenTemplateForm>
                                    <hr />

                                    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="1rem" class="rz-12" Style="width%90">
                                        <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true"
                                                        FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                        @bind-Value=@selectenote
                                                        Data="@notes" SelectionMode="DataGridSelectionMode.Single" Density="Density.Compact"
                                                        PagerPosition="PagerPosition.Bottom"
                                                        AllowAlternatingRows="false">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="CrmNote" Property="@nameof(CrmNote.created_by)" Width="120px" Title="ผู้ลงบันทึก" />
                                                <RadzenDataGridColumn TItem="CrmNote" Property="@nameof(CrmNote.created_at)" Width="150px" Title="วันที่ลงบันทึก" />
                                                <RadzenDataGridColumn TItem="CrmNote" Property="@nameof(CrmNote.note)" Width="400px" Title="Note" />
                                            </Columns>
                                        </RadzenDataGrid>
                                    </RadzenStack>
                                </RadzenTabsItem>
                            </Tabs>
                        </RadzenTabs>




                    </RadzenColumn>
                </RadzenRow>

            </RadzenTabsItem>
           
        </Tabs>
    </RadzenTabs>




</RadzenStack>
@code {
    [Parameter] public string ActivitysID { get; set; }

    [Inject]
    public SharedStateService SharedState { get; set; }

    //from data
    class Model
    {
        public string? activities_id { get; set; }
        public string? activities_name { get; set; }
        public string? activities_touch_point { get; set; }
        public string? activities_description { get; set; }
        public DateTime? activities_startdate { get; set; }
        public DateTime? activities_duedate { get; set; }
        public DateTime? activities_reminder_duedate { get; set; }
        public string? activities_assign_work { get; set; }
        public bool? allowagent { get; set; } = false;

        public string? status { get; set; }
        public string? call_status { get; set; }
        public string? call_action { get; set; }
        public string? sale_order_no { get; set; }
        public string? code { get; set; }
    }

    class Model2
    {
        public string? note { get; set; }
    }

    Model model = new Model();

    Model2 model2 = new Model2();


    bool runProcess_wait = false;
    bool btnDisable = false;
    bool isError = false;
    string TextError = "";
    bool runProcess = false;
    string TextProcess = "";



    private string username;
    int selectedIndex = 0;
    int selectedIndex2 = 0;
    string channel = "";
    string staff = "เลือกพนักงาน";
    string countcustomer = "0";

    bool allowRowSelectOnRowClick = false;


    private string? BranchCode { get; set; }
    private IEnumerable<string>? _BranchCode;


    private List<Assignwork> Assignworks = new();
    private string? SearchText { get; set; }
    private string? selectedUserId { get; set; }
    private RadzenDropDown<string>? radzenDropDown;



    IEnumerable<string>? datachannel;
    IEnumerable<string>? datastaff;
    DateTime? datevalue;


    //
    private IEnumerable<CrmContactLog> contacts;
    IList<CrmContactLog> selecteContact;

    private string qrCodeImage;

    private IEnumerable<ActivitysDataList> act_data;
    ActivitysDataList selectedAct;


    private IEnumerable<CustomerDataList> cus_data;
    CustomerDataList selectedCus;

    private IEnumerable<CrmNote> notes;
    IList<CrmNote> selectenote;

    private static readonly string[] data_channels = new[]
      {
            "","Up-Sale", "Re-Sale","ลูกค้าขุด","Cross-Sale"
      };


    private async Task ConfirmSubmit()
    {
        var confirmed = await dialogService.Confirm("คุณต้องการบันทึกข้อมูลนี้หรือไม่?", "ยืนยัน",
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", Draggable = true });

        if (confirmed.HasValue && confirmed.Value)
        {
            await UpdateBatchToDatabaseWithTransaction();
        }
    }

    private async Task ConfirmCancel()
    {
        var confirmed = await dialogService.Confirm("คุณต้องการยกเลิกข้อมูลนี้หรือไม่?", "ยืนยัน",
            new ConfirmOptions() {  OkButtonText = "Yes", CancelButtonText = "No", Draggable = true });

        if (confirmed.HasValue && confirmed.Value)
        {
            await CancelBatchToDatabaseWithTransaction();
        }
    }




    private async Task OnSubmit()
    {
        await ConfirmSubmit();
    }


    private async Task UpdateBatchToDatabaseWithTransaction()
    {
        btnDisable = true;
        runProcess = true;
        runProcess_wait = true;
        TextProcess = "กรุณารอ ระบบกำลังทำการอัปเดตข้อมูล..";

        DateTime today = DateTime.Now;

        await MySqlConnection.OpenAsync();
        using var transaction = await MySqlConnection.BeginTransactionAsync();

        try
        {
            var query = @"UPDATE crm_activitys 
                          SET touch_point = @touch_point,
                          name = @name,
                          description = @description,
                          startdate = @startdate,
                          duedate = @duedate,
                          reminder_duedate = @reminder_duedate,
                          assign_work = @assign_work,
                          assign_work_type = @assign_work_type,
                          allowagent = @allowagent,
                          record_status = @record_status,
                          modified_by = @modified_by,
                          modified_date = @modified_date,
                          status = @status,
                          call_status = @call_status,
                          sale_order_no = @sale_order_no,
                          code = @code,
                          call_action = @call_action
                      WHERE guid = @guid and branch_code = @branch_code ";

            using var command = new MySqlCommand(query, MySqlConnection, transaction);

            command.Parameters.AddWithValue("@guid", model.activities_id); // ใช้ GUID ที่มีอยู่
            command.Parameters.AddWithValue("@branch_code", BranchCode ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@touch_point", model.activities_touch_point ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@name", model.activities_name ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@description", model.activities_description ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@startdate", model.activities_startdate ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@duedate", model.activities_duedate ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@reminder_duedate", model.activities_reminder_duedate ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@assign_work", model.activities_assign_work ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@assign_work_type", "Activities" ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@allowagent", model.allowagent ?? false);
            command.Parameters.AddWithValue("@record_status", true);
            command.Parameters.AddWithValue("@modified_by", username);
            command.Parameters.AddWithValue("@modified_date", today);
            command.Parameters.AddWithValue("@status", model.status ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@call_status", model.call_status ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@sale_order_no", model.sale_order_no ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@code", model.code ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@call_action", model.call_action ?? (object)DBNull.Value);

            await command.ExecuteNonQueryAsync();

            // Commit transaction
            await transaction.CommitAsync();
        }
        catch (Exception ex)
        {
            // Rollback transaction in case of an error
            await transaction.RollbackAsync();
            TextProcess = $"Error: {ex.Message}";
            btnDisable = false;
            runProcess_wait = false;
        }
        finally
        {
            await MySqlConnection.CloseAsync();
            btnDisable = true;
            runProcess_wait = false;
            TextProcess = "อัปเดตข้อมูลในระบบเรียบร้อยแล้ว";
            NotificationService.Notify(NotificationSeverity.Success, "สำเร็จ", "อัปเดตข้อมูลสำเร็จ");
            StateHasChanged();
        }
    }

    private async Task CancelBatchToDatabaseWithTransaction()
    {
        btnDisable = true;
        runProcess = true;
        runProcess_wait = true;
        TextProcess = "กรุณารอ ระบบกำลังทำการยกเลิกข้อมูล..";

        DateTime today = DateTime.Now;

        await MySqlConnection.OpenAsync();
        using var transaction = await MySqlConnection.BeginTransactionAsync();

        try
        {
            var query = @"UPDATE crm_activitys
                      SET 
                          record_status = @record_status,
                          modified_by = @modified_by,
                          modified_date = @modified_date,
                          status = @status
                      WHERE guid = @guid";

            using var command = new MySqlCommand(query, MySqlConnection, transaction);

            command.Parameters.AddWithValue("@guid", model.activities_id); // ใช้ GUID ที่มีอยู่
            command.Parameters.AddWithValue("@record_status", false);
            command.Parameters.AddWithValue("@modified_by", username);
            command.Parameters.AddWithValue("@modified_date", today);
            command.Parameters.AddWithValue("@status", "ยกเลิก" ?? (object)DBNull.Value);
            await command.ExecuteNonQueryAsync();

            // Commit transaction
            await transaction.CommitAsync();
        }
        catch (Exception ex)
        {
            // Rollback transaction in case of an error
            await transaction.RollbackAsync();
            TextProcess = $"Error: {ex.Message}";
            btnDisable = false;
            runProcess_wait = false;
        }
        finally
        {
            await MySqlConnection.CloseAsync();
            btnDisable = true;
            runProcess_wait = false;
            TextProcess = "ยกเลิกข้อมูลในระบบเรียบร้อยแล้ว";
            NotificationService.Notify(NotificationSeverity.Success, "สำเร็จ", "อัปเดตข้อมูลสำเร็จ");
            StateHasChanged();
        }
    }


    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        // console.Log($"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}");
    }



    #region grid product

    RadzenDataGrid<Products> ordersGrid;
    IEnumerable<Products> orders;
    DataGridEditMode editMode = DataGridEditMode.Single;
    List<Products> ordersToInsert = new List<Products>();
    List<Products> ordersToUpdate = new List<Products>();
    void Reset()
    {
        ordersToInsert.Clear();
        ordersToUpdate.Clear();
    }

    void Reset(Products order)
    {
        ordersToInsert.Remove(order);
        ordersToUpdate.Remove(order);
    }


    async Task EditRow(Products order)
    {
        if (editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)
        {
            Reset();
        }

        ordersToUpdate.Add(order);
        await ordersGrid.EditRow(order);
    }

    void OnUpdateRow(Products order)
    {
        Reset(order);

        //  dbContext.Update(order);

        // dbContext.SaveChanges();
    }

    async Task SaveRow(Products order)
    {
        await ordersGrid.UpdateRow(order);
    }

    void CancelEdit(Products order)
    {
        Reset(order);

        ordersGrid.CancelEditRow(order);

        // var orderEntry = dbContext.Entry(order);
        // if (orderEntry.State == EntityState.Modified)
        // {
        //     orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //     orderEntry.State = EntityState.Unchanged;
        // }
    }

    async Task DeleteRow(Products order)
    {
        Reset(order);

        if (orders.Contains(order))
        {
            //    dbContext.Remove<Products>(order);

            //  dbContext.SaveChanges();

            await ordersGrid.Reload();
        }
        else
        {
            ordersGrid.CancelEditRow(order);
            await ordersGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var order = new Products();
        ordersToInsert.Add(order);
        await ordersGrid.InsertRow(order);
    }

    void OnCreateRow(Products order)
    {
        //    dbContext.Add(order);

        //  dbContext.SaveChanges();

        ordersToInsert.Remove(order);
    }


    #endregion




    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        datachannel = data_channels;


        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            username = user.Identity.Name;
            _BranchCode = user.Claims.Where(c => c.Type == ClaimTypes.Locality).Select(c => c.Value);
            BranchCode = _BranchCode.FirstOrDefault();
        }
        else
        {
            username = "";
            BranchCode = "";
        }


        await LoadUsers();


    }


    void OnChange(int index)
    {

    }

    void OnChange2(int index)
    {

    }


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();


        act_data = await FetchCustomerDataAsync(this.ActivitysID);
        if (act_data != null && act_data.Any())
        {
            selectedAct = act_data.FirstOrDefault();

            if (selectedAct != null)
            {
                model.activities_id = selectedAct.guid;
                model.activities_touch_point = selectedAct.touch_point;
                model.activities_name = selectedAct.name;
                model.activities_description = selectedAct.description;
                model.activities_startdate = selectedAct.startdate;
                model.activities_duedate = selectedAct.duedate;
                model.activities_reminder_duedate = selectedAct.reminder_duedate;
                model.activities_assign_work = selectedAct.assign_work;
                model.allowagent = selectedAct.allowagent;
                model.status = selectedAct.status;
                model.call_action = selectedAct.call_action;
                model.call_status = selectedAct.call_status;


                cus_data = await FetchCustomerByIDDataAsync(selectedAct.customer_code);
                if (cus_data != null && act_data.Any())
                {
                    selectedCus = cus_data.FirstOrDefault();

                    string phoneNumber = "tel:"+@utility.FormatPhoneNumberWithCountryCode(@selectedCus.phone); 

                    // สร้าง QR Code
                    using (var qrGenerator = new QRCoder.QRCodeGenerator())
                    {
                        var qrCodeData = qrGenerator.CreateQrCode(phoneNumber, QRCoder.QRCodeGenerator.ECCLevel.Q);
                        var qrCode = new QRCoder.PngByteQRCode(qrCodeData);
                        var qrCodeBytes = qrCode.GetGraphic(20);

                        // แปลงเป็น base64 เพื่อแสดงเป็นรูปภาพใน img tag
                        qrCodeImage = Convert.ToBase64String(qrCodeBytes);
                    }

                }
            
            }

        }


        countcustomer = "1";
        datevalue = DateTime.Now.Date;

        // Use the BaseApiUrl to call the API
      
        contacts = await FetchCrmContactLogDataAsync(selectedAct.customer_code);
        selecteContact = new List<CrmContactLog>() { contacts.FirstOrDefault() };

        notes = await FetchCrmNotesDataAsync(selectedAct.customer_code);
        selectenote = new List<CrmNote>() { notes.FirstOrDefault() };

        


        List<Products> prders = new List<Products>
        {
            new Products { Code = "P001", Name = "Product 1", Price = 100 ,SalePrice=100 },
            new Products { Code = "P002", Name = "Product 2", Price = 200 ,SalePrice=150 },
            new Products { Code = "P003", Name = "Product 3", Price = 150 ,SalePrice=100 },
            new Products { Code = "P004", Name = "Product 4", Price = 99 ,SalePrice=99 },
            new Products { Code = "P005", Name = "Product 5", Price = 250 ,SalePrice=250 }
        };
        orders = prders.ToList();


    }

    public async Task<IEnumerable<CrmContactLog>> FetchCrmContactLogDataAsync(string Guid)
    {
        try
        {

            // เปิด DialogService เพื่อแจ้งว่ากำลังโหลด
            runProcess_wait = true;
            StateHasChanged(); // บังคับ UI อัปเดต

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                guid = Guid,
                branch_code = BranchCode
            };

            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/Job/GetCrmContactLogDataByID", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                var contacts = await response.Content.ReadFromJsonAsync<IEnumerable<CrmContactLog>>();
                return contacts;
            }
            else
            {
                Console.WriteLine("Error fetching ContactLogData Data.");
                return Enumerable.Empty<CrmContactLog>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }



    public async Task<IEnumerable<ActivitysDataList>> FetchCustomerDataAsync(string Guid)
    {
        try
        {

            // เปิด DialogService เพื่อแจ้งว่ากำลังโหลด
            runProcess_wait = true;
            StateHasChanged(); // บังคับ UI อัปเดต

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                guid = Guid
            };

            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/ActivityAdmin/GetActivitysById", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                var activitysDataList = await response.Content.ReadFromJsonAsync<IEnumerable<ActivitysDataList>>();
                return activitysDataList;
            }
            else
            {
                Console.WriteLine("Error fetching Activity Data.");
                return Enumerable.Empty<ActivitysDataList>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }

    public async Task<IEnumerable<CustomerDataList>> FetchCustomerByIDDataAsync(string Guid)
    {
        try
        {

            // เปิด DialogService เพื่อแจ้งว่ากำลังโหลด
            runProcess_wait = true;
            StateHasChanged(); // บังคับ UI อัปเดต

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                guid = Guid,
                branch_code = BranchCode
            };

            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/CustomerAdmin/GetCustomerDataById", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                // แปลงข้อมูลที่ได้รับเป็น IEnumerable<CustomerDataList>
                var customerDataList = await response.Content.ReadFromJsonAsync<IEnumerable<CustomerDataList>>();
                return customerDataList;
            }
            else
            {
                Console.WriteLine("Error fetching customer data.");
                return Enumerable.Empty<CustomerDataList>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }

    public async Task<IEnumerable<CrmNote>> FetchCrmNotesDataAsync(string Guid)
    {
        try
        {

            // เปิด DialogService เพื่อแจ้งว่ากำลังโหลด
            runProcess_wait = true;
            StateHasChanged(); // บังคับ UI อัปเดต

            var baseApiUrl = Configuration["ApiSettings:BaseApiUrl"];

            // สร้างข้อมูลที่ต้องการส่งไปกับ POST request
            var searchCriteria = new
            {
                guid = Guid,
                branch_code = BranchCode
            };

            // ส่งข้อมูลแบบ POST พร้อมกับ search criteria
            var response = await Http.PostAsJsonAsync($"{baseApiUrl}/api/Job/GetCrmNoteDataByID", searchCriteria);

            if (response.IsSuccessStatusCode)
            {
                var notes = await response.Content.ReadFromJsonAsync<IEnumerable<CrmNote>>();
                return notes;
            }
            else
            {
                Console.WriteLine("Error fetching NoteLogData Data.");
                return Enumerable.Empty<CrmNote>();
            }
        }
        finally
        {
            // ปิด DialogService หลังจากการโหลดเสร็จสิ้น
            runProcess_wait = false;
            StateHasChanged(); // บังคับ UI อัปเดต
        }
    }




    void OnProgress(UploadProgressArgs args, string name)
    {
        // console.Log($"{args.Progress}% '{name}' / {args.Loaded} of {args.Total} bytes.");

        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {
                //  console.Log($"Uploaded: {file.Name} / {file.Size} bytes");
            }
        }
    }

    private async Task LoadUsers()
    {
        string connectionString = Configuration.GetConnectionString("DefaultConnection");
        using MySqlConnection connection = new MySqlConnection(connectionString);
        await connection.OpenAsync();

        using MySqlCommand command = new MySqlCommand(
                @"SELECT id, username, firstname, lastname
            FROM mas_users u WHERE u.organization = @organization AND u.role IN ('User', 'Supervisor')",
            connection);

        command.Parameters.AddWithValue("@organization", BranchCode); // replace with actual organization value

        using (MySqlDataReader reader = (MySqlDataReader)await command.ExecuteReaderAsync())
        {
            while (await reader.ReadAsync())
            {
                Assignworks.Add(new Assignwork
                    {
                        Id = "xx",
                        Username = reader.GetString("username"),
                        FirstName = reader.GetString("firstname"),
                        LastName = reader.GetString("lastname"),
                        FullName = $"{reader.GetString("firstname")} {reader.GetString("lastname")} ({reader.GetString("username")})"
                    });
            }
        }
    }

    private async Task OnSubmit2()
    {
        await UpdateNote();
        notes = await FetchCrmNotesDataAsync(selectedCus.guid);
        selectenote = new List<CrmNote>() { notes.FirstOrDefault() };
    }

    private async Task UpdateNote()
    {


        DateTime today = DateTime.Now;

        await MySqlConnection.OpenAsync();
        using var transaction = await MySqlConnection.BeginTransactionAsync();

        try
        {
            var query = @"INSERT INTO crm_notes (guid, activity_id, customer_id, branch_code, created_by, created_at , note)
            VALUES (@guid, @activity_id ,@customer_code, @branch_code, @created_by, @created_date ,@note)";
            using var command = new MySqlCommand(query, MySqlConnection, transaction);


            command.Parameters.AddWithValue("@guid", Guid.NewGuid().ToString()); // ใช้ GUID ที่มีอยู่
            command.Parameters.AddWithValue("@activity_id", "");
            command.Parameters.AddWithValue("@customer_code", selectedCus.guid);
            command.Parameters.AddWithValue("@branch_code", BranchCode ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@created_by", username);
            command.Parameters.AddWithValue("@created_date", today);
            command.Parameters.AddWithValue("@note", model2.note);

            await command.ExecuteNonQueryAsync();

            // Commit transaction
            await transaction.CommitAsync();
        }
        catch
        {
            // Rollback transaction in case of an error
            await transaction.RollbackAsync();
        }
        finally
        {
            await MySqlConnection.CloseAsync();

            NotificationService.Notify(NotificationSeverity.Success, "สำเร็จ", "อัปเดตข้อมูลสำเร็จ");
            StateHasChanged();
            model2.note = "";
        }
    }


    private void OnInvalidSubmit2()
    {

    }

}
