@using BlazorApp_TeleCRM.Models
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using BlazorApp_TeleCRM.Service
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject IJSRuntime JSRuntime

@inject allseeddbPDContext allseed_Db
@inject ILocalStorageService LocalStorage


<RadzenComponents @rendermode="InteractiveServer" />

<AuthorizeView>
    <Authorized Context="authState">
        <RadzenLayout>
            <RadzenHeader>
                <RadzenRow JustifyContent="JustifyContent.Normal">
                    <RadzenColumn Size="5">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                            <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
                            <RadzenLabel Text=@App_name />
                        </RadzenStack>
                    </RadzenColumn>
                    <RadzenColumn Size="7">
                        <RadzenStack Orientation="Orientation.Horizontal" Style="margin-top:5px" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.End" Wrap="FlexWrap.NoWrap">
                            <div class="rz-stack rz-display-flex rz-flex-row rz-align-items-center rz-justify-content-flex-end" style=";flex-wrap:nowrap;">
                                <div class="rz-display-none rz-display-sm-inline-flex align-items-center">
                                    <a onclick="@(() => GoToPage("/me"))" class="rz-link rz-text-nowrap rz-mx-2 rz-mx-lg-4"><span class="rz-link-text"><RadzenImage Path="@pic_avater" Style="width:32px; height:32px; border-radius:50%; border:1px solid #ccc; background-color:#f0f0f0;" /><span> ผู้ใช้งาน : @authState.User.Identity.Name </span></span></a>
                                    <RadzenDropDown AllowClear="true"
                                                    @bind-Value="select_branch"
                                                    AllowVirtualization="true"
                                                    Name="DropDownVirtualization"
                                                    AllowFiltering="true"
                                                    Data="@branches"
                                                    Change="@(args =>  OnBranchChange(select_branch))"
                                                    TextProperty="@nameof(MasBranches.name)"
                                                    ValueProperty="@nameof(MasBranches.code)"
                                                    Style="width: 100%; max-width: 500px;">
                                        <Template Context="branch">
                                            <img src="@branch.imageurl" style="max-width:25px">
                                            @branch.name
                                        </Template>
                                    </RadzenDropDown>




                                </div>
                                <RadzenAppearanceToggle />

                                <AuthorizeView Roles="Admin,Manager">
                                    <RadzenButton Variant="Variant.Flat" Icon="settings" Click="@(() => GoToPage("/console"))" ButtonStyle="ButtonStyle.Primary" class="rzi rz-display-flex rz-align-items-center" />
                                </AuthorizeView>

                            </div>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenHeader>

            <RadzenSidebar Responsive="false" Style="width: 220px" Expanded="@sidebarExpanded">
                <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="true">
                    <RadzenPanelMenuItem Text="Overview Team" Icon="home" Click="@(() => GoToPage("/home"))" Selected="@IsMenuItemSelected("/home")" />
                    <RadzenPanelMenuItem Text="งานของฉัน" Icon="assignment" Click="@(() => GoToPage("/job"))" Selected="@IsMenuItemSelected("/job")" />
                    <RadzenPanelMenuItem Text="ปฏิทินของฉัน" Icon="calendar_month" Click="@(() => GoToPage("/job-calendar"))" Selected="@IsMenuItemSelected("/job-calendar")" />
                        <RadzenPanelMenuItem Text="KPI" Icon="finance" Click="@(() => GoToPage("/kpi"))" Selected="@IsMenuItemSelected("/kpi")" />

                    <AuthorizeView Roles="Admin,Manager,Supervisor">
                        <RadzenPanelMenuItem Text="CRM - Admin" Icon="work" Expanded="@((IsMenuItemSelected("/admincustomer") || IsMenuItemSelected("/adminactivity") || IsMenuItemSelected("/adminproduct") || IsMenuItemSelected("/adminproduct-cat") ))">
                            <RadzenPanelMenuItem Text="1. ข้อมูลลูกค้า" Icon="person" Click="@(() => GoToPage("/admincustomer"))" Selected="@IsMenuItemSelected("/admincustomer")" />
                            <RadzenPanelMenuItem Text="2. กิจกรรม" Icon="sprint" Click="@(() => GoToPage("/adminactivity"))" Selected="@IsMenuItemSelected("/adminactivity")" />
                            <RadzenPanelMenuItem Text="3. สินค้า" Icon="category" Click="@(() => GoToPage("/adminproduct"))" Selected="@IsMenuItemSelected("/adminproduct")" />
                            <RadzenPanelMenuItem Text="4. ประเภทสินค้า" Icon="category" Click="@(() => GoToPage("/adminproduct-cat"))" Selected="@IsMenuItemSelected("/adminproduct-cat")" />
                        </RadzenPanelMenuItem>

                        <RadzenPanelMenuItem Text="Report - Admin" Icon="analytics" Expanded="@((IsMenuItemSelected("/overview-report") || IsMenuItemSelected("/admin-calendar")  || IsMenuItemSelected("/overview-kpi") ))">
                            <RadzenPanelMenuItem Text="Job Monitor" Icon="finance" Click="@(() => GoToPage("/overview-report"))" Selected="@IsMenuItemSelected("/overview-report")" />
                            <RadzenPanelMenuItem Text="ปฏิทิน" Icon="calendar_month" Click="@(() => GoToPage("/admin-calendar"))" Selected="@IsMenuItemSelected("/admin-calendar")" />
                            <RadzenPanelMenuItem Text="KPI" Icon="finance" Click="@(() => GoToPage("/overview-kpi"))" Selected="@IsMenuItemSelected("/overview-kpi")" />
                        </RadzenPanelMenuItem>

                    </AuthorizeView>


                    <RadzenStack Orientation="Orientation.Vertical" Wrap="FlexWrap.NoWrap" JustifyContent="JustifyContent.End">
                        <RadzenPanelMenuItem Text="ออกจากระบบ" Icon="exit_to_app" Click="@GoToLogout" />
                    </RadzenStack>

                </RadzenPanelMenu>
            </RadzenSidebar>

            <RadzenBody>
                <div class="rz-p-4">
                    @Body
                </div>
            </RadzenBody>

            <RadzenFooter>
                <span class="rz-badge rz-badge-success rz-variant-flat rz-shade-light rz-badge-pill">
                    Version 1.0.0
                </span>
            </RadzenFooter>
        </RadzenLayout>
    </Authorized>
    <NotAuthorized>
        <RadzenBody>
        </RadzenBody>
    </NotAuthorized>
</AuthorizeView>


@code {
    // Control sidebar expansion
    bool sidebarExpanded = true;

    private string? username;
    private string? organization_code;

    private string pic_avater = "user/profile.png";

    private IEnumerable<string>? roles;
    private IEnumerable<string>? organization;

    private string App_name = "ALL SEED";



    string select_branch;
    IEnumerable<MasBranches> branches;


    protected override void OnInitialized()
    {
        Navigation.LocationChanged += HandleLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            username = user.Identity.Name;
            roles = user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value);
            organization = user.Claims.Where(c => c.Type == ClaimTypes.Locality).Select(c => c.Value);
            organization_code = organization.FirstOrDefault();
            select_branch = organization_code;

            var user1 = await allseed_Db.Users.Where(u => u.username == username && u.organization == select_branch).FirstOrDefaultAsync();
            if (user1 != null)
            {
                if (!string.IsNullOrEmpty(user1.imageurl))
                {
                    pic_avater = user1.imageurl;
                }
            }

        }
        else
        {
            try
            {


                username = await LocalStorage.GetItemAsStringAsync("username");
                string? uid = await LocalStorage.GetItemAsStringAsync("uid");


                InvokeAsync(async () =>
        {
            await Task.Delay(2000);
            DialogService.Close();
        });
                await BusyDialog();


                var user1 = await allseed_Db.Users.Where(u => u.username == username && u.loginkey == uid && u.record_status==true).FirstOrDefaultAsync();
                if (user1 != null)
                {

                    if (AuthenticationStateProvider is CustomAuthenticationStateProvider customAuthProvider)
                    {
                        await customAuthProvider.MarkUserAsAuthenticated(user1);

                        var authStatex = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                        var userx = authStatex.User;

                        roles = userx.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value);
                        organization = userx.Claims.Where(c => c.Type == ClaimTypes.Locality).Select(c => c.Value);
                        organization_code = organization.FirstOrDefault();
                        select_branch = organization_code;

                        if (!string.IsNullOrEmpty(user1.imageurl))
                        {
                            pic_avater = user1.imageurl;
                        }
                    }
                    await LocalStorage.SetItemAsStringAsync("username", username);
                }
                else
                {
                    Navigation.NavigateTo("/login", forceLoad: false);
                }
            }
            catch
            {
            }
        }

        if (organization_code == "000000" && roles.Contains("Admin"))
        {
            branches = allseed_Db.MasBranches.ToList();
            var b = await allseed_Db.sys_select_organization.Where(u => u.username == username).FirstOrDefaultAsync();
            if (b != null)
            {
                select_branch = b.branch_code ;
            }  
        }
        else
        {
            branches = allseed_Db.MasBranches.Where(o => o.code == organization_code).ToList();

            if (branches.Count() > 0)
            {
                App_name = branches.Take(1).FirstOrDefault().name;
            }
         

        }

    }


    private async Task OnBranchChange(string value)
    {
        if (!string.IsNullOrEmpty(value))
        {
            if (organization_code == "000000")
            {
                var b = await allseed_Db.sys_select_organization.Where(u => u.username == username).FirstOrDefaultAsync();
                if (b != null)
                {
                    b.branch_code = select_branch;
                }
                else
                {
                    sys_select_organization o = new sys_select_organization();
                    o.username = username;
                    o.branch_code = value;
                    allseed_Db.sys_select_organization.Add(o);
                }
                await allseed_Db.SaveChangesAsync();

                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
            }
        }

    }


    private readonly Dictionary<string, string> PageTitles = new()
            {
    { "/admincustomer", "ข้อมูลรายชื่อลูกค้า" },
    { "/adminactivity", "ข้อมูลกิจกรรม" },
    { "/home", "Overview Team" },
    { "/adminproduct", "สินค้า" },
    { "/console", "คอนโซล" },
    { "/adminproduct-cat", "ประเภทสินค้า" },
    { "/job", "งานของฉัน" },
    { "/job-calendar", "ปฏิทินของฉัน" },
    { "/kpi", "KPI" }
     
            };

    private void HandleLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        var matchedTitle = PageTitles.FirstOrDefault(x => e.Location.Contains(x.Key)).Value;
        SetPageTitle(matchedTitle ?? "");
        StateHasChanged();
    }

    private string GetCurrentPage()
    {
        return new Uri(Navigation.Uri).AbsolutePath.TrimEnd('/');
    }

    private bool IsMenuItemSelected(string route)
    {
        // Compare the current URI with the given route and log the result
        var currentPage = GetCurrentPage();
        var isSelected = string.Equals(currentPage, route.TrimEnd('/'), StringComparison.OrdinalIgnoreCase);

        // Log the selection check for debugging
        // Console.WriteLine($"IsMenuItemSelected: Route = {route}, Selected = {isSelected}");

        return isSelected;
    }

    private void GoToLogin() => Navigation.NavigateTo("/adminactivity", forceLoad: false);

    private async Task GoToLogout()
    {
        // Show confirmation dialog
        var result = await DialogService.Confirm("คุณต้องการออกจากระบบหรือไม่?", "ยืนยัน",
        new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        // If user clicked "Yes", proceed with logout
        if (result.HasValue && result.Value)
        {
            // Perform logout logic here

            // Clear localStorage
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "isLoggedIn");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "username");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "roles");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "uid");

            // Redirect to login page
            Navigation.NavigateTo("/login", forceLoad: true);
        }


    }


    private void GoToPage(string route)
    {
        Navigation.NavigateTo(route, forceLoad: false);
        StateHasChanged();
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChanged;
    }

    private async Task SetPageTitle(string title)
    {
        await JSRuntime.InvokeVoidAsync("SetDocumentTitle", title);
    }

    // Busy dialog from markup
    async Task BusyDialog()
    {
        await DialogService.OpenAsync("", ds =>
    @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" class="rz-p-12">
        <RadzenImage Path="image/system/community.svg" Style="width: 200px;" AlternateText="community" />
        <RadzenText TextStyle="TextStyle.H6">Loading, please wait...</RadzenText>
    </RadzenStack>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }


}
